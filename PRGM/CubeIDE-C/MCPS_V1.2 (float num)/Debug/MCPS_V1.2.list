
MCPS_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  0800d508  0800d508  0001d508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff4  0800dff4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dff4  0800dff4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dff4  0800dff4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff8  0800dff8  0001dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000a5c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c3c  20000c3c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012100  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a2c  00000000  00000000  00032353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010d0  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d05  00000000  00000000  00035e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000226b8  00000000  00000000  00036b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001623f  00000000  00000000  0005920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbd3d  00000000  00000000  0006f44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b7c  00000000  00000000  0013b18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00140d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4f0 	.word	0x0800d4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d4f0 	.word	0x0800d4f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <debounce>:
 *	This function check button state and set the button_down variable if a 
 *	debounced button down press or release is detected.
 *	Call this function about 100 times per second. 	
 */
static inline void debounce(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
    static uint8_t button_state = 0;

    /* Read buttons (buttons are active low so invert with hardware in panel_library.c).
     * Xor with button_state to see which ones are about to change state.
     */
    uint8_t state_changed = ( KEY_READ ) ^ button_state;
 8000cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	0a9b      	lsrs	r3, r3, #10
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <debounce+0xac>)
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	0adb      	lsrs	r3, r3, #11
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b25a      	sxtb	r2, r3
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <debounce+0xb0>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	4053      	eors	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	71fb      	strb	r3, [r7, #7]
	  								 for weld connection debounce 
	 */
// 	uint8_t state_debounced = ((PORTB.IN & PIN4_bm)>>1);
	
    /* Decrease counters where state_changed = 1, set the others to 0b11. */
    VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <debounce+0xb4>)
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <debounce+0xb4>)
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <debounce+0xb8>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4013      	ands	r3, r2
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <debounce+0xb4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4053      	eors	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <debounce+0xb8>)
 8000d4e:	701a      	strb	r2, [r3, #0]
    
    /* Update state_changed to have a 1 only if the counter overflowed. */
    state_changed &= vcount_low & vcount_high;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <debounce+0xb4>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <debounce+0xb8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	71fb      	strb	r3, [r7, #7]
	
    /* Change button_state for the buttons who's counters rolled over. */
    button_state ^= state_changed;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <debounce+0xb0>)
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4053      	eors	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <debounce+0xb0>)
 8000d6e:	701a      	strb	r2, [r3, #0]
// 	buttons_hold = (button_state);

    /* Update buttons_release with buttons who's counters rolled over
     * and still them states is 0 (released).
     */
    buttons_release |= (button_state & (KEY_RELEASE_MASK/*|PIN3_bm*/)) & state_changed;   //release action.
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <debounce+0xb0>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4013      	ands	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <debounce+0xbc>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <debounce+0xbc>)
 8000d92:	701a      	strb	r2, [r3, #0]
	// buttons_press |= (button_state ^ (KEY_RELEASE_MASK/*|PIN3_bm*/)) & state_changed;   //press action.
/* 	pedalHold		 = (button_state & PIN3_bm); // Pedal state   // its state has holded , not release
	armSensor		 = (button_state & PIN2_bm); // sensor state    // its state has holded  , not release */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	48000800 	.word	0x48000800
 8000da4:	20000a8c 	.word	0x20000a8c
 8000da8:	2000000a 	.word	0x2000000a
 8000dac:	2000000b 	.word	0x2000000b
 8000db0:	20000aed 	.word	0x20000aed

08000db4 <ContactUs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char ContactUs( char input )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	static uint8_t enterFunction = 1;
	if ( enterFunction==1 )
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <ContactUs+0x7c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d115      	bne.n	8000df2 <ContactUs+0x3e>
	{
		LCD_Clear();
 8000dc6:	f007 fe01 	bl	80089cc <LCD_Clear>
		LCD_Puts(1,LCD_LINE1, "Tel:021-66760674");
 8000dca:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <ContactUs+0x80>)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 fe06 	bl	80089e0 <LCD_Puts>
		LCD_Puts(1,LCD_LINE2, "Tel:09191143937");
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <ContactUs+0x84>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f007 fe01 	bl	80089e0 <LCD_Puts>
		LCD_Puts(1,LCD_LINE3, "website");
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <ContactUs+0x88>)
 8000de0:	2102      	movs	r1, #2
 8000de2:	2001      	movs	r0, #1
 8000de4:	f007 fdfc 	bl	80089e0 <LCD_Puts>
		LCD_Puts(2,LCD_LINE4, "Nekoorad.com");
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <ContactUs+0x8c>)
 8000dea:	2103      	movs	r1, #3
 8000dec:	2002      	movs	r0, #2
 8000dee:	f007 fdf7 	bl	80089e0 <LCD_Puts>
	}
	enterFunction=0;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <ContactUs+0x7c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
	if (input == KEY_STANDBY)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d104      	bne.n	8000e08 <ContactUs+0x54>
	{
		enterFunction = 1;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <ContactUs+0x7c>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 8000e04:	2314      	movs	r3, #20
 8000e06:	e00e      	b.n	8000e26 <ContactUs+0x72>
	}
	else if (input==KEY_BACK)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d10a      	bne.n	8000e24 <ContactUs+0x70>
	{
		refreshLcd = true;  // atention to DisplyRunMenu	function
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <ContactUs+0x90>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
		variable = ST_CHANGE_MENU;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <ContactUs+0x94>)
 8000e16:	2250      	movs	r2, #80	; 0x50
 8000e18:	701a      	strb	r2, [r3, #0]
		enterFunction = 1;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <ContactUs+0x7c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8000e20:	231e      	movs	r3, #30
 8000e22:	e000      	b.n	8000e26 <ContactUs+0x72>
	}

 	return ST_CONTACT_US;
 8000e24:	2364      	movs	r3, #100	; 0x64
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000003 	.word	0x20000003
 8000e34:	0800d508 	.word	0x0800d508
 8000e38:	0800d51c 	.word	0x0800d51c
 8000e3c:	0800d52c 	.word	0x0800d52c
 8000e40:	0800d534 	.word	0x0800d534
 8000e44:	20000924 	.word	0x20000924
 8000e48:	200008fd 	.word	0x200008fd

08000e4c <HLine>:
	}
}

// It draws lines in lcd.
void HLine (char x, char y, uint8_t KindofLine,char mem8)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	717b      	strb	r3, [r7, #5]
 8000e66:	4613      	mov	r3, r2
 8000e68:	713b      	strb	r3, [r7, #4]
	 LCD_CreateChar(mem8,line[KindofLine]);
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HLine+0x4c>)
 8000e70:	441a      	add	r2, r3
 8000e72:	793b      	ldrb	r3, [r7, #4]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f007 fe24 	bl	8008ac4 <LCD_CreateChar>
	 LCD_CursorSet(x,y);
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fec2 	bl	8008c0c <LCD_CursorSet>
	 LCD_Data(mem8);
 8000e88:	793b      	ldrb	r3, [r7, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fe5f 	bl	8008b4e <LCD_Data>
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	0800d5e8 	.word	0x0800d5e8

08000e9c <WeldDisplay>:

// It shows weld animation.
void WeldDisplay(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	 uint8_t ArcNumber=0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	 while (ArcNumber<5)
 8000ea6:	e019      	b.n	8000edc <WeldDisplay+0x40>
	 {
		 if (flcd100ms)
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <WeldDisplay+0x50>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d014      	beq.n	8000edc <WeldDisplay+0x40>
		 {
			 LCD_CreateChar(LCD_Mem7,arcSymbol[ArcNumber]);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <WeldDisplay+0x54>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f007 fe01 	bl	8008ac4 <LCD_CreateChar>
			 LCD_CursorSet(10,LCD_LINE1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f007 fea1 	bl	8008c0c <LCD_CursorSet>
			 LCD_Data(LCD_Mem7);
 8000eca:	2007      	movs	r0, #7
 8000ecc:	f007 fe3f 	bl	8008b4e <LCD_Data>
			 ArcNumber++;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
			 flcd100ms=false;
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <WeldDisplay+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	 while (ArcNumber<5)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d9e2      	bls.n	8000ea8 <WeldDisplay+0xc>
		 }

	 }
}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000937 	.word	0x20000937
 8000ef0:	0800d5c0 	.word	0x0800d5c0

08000ef4 <DisplayRunMenu>:
 *
 *	This function displays LCD texts each 500 mS or if when a change in data occurs.
 *
 */
static inline void DisplayRunMenu(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
	char lcdBuffer[12];

	if ( flagRefreshValue500ms == true )
 8000efa:	4b60      	ldr	r3, [pc, #384]	; (800107c <DisplayRunMenu+0x188>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d04f      	beq.n	8000fa4 <DisplayRunMenu+0xb0>
	{
		for ( uint8_t n = 0 ; n < 4 ; n++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e049      	b.n	8000f9e <DisplayRunMenu+0xaa>
		{
			/* Display values */
			switch(elementType[n])
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4a5c      	ldr	r2, [pc, #368]	; (8001080 <DisplayRunMenu+0x18c>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d02c      	beq.n	8000f6e <DisplayRunMenu+0x7a>
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	dc3c      	bgt.n	8000f92 <DisplayRunMenu+0x9e>
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d002      	beq.n	8000f22 <DisplayRunMenu+0x2e>
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d015      	beq.n	8000f4c <DisplayRunMenu+0x58>
 8000f20:	e037      	b.n	8000f92 <DisplayRunMenu+0x9e>
			{
				case ET_FLT:	sprintf(lcdBuffer, "%-4.1f", pValues[n]->fval);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <DisplayRunMenu+0x190>)
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb0b 	bl	8000548 <__aeabi_f2d>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4638      	mov	r0, r7
 8000f38:	4953      	ldr	r1, [pc, #332]	; (8001088 <DisplayRunMenu+0x194>)
 8000f3a:	f008 fdfd 	bl	8009b38 <siprintf>
								LCD_Puts(14,n, lcdBuffer);
 8000f3e:	463a      	mov	r2, r7
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4619      	mov	r1, r3
 8000f44:	200e      	movs	r0, #14
 8000f46:	f007 fd4b 	bl	80089e0 <LCD_Puts>
								break;
 8000f4a:	e022      	b.n	8000f92 <DisplayRunMenu+0x9e>

				case ET_INT:
					            sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <DisplayRunMenu+0x190>)
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	463b      	mov	r3, r7
 8000f58:	494c      	ldr	r1, [pc, #304]	; (800108c <DisplayRunMenu+0x198>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 fdec 	bl	8009b38 <siprintf>
								LCD_Puts(14,n, lcdBuffer);
 8000f60:	463a      	mov	r2, r7
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4619      	mov	r1, r3
 8000f66:	200e      	movs	r0, #14
 8000f68:	f007 fd3a 	bl	80089e0 <LCD_Puts>
								break;
 8000f6c:	e011      	b.n	8000f92 <DisplayRunMenu+0x9e>

				case ET_FSTR:
					            LCD_Puts(14,n, pValues[n]->pText[pValues[n]->strNum]);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <DisplayRunMenu+0x190>)
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	4942      	ldr	r1, [pc, #264]	; (8001084 <DisplayRunMenu+0x190>)
 8000f7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f7e:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8000f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	200e      	movs	r0, #14
 8000f8c:	f007 fd28 	bl	80089e0 <LCD_Puts>
								break;
 8000f90:	bf00      	nop
				/*case ET_ULNG:	sprintf(lcdBuffer, "%lu", pValues[n]->ulval);
								LCD_Puts(14,n, lcdBuffer);
								break;*/

			}
			flagRefreshValue500ms = false;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <DisplayRunMenu+0x188>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
		for ( uint8_t n = 0 ; n < 4 ; n++)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d9b2      	bls.n	8000f0a <DisplayRunMenu+0x16>
		}
	}

	// Plain menu text
	if (refreshLcd == true)
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <DisplayRunMenu+0x19c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d163      	bne.n	8001074 <DisplayRunMenu+0x180>
	{
		LCD_Clear();
 8000fac:	f007 fd0e 	bl	80089cc <LCD_Clear>
		LCD_CursorSet(0,cursorLine);
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <DisplayRunMenu+0x1a0>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f007 fe28 	bl	8008c0c <LCD_CursorSet>
		LCD_Data(0x7E);  //  "->" character
 8000fbc:	207e      	movs	r0, #126	; 0x7e
 8000fbe:	f007 fdc6 	bl	8008b4e <LCD_Data>

		for ( uint8_t n = 0 ; n < 4 ; n++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73bb      	strb	r3, [r7, #14]
 8000fc6:	e04f      	b.n	8001068 <DisplayRunMenu+0x174>
		{
			// refresh lcd.
			LCD_Puts(1,n, statetext[n]);
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	4a33      	ldr	r2, [pc, #204]	; (8001098 <DisplayRunMenu+0x1a4>)
 8000fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f007 fd03 	bl	80089e0 <LCD_Puts>

			/* Display values */
			switch(elementType[n])
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <DisplayRunMenu+0x18c>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d02c      	beq.n	800103e <DisplayRunMenu+0x14a>
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	dc3c      	bgt.n	8001062 <DisplayRunMenu+0x16e>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <DisplayRunMenu+0xfe>
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d015      	beq.n	800101c <DisplayRunMenu+0x128>
 8000ff0:	e037      	b.n	8001062 <DisplayRunMenu+0x16e>
			{
				case ET_FLT:	sprintf(lcdBuffer, "%-4.1f", pValues[n]->fval);
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <DisplayRunMenu+0x190>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff faa3 	bl	8000548 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4638      	mov	r0, r7
 8001008:	491f      	ldr	r1, [pc, #124]	; (8001088 <DisplayRunMenu+0x194>)
 800100a:	f008 fd95 	bl	8009b38 <siprintf>
								LCD_Puts(14,n, lcdBuffer);
 800100e:	463a      	mov	r2, r7
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	4619      	mov	r1, r3
 8001014:	200e      	movs	r0, #14
 8001016:	f007 fce3 	bl	80089e0 <LCD_Puts>
								break;
 800101a:	e022      	b.n	8001062 <DisplayRunMenu+0x16e>

				case ET_INT:	sprintf(lcdBuffer, "%-3d", pValues[n]->ival);
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <DisplayRunMenu+0x190>)
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	463b      	mov	r3, r7
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <DisplayRunMenu+0x198>)
 800102a:	4618      	mov	r0, r3
 800102c:	f008 fd84 	bl	8009b38 <siprintf>
								LCD_Puts(14,n, lcdBuffer);
 8001030:	463a      	mov	r2, r7
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	4619      	mov	r1, r3
 8001036:	200e      	movs	r0, #14
 8001038:	f007 fcd2 	bl	80089e0 <LCD_Puts>
								break;
 800103c:	e011      	b.n	8001062 <DisplayRunMenu+0x16e>

				case ET_FSTR:	LCD_Puts(14,n, pValues[n]->pText[pValues[n]->strNum]);
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <DisplayRunMenu+0x190>)
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <DisplayRunMenu+0x190>)
 800104a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800104e:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8001052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4619      	mov	r1, r3
 800105a:	200e      	movs	r0, #14
 800105c:	f007 fcc0 	bl	80089e0 <LCD_Puts>
								break;
 8001060:	bf00      	nop
		for ( uint8_t n = 0 ; n < 4 ; n++)
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	3301      	adds	r3, #1
 8001066:	73bb      	strb	r3, [r7, #14]
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9ac      	bls.n	8000fc8 <DisplayRunMenu+0xd4>
								break;*/

			}
		}

		refreshLcd = false;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <DisplayRunMenu+0x19c>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
	}
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000931 	.word	0x20000931
 8001080:	20000910 	.word	0x20000910
 8001084:	20000914 	.word	0x20000914
 8001088:	0800d544 	.word	0x0800d544
 800108c:	0800d54c 	.word	0x0800d54c
 8001090:	20000924 	.word	0x20000924
 8001094:	200008ff 	.word	0x200008ff
 8001098:	20000900 	.word	0x20000900

0800109c <VariableMachine>:
  * \param cursorLine	Pointer for save next cursor line to it.
  *
  * \return nextVariable    next state according to the current state and button input.
  */
unsigned char VariableMachine(unsigned char stimuli)
 {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 	unsigned char nextVariable = variable;    // Default stay in same state
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <VariableMachine+0x80>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	73fb      	strb	r3, [r7, #15]
 	unsigned char i, j;
 	uint8_t cursorBuffer;

 	for (i=0; ( j=StateNextVar[i].variable) ; i++ )
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]
 80010b0:	e022      	b.n	80010f8 <VariableMachine+0x5c>
 	{
 		if ( j == variable &&
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <VariableMachine+0x80>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	7b7a      	ldrb	r2, [r7, #13]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d11a      	bne.n	80010f2 <VariableMachine+0x56>
 				StateNextVar[i].input== stimuli)
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <VariableMachine+0x84>)
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	785b      	ldrb	r3, [r3, #1]
 		if ( j == variable &&
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d112      	bne.n	80010f2 <VariableMachine+0x56>

 			{
 			nextVariable = StateNextVar[i].nextVariable;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <VariableMachine+0x84>)
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	789b      	ldrb	r3, [r3, #2]
 80010d6:	73fb      	strb	r3, [r7, #15]

 			cursorBuffer = StateNextVar[i].cursorLine;
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <VariableMachine+0x84>)
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	78db      	ldrb	r3, [r3, #3]
 80010e2:	733b      	strb	r3, [r7, #12]


 			if ( cursorBuffer != LCD_LINE_RECENT )
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00f      	beq.n	800110a <VariableMachine+0x6e>
 			cursorLine = cursorBuffer;
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <VariableMachine+0x88>)
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	7013      	strb	r3, [r2, #0]


 			break;
 80010f0:	e00b      	b.n	800110a <VariableMachine+0x6e>
 	for (i=0; ( j=StateNextVar[i].variable) ; i++ )
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <VariableMachine+0x84>)
 80010fc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001100:	737b      	strb	r3, [r7, #13]
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1d4      	bne.n	80010b2 <VariableMachine+0x16>
 8001108:	e000      	b.n	800110c <VariableMachine+0x70>
 			break;
 800110a:	bf00      	nop
 		}
 	}


 	return nextVariable;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 }
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200008fd 	.word	0x200008fd
 8001120:	20000960 	.word	0x20000960
 8001124:	200008ff 	.word	0x200008ff

08001128 <StandBy>:

char StandBy(char input)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	static char x1_dot=0/*,count1=0*/;

	static uint8_t	enterFunction = 1;

	if ( enterFunction==1 )
 8001132:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <StandBy+0x1a0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <StandBy+0x24>
	{
		buzzer[BUZZ_NUM] = 1;
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <StandBy+0x1a4>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
		buzzer[BUZZ_DELAY] = 255;
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <StandBy+0x1a4>)
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	705a      	strb	r2, [r3, #1]
		enterFunction =0;
 8001146:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <StandBy+0x1a0>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
	}


	if(reWarning == 0 || warningVar == 0)	//need for show after some second warning occured or not any warnings.
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <StandBy+0x1a8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <StandBy+0x36>
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <StandBy+0x1ac>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 80a4 	bne.w	80012a6 <StandBy+0x17e>
	{
			if(f2lcd100ms)
 800115e:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <StandBy+0x1b0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d075      	beq.n	8001254 <StandBy+0x12c>
			{

				// display animation of medinalTeb first time when turn on after that show "STANDBY"
				if (x1_dot>=6 && count1<19)
 8001168:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <StandBy+0x1b4>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d958      	bls.n	8001222 <StandBy+0xfa>
 8001170:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <StandBy+0x1b8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d854      	bhi.n	8001222 <StandBy+0xfa>
				{
					count1++;
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <StandBy+0x1b8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <StandBy+0x1b8>)
 8001182:	701a      	strb	r2, [r3, #0]
					if(count1<=5)
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <StandBy+0x1b8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d813      	bhi.n	80011b4 <StandBy+0x8c>
					{
						HLine(9+count1,LCD_LINE3,LCD_UpLine,LCD_Mem0);
 800118c:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <StandBy+0x1b8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3309      	adds	r3, #9
 8001192:	b2d8      	uxtb	r0, r3
 8001194:	2300      	movs	r3, #0
 8001196:	2202      	movs	r2, #2
 8001198:	2102      	movs	r1, #2
 800119a:	f7ff fe57 	bl	8000e4c <HLine>
						HLine(10-count1,LCD_LINE3,LCD_UpLine,LCD_Mem0);
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <StandBy+0x1b8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f1c3 030a 	rsb	r3, r3, #10
 80011a6:	b2d8      	uxtb	r0, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	2202      	movs	r2, #2
 80011ac:	2102      	movs	r1, #2
 80011ae:	f7ff fe4d 	bl	8000e4c <HLine>
					if(count1<=5)
 80011b2:	e04b      	b.n	800124c <StandBy+0x124>
					}
					else if (count1==6)
 80011b4:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <StandBy+0x1b8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d113      	bne.n	80011e4 <StandBy+0xbc>
					{
						HLine(9+count1,LCD_LINE2,LCD_RightLine,LCD_Mem1);
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <StandBy+0x1b8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3309      	adds	r3, #9
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	2301      	movs	r3, #1
 80011c6:	2201      	movs	r2, #1
 80011c8:	2101      	movs	r1, #1
 80011ca:	f7ff fe3f 	bl	8000e4c <HLine>
						HLine(10-count1,LCD_LINE2,LCD_LeftLine,LCD_Mem2);
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <StandBy+0x1b8>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f1c3 030a 	rsb	r3, r3, #10
 80011d6:	b2d8      	uxtb	r0, r3
 80011d8:	2302      	movs	r3, #2
 80011da:	2203      	movs	r2, #3
 80011dc:	2101      	movs	r1, #1
 80011de:	f7ff fe35 	bl	8000e4c <HLine>
					if(count1<=5)
 80011e2:	e033      	b.n	800124c <StandBy+0x124>
					}
					else if (count1<=11)
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <StandBy+0x1b8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b0b      	cmp	r3, #11
 80011ea:	d813      	bhi.n	8001214 <StandBy+0xec>
					{
						HLine(21-count1,LCD_LINE1,LCD_DownLine,LCD_Mem3);
 80011ec:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <StandBy+0x1b8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f1c3 0315 	rsb	r3, r3, #21
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	2303      	movs	r3, #3
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	f7ff fe26 	bl	8000e4c <HLine>
						HLine(count1-2,LCD_LINE1,LCD_DownLine,LCD_Mem3);
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <StandBy+0x1b8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3b02      	subs	r3, #2
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	2303      	movs	r3, #3
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	f7ff fe1d 	bl	8000e4c <HLine>
					if(count1<=5)
 8001212:	e01b      	b.n	800124c <StandBy+0x124>
					}
					else if (count1<=12)
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <StandBy+0x1b8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b0c      	cmp	r3, #12
 800121a:	d817      	bhi.n	800124c <StandBy+0x124>
					WeldDisplay();
 800121c:	f7ff fe3e 	bl	8000e9c <WeldDisplay>
					if(count1<=5)
 8001220:	e014      	b.n	800124c <StandBy+0x124>

				}
				else if (count1==19)
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <StandBy+0x1b8>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b13      	cmp	r3, #19
 8001228:	d111      	bne.n	800124e <StandBy+0x126>
				{
					LCD_Clear();
 800122a:	f007 fbcf 	bl	80089cc <LCD_Clear>
					LCD_Puts(7,LCD_LINE2, "STANDBY");
 800122e:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <StandBy+0x1bc>)
 8001230:	2101      	movs	r1, #1
 8001232:	2007      	movs	r0, #7
 8001234:	f007 fbd4 	bl	80089e0 <LCD_Puts>
					showARMWELD=false;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <StandBy+0x1c0>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
//					WELD_FAN_OFF;   // turn off fan when ARMWELD animation finish.
					count1++;  // it runs just first time this (if).
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <StandBy+0x1b8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <StandBy+0x1b8>)
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e000      	b.n	800124e <StandBy+0x126>
					if(count1<=5)
 800124c:	bf00      	nop
				}
				f2lcd100ms=false;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <StandBy+0x1b0>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
			}

			if (flcd500ms )
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <StandBy+0x1c4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <StandBy+0x17e>
			{
				if (showARMWELD==true)
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <StandBy+0x1c0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d11c      	bne.n	80012a0 <StandBy+0x178>
				{
//					WELD_FAN_ON;   // turn on fan when the device  is turning on.
					if(x1_dot<6)
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <StandBy+0x1b4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b05      	cmp	r3, #5
 800126c:	d807      	bhi.n	800127e <StandBy+0x156>
					{
						LCD_Clear();
 800126e:	f007 fbad 	bl	80089cc <LCD_Clear>
						x1_dot++;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <StandBy+0x1b4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <StandBy+0x1b4>)
 800127c:	701a      	strb	r2, [r3, #0]
					}
					LCD_Puts(x1_dot,1, "NEKOO");
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <StandBy+0x1b4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <StandBy+0x1c8>)
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f007 fbaa 	bl	80089e0 <LCD_Puts>
					LCD_Puts((17-x1_dot),1, "RAD");
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <StandBy+0x1b4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f1c3 0311 	rsb	r3, r3, #17
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <StandBy+0x1cc>)
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fba0 	bl	80089e0 <LCD_Puts>
				}

				flcd500ms= false;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <StandBy+0x1c4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			}

	}
 	if ( input == KEY_STANDBY )
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d107      	bne.n	80012bc <StandBy+0x194>
	{
		enterFunction = 1;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <StandBy+0x1a0>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		showARMWELD=false;  // because of don't show ARMWELD when come from RunMeno.
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <StandBy+0x1c0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 		return ST_MAIN_STATE;
 80012b8:	231e      	movs	r3, #30
 80012ba:	e000      	b.n	80012be <StandBy+0x196>
	}

 	return ST_STANDBY;
 80012bc:	2314      	movs	r3, #20
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000004 	.word	0x20000004
 80012cc:	2000095c 	.word	0x2000095c
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000928 	.word	0x20000928
 80012d8:	20000938 	.word	0x20000938
 80012dc:	20000a78 	.word	0x20000a78
 80012e0:	2000092b 	.word	0x2000092b
 80012e4:	0800d554 	.word	0x0800d554
 80012e8:	20000001 	.word	0x20000001
 80012ec:	2000093a 	.word	0x2000093a
 80012f0:	0800d55c 	.word	0x0800d55c
 80012f4:	0800d564 	.word	0x0800d564

080012f8 <MainMenu>:

char MainMenu(char input)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	/*if (values[VA_WAVE_TYPE].strNum == VOL_LEVEL_NONE )
	{

	}*/

	if ( nextVariable != variable )
 8001302:	4b99      	ldr	r3, [pc, #612]	; (8001568 <MainMenu+0x270>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b99      	ldr	r3, [pc, #612]	; (800156c <MainMenu+0x274>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d071      	beq.n	80013f2 <MainMenu+0xfa>
	{
		variable = nextVariable;
 800130e:	4b96      	ldr	r3, [pc, #600]	; (8001568 <MainMenu+0x270>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b96      	ldr	r3, [pc, #600]	; (800156c <MainMenu+0x274>)
 8001314:	701a      	strb	r2, [r3, #0]
		refreshLcd = true;  // atention to DisplyRunMenu	function
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <MainMenu+0x278>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
		for ( uint8_t currentVariable = 0; (j=StateVar[currentVariable].variable); currentVariable++ )
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e051      	b.n	80013c6 <MainMenu+0xce>
		{
			/* macro to determine which variable must be displayed in first line in LCD. */
			#define FIRST_LINE_VAR		currentVariable-cursorLine

			if ( j == variable )
 8001322:	4b92      	ldr	r3, [pc, #584]	; (800156c <MainMenu+0x274>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	7b7a      	ldrb	r2, [r7, #13]
 8001328:	429a      	cmp	r2, r3
 800132a:	d149      	bne.n	80013c0 <MainMenu+0xc8>
			{
				adjustState = StateVar[currentVariable].adjustState;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4991      	ldr	r1, [pc, #580]	; (8001574 <MainMenu+0x27c>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3308      	adds	r3, #8
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <MainMenu+0x280>)
 8001340:	701a      	strb	r2, [r3, #0]
				for ( uint8_t n = 0 ; n<4 ; n++ )
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
 8001346:	e037      	b.n	80013b8 <MainMenu+0xc0>
				{
					statetext[n]  = StateVar[FIRST_LINE_VAR +n].pText;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	4a8c      	ldr	r2, [pc, #560]	; (800157c <MainMenu+0x284>)
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	1a9a      	subs	r2, r3, r2
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	441a      	add	r2, r3
 8001354:	7bb9      	ldrb	r1, [r7, #14]
 8001356:	4887      	ldr	r0, [pc, #540]	; (8001574 <MainMenu+0x27c>)
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4403      	add	r3, r0
 8001362:	3304      	adds	r3, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a86      	ldr	r2, [pc, #536]	; (8001580 <MainMenu+0x288>)
 8001368:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					elementType[n] = StateVar[FIRST_LINE_VAR +n].elementType;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4a83      	ldr	r2, [pc, #524]	; (800157c <MainMenu+0x284>)
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	1a9a      	subs	r2, r3, r2
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	441a      	add	r2, r3
 8001378:	7bb9      	ldrb	r1, [r7, #14]
 800137a:	487e      	ldr	r0, [pc, #504]	; (8001574 <MainMenu+0x27c>)
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4403      	add	r3, r0
 8001386:	3310      	adds	r3, #16
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	4b7e      	ldr	r3, [pc, #504]	; (8001584 <MainMenu+0x28c>)
 800138c:	545a      	strb	r2, [r3, r1]
					pValues[n] = (ValueStruct*)StateVar[FIRST_LINE_VAR +n].pValueStruct;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <MainMenu+0x284>)
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	1a9a      	subs	r2, r3, r2
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	441a      	add	r2, r3
 800139a:	7bb9      	ldrb	r1, [r7, #14]
 800139c:	4875      	ldr	r0, [pc, #468]	; (8001574 <MainMenu+0x27c>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4403      	add	r3, r0
 80013a8:	330c      	adds	r3, #12
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a76      	ldr	r2, [pc, #472]	; (8001588 <MainMenu+0x290>)
 80013ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				for ( uint8_t n = 0 ; n<4 ; n++ )
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73bb      	strb	r3, [r7, #14]
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d9c4      	bls.n	8001348 <MainMenu+0x50>
				}
				break;
 80013be:	e00e      	b.n	80013de <MainMenu+0xe6>
		for ( uint8_t currentVariable = 0; (j=StateVar[currentVariable].variable); currentVariable++ )
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	496a      	ldr	r1, [pc, #424]	; (8001574 <MainMenu+0x27c>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	737b      	strb	r3, [r7, #13]
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1a1      	bne.n	8001322 <MainMenu+0x2a>
			}
		}
		if( reWarning == 0 || warningVar == 0 )	//need for show after some second warning occured or not any warnings.
 80013de:	4b6b      	ldr	r3, [pc, #428]	; (800158c <MainMenu+0x294>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <MainMenu+0xf6>
 80013e6:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <MainMenu+0x298>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <MainMenu+0xfa>
			DisplayRunMenu();
 80013ee:	f7ff fd81 	bl	8000ef4 <DisplayRunMenu>
	}
	if ( input == KEY_STANDBY && StateVar[cursorLine].IndexMenu == First_Menu )
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d11a      	bne.n	800142e <MainMenu+0x136>
 80013f8:	4b60      	ldr	r3, [pc, #384]	; (800157c <MainMenu+0x284>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4a5d      	ldr	r2, [pc, #372]	; (8001574 <MainMenu+0x27c>)
 8001400:	460b      	mov	r3, r1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3311      	adds	r3, #17
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2bc8      	cmp	r3, #200	; 0xc8
 8001410:	d10d      	bne.n	800142e <MainMenu+0x136>
	{
		count1=19;
 8001412:	4b60      	ldr	r3, [pc, #384]	; (8001594 <MainMenu+0x29c>)
 8001414:	2213      	movs	r2, #19
 8001416:	701a      	strb	r2, [r3, #0]
		nextVariable = VA_FIRST_VARIABLE;
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <MainMenu+0x270>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
		cursorLine = LCD_LINE1;
 800141e:	4b57      	ldr	r3, [pc, #348]	; (800157c <MainMenu+0x284>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		variable=VA_SECOND_VARIABLE;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <MainMenu+0x274>)
 8001426:	2202      	movs	r2, #2
 8001428:	701a      	strb	r2, [r3, #0]
		return ST_STANDBY;
 800142a:	2314      	movs	r3, #20
 800142c:	e145      	b.n	80016ba <MainMenu+0x3c2>
	}
	else if ( input == KEY_ACCEPT )
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 80d3 	bne.w	80015dc <MainMenu+0x2e4>
	{
		if( StateVar[cursorLine].IndexMenu == First_Menu )
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <MainMenu+0x284>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <MainMenu+0x27c>)
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3311      	adds	r3, #17
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2bc8      	cmp	r3, #200	; 0xc8
 800144e:	f040 8088 	bne.w	8001562 <MainMenu+0x26a>
		{
			if( adjustState == ST_CONTACT_US )
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <MainMenu+0x280>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d102      	bne.n	8001460 <MainMenu+0x168>
				return adjustState;
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <MainMenu+0x280>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	e12c      	b.n	80016ba <MainMenu+0x3c2>
			else
			{
				if( variable==MAIN_Alfa )
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <MainMenu+0x274>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d11a      	bne.n	800149e <MainMenu+0x1a6>
				{
					memcpy(&StateVar, &stateVariable_Alfa, sizeof(stateVariable_Alfa));
 8001468:	4a42      	ldr	r2, [pc, #264]	; (8001574 <MainMenu+0x27c>)
 800146a:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <MainMenu+0x2a0>)
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	238c      	movs	r3, #140	; 0x8c
 8001472:	461a      	mov	r2, r3
 8001474:	f008 fc43 	bl	8009cfe <memcpy>
					Frequency = values_Alfa[2].fval;
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <MainMenu+0x2a4>)
 800147a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147c:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <MainMenu+0x2a8>)
 800147e:	6013      	str	r3, [r2, #0]
					Time_ON = values_Alfa[3].fval;
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <MainMenu+0x2a4>)
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <MainMenu+0x2ac>)
 8001486:	6013      	str	r3, [r2, #0]
					StepRamp = (values_Alfa[4].fval * 1000)/1.000;
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <MainMenu+0x2a4>)
 800148a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800148e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80015a8 <MainMenu+0x2b0>
 8001492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001496:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MainMenu+0x2b4>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
 800149c:	e03f      	b.n	800151e <MainMenu+0x226>
				}
				else if( variable==MAIN_Beta )
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <MainMenu+0x274>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d108      	bne.n	80014b8 <MainMenu+0x1c0>
					memcpy(&StateVar, &stateVariable_Beta, sizeof(stateVariable_Beta));
 80014a6:	4a33      	ldr	r2, [pc, #204]	; (8001574 <MainMenu+0x27c>)
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <MainMenu+0x2b8>)
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	238c      	movs	r3, #140	; 0x8c
 80014b0:	461a      	mov	r2, r3
 80014b2:	f008 fc24 	bl	8009cfe <memcpy>
 80014b6:	e032      	b.n	800151e <MainMenu+0x226>
				else if( variable==MAIN_Teta )
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MainMenu+0x274>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d108      	bne.n	80014d2 <MainMenu+0x1da>
					memcpy(&StateVar, &stateVariable_Teta, sizeof(stateVariable_Teta));
 80014c0:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <MainMenu+0x27c>)
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <MainMenu+0x2bc>)
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	238c      	movs	r3, #140	; 0x8c
 80014ca:	461a      	mov	r2, r3
 80014cc:	f008 fc17 	bl	8009cfe <memcpy>
 80014d0:	e025      	b.n	800151e <MainMenu+0x226>
				else if( variable==MAIN_Delta )
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <MainMenu+0x274>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d108      	bne.n	80014ec <MainMenu+0x1f4>
					memcpy(&StateVar, &stateVariable_Delta, sizeof(stateVariable_Delta));
 80014da:	4a26      	ldr	r2, [pc, #152]	; (8001574 <MainMenu+0x27c>)
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <MainMenu+0x2c0>)
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	238c      	movs	r3, #140	; 0x8c
 80014e4:	461a      	mov	r2, r3
 80014e6:	f008 fc0a 	bl	8009cfe <memcpy>
 80014ea:	e018      	b.n	800151e <MainMenu+0x226>
				else if( variable==MAIN_Gama )
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MainMenu+0x274>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d108      	bne.n	8001506 <MainMenu+0x20e>
					memcpy(&StateVar, &stateVariable_Gama, sizeof(stateVariable_Gama));
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <MainMenu+0x27c>)
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <MainMenu+0x2c4>)
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	238c      	movs	r3, #140	; 0x8c
 80014fe:	461a      	mov	r2, r3
 8001500:	f008 fbfd 	bl	8009cfe <memcpy>
 8001504:	e00b      	b.n	800151e <MainMenu+0x226>
				else if( variable==MAIN_Custom )
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MainMenu+0x274>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d107      	bne.n	800151e <MainMenu+0x226>
					memcpy(&StateVar, &stateVariable_Custom, sizeof(stateVariable_Custom));
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <MainMenu+0x27c>)
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <MainMenu+0x2c8>)
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	238c      	movs	r3, #140	; 0x8c
 8001518:	461a      	mov	r2, r3
 800151a:	f008 fbf0 	bl	8009cfe <memcpy>

				memcpy(&StateNextVar, &state_nextVariable, sizeof(state_nextVariable));
 800151e:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <MainMenu+0x2cc>)
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MainMenu+0x2d0>)
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				//memcpy(&StateVar, &stateVariable, sizeof(stateVariable));
				memcpy(&StateMenu, &menuState, sizeof(menuState));
 8001536:	2248      	movs	r2, #72	; 0x48
 8001538:	4924      	ldr	r1, [pc, #144]	; (80015cc <MainMenu+0x2d4>)
 800153a:	4825      	ldr	r0, [pc, #148]	; (80015d0 <MainMenu+0x2d8>)
 800153c:	f008 fbdf 	bl	8009cfe <memcpy>
				nextVariable = VA_EIGHTH_VARIABLE;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MainMenu+0x270>)
 8001542:	2208      	movs	r2, #8
 8001544:	701a      	strb	r2, [r3, #0]
				cursor_main = cursorLine;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MainMenu+0x284>)
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MainMenu+0x2dc>)
 800154c:	701a      	strb	r2, [r3, #0]
				cursorLine = LCD_LINE1;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MainMenu+0x284>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
				cursor_variable = variable;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <MainMenu+0x274>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MainMenu+0x2e0>)
 800155a:	701a      	strb	r2, [r3, #0]
				return (adjustState);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MainMenu+0x280>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	e0ab      	b.n	80016ba <MainMenu+0x3c2>
			}
		}
		else
		{
			return adjustState;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <MainMenu+0x280>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	e0a8      	b.n	80016ba <MainMenu+0x3c2>
 8001568:	20000005 	.word	0x20000005
 800156c:	200008fd 	.word	0x200008fd
 8001570:	20000924 	.word	0x20000924
 8001574:	2000099c 	.word	0x2000099c
 8001578:	20000006 	.word	0x20000006
 800157c:	200008ff 	.word	0x200008ff
 8001580:	20000900 	.word	0x20000900
 8001584:	20000910 	.word	0x20000910
 8001588:	20000914 	.word	0x20000914
 800158c:	20000000 	.word	0x20000000
 8001590:	20000928 	.word	0x20000928
 8001594:	2000092b 	.word	0x2000092b
 8001598:	0800d7d4 	.word	0x0800d7d4
 800159c:	200002dc 	.word	0x200002dc
 80015a0:	20000958 	.word	0x20000958
 80015a4:	20000954 	.word	0x20000954
 80015a8:	447a0000 	.word	0x447a0000
 80015ac:	2000094c 	.word	0x2000094c
 80015b0:	0800d860 	.word	0x0800d860
 80015b4:	0800d8ec 	.word	0x0800d8ec
 80015b8:	0800d978 	.word	0x0800d978
 80015bc:	0800da04 	.word	0x0800da04
 80015c0:	0800da90 	.word	0x0800da90
 80015c4:	20000960 	.word	0x20000960
 80015c8:	0800d7a4 	.word	0x0800d7a4
 80015cc:	0800db1c 	.word	0x0800db1c
 80015d0:	20000a3c 	.word	0x20000a3c
 80015d4:	20000a79 	.word	0x20000a79
 80015d8:	20000a7a 	.word	0x20000a7a
		}
	}
	else if ( input == KEY_BACK )
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d12b      	bne.n	800163a <MainMenu+0x342>
	{
		memcpy(&StateNextVar, &main_state_nextVariable, sizeof(main_state_nextVariable));
 80015e2:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <MainMenu+0x3cc>)
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <MainMenu+0x3d0>)
 80015e6:	4614      	mov	r4, r2
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015fa:	e884 0003 	stmia.w	r4, {r0, r1}
		memcpy(&StateVar, &main_stateVariable, sizeof(main_stateVariable));
 80015fe:	4a33      	ldr	r2, [pc, #204]	; (80016cc <MainMenu+0x3d4>)
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <MainMenu+0x3d8>)
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	23a0      	movs	r3, #160	; 0xa0
 8001608:	461a      	mov	r2, r3
 800160a:	f008 fb78 	bl	8009cfe <memcpy>
		memcpy(&StateMenu, &main_menuState, sizeof(main_menuState));
 800160e:	4a31      	ldr	r2, [pc, #196]	; (80016d4 <MainMenu+0x3dc>)
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <MainMenu+0x3e0>)
 8001612:	4614      	mov	r4, r2
 8001614:	461d      	mov	r5, r3
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		cursorLine = cursor_main;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <MainMenu+0x3e4>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MainMenu+0x3e8>)
 800162c:	701a      	strb	r2, [r3, #0]
		//nextVariable = cursorLine+1;
	    nextVariable = cursor_variable;
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MainMenu+0x3ec>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <MainMenu+0x3f0>)
 8001634:	701a      	strb	r2, [r3, #0]
		return ST_MAIN_STATE;
 8001636:	231e      	movs	r3, #30
 8001638:	e03f      	b.n	80016ba <MainMenu+0x3c2>
	}
	else if ( input == KEY_START )
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d130      	bne.n	80016a2 <MainMenu+0x3aa>
	{
		if( StateVar[cursorLine].IndexMenu != First_Menu )
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <MainMenu+0x3e8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MainMenu+0x3d4>)
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3311      	adds	r3, #17
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2bc8      	cmp	r3, #200	; 0xc8
 8001658:	d021      	beq.n	800169e <MainMenu+0x3a6>
		{
			// Act like Start Buttom
			if ( enterFunction == 1 )  // If it is the first time the button is pushed and the variables of frequency and time-on(duty cycle) are set
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <MainMenu+0x3f4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d110      	bne.n	8001684 <MainMenu+0x38c>
			{
				HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001662:	2100      	movs	r1, #0
 8001664:	4822      	ldr	r0, [pc, #136]	; (80016f0 <MainMenu+0x3f8>)
 8001666:	f005 fd1f 	bl	80070a8 <HAL_TIM_PWM_Start_IT>
				LED1_SET(1);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001670:	4820      	ldr	r0, [pc, #128]	; (80016f4 <MainMenu+0x3fc>)
 8001672:	f003 fa23 	bl	8004abc <HAL_GPIO_WritePin>
				flagUpdatePWM = true; // set variable of frequency and duty cycle of PWM on TIM3 Intrupt
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MainMenu+0x400>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
				enterFunction = 0;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MainMenu+0x3f4>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e00c      	b.n	800169e <MainMenu+0x3a6>
			}
			//Act like Stop Buttom
			else
			{
				HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001684:	2100      	movs	r1, #0
 8001686:	481a      	ldr	r0, [pc, #104]	; (80016f0 <MainMenu+0x3f8>)
 8001688:	f005 fe48 	bl	800731c <HAL_TIM_PWM_Stop_IT>
				LED1_SET(0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MainMenu+0x3fc>)
 8001694:	f003 fa12 	bl	8004abc <HAL_GPIO_WritePin>
				enterFunction = 1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MainMenu+0x3f4>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
			}
		}
		return ST_MAIN_STATE;
 800169e:	231e      	movs	r3, #30
 80016a0:	e00b      	b.n	80016ba <MainMenu+0x3c2>
	}
	else if ( input != KEY_NULL )
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <MainMenu+0x3c0>
	{
		// Plain menu, clock the state machine
		nextVariable = VariableMachine(input);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fcf6 	bl	800109c <VariableMachine>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MainMenu+0x3f0>)
 80016b6:	701a      	strb	r2, [r3, #0]
	}

	return ST_MAIN_STATE;
 80016b8:	231e      	movs	r3, #30
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000960 	.word	0x20000960
 80016c8:	0800d650 	.word	0x0800d650
 80016cc:	2000099c 	.word	0x2000099c
 80016d0:	0800d688 	.word	0x0800d688
 80016d4:	20000a3c 	.word	0x20000a3c
 80016d8:	0800d728 	.word	0x0800d728
 80016dc:	20000a79 	.word	0x20000a79
 80016e0:	200008ff 	.word	0x200008ff
 80016e4:	20000a7a 	.word	0x20000a7a
 80016e8:	20000005 	.word	0x20000005
 80016ec:	20000002 	.word	0x20000002
 80016f0:	20000864 	.word	0x20000864
 80016f4:	48000800 	.word	0x48000800
 80016f8:	2000093c 	.word	0x2000093c

080016fc <IntAdjust>:
 * \param input			Buttons state after debouncig.
 *
 * \return nextState    next state according to the current state and button input.
 */
char IntAdjust(char input)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	int16_t valueIA;
    uint8_t j=1;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	static char enterFunction = 1;

	char lcdBufferIA[15];

	if ( enterFunction==1 )
 800170c:	4bb3      	ldr	r3, [pc, #716]	; (80019dc <IntAdjust+0x2e0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10c      	bne.n	800172e <IntAdjust+0x32>
	{
		//pValues[cursorLine]->ival=values[cursorLine+1].ival;
		TIM1->CNT = (pValues[cursorLine]->ival)*ROTARY_SPC;       //The amount of variable(that cursor point it)  return to CNT of timer or QDEC .
 8001714:	4bb2      	ldr	r3, [pc, #712]	; (80019e0 <IntAdjust+0x2e4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4bb2      	ldr	r3, [pc, #712]	; (80019e4 <IntAdjust+0x2e8>)
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <IntAdjust+0x2ec>)
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
		enterFunction = 0;
 8001728:	4bac      	ldr	r3, [pc, #688]	; (80019dc <IntAdjust+0x2e0>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	}
	LCD_CreateChar(0,updownCharacter);// "<>" character
 800172e:	49af      	ldr	r1, [pc, #700]	; (80019ec <IntAdjust+0x2f0>)
 8001730:	2000      	movs	r0, #0
 8001732:	f007 f9c7 	bl	8008ac4 <LCD_CreateChar>
	LCD_CursorSet(13,cursorLine);
 8001736:	4baa      	ldr	r3, [pc, #680]	; (80019e0 <IntAdjust+0x2e4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	200d      	movs	r0, #13
 800173e:	f007 fa65 	bl	8008c0c <LCD_CursorSet>
	LCD_Data(0);  //  "<>" character
 8001742:	2000      	movs	r0, #0
 8001744:	f007 fa03 	bl	8008b4e <LCD_Data>


	/* Check timer valueIA to be in range. */
	valueIA = (int16_t)TIM1->CNT/ROTARY_SPC;// int16_t to avoid of roll over timer valueIA from bottom to top.
 8001748:	4ba7      	ldr	r3, [pc, #668]	; (80019e8 <IntAdjust+0x2ec>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	b21b      	sxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <IntAdjust+0x58>
 8001752:	3303      	adds	r3, #3
 8001754:	109b      	asrs	r3, r3, #2
 8001756:	83fb      	strh	r3, [r7, #30]

	if( valueIA > (int16_t)pValues[cursorLine]->upLimit )
 8001758:	4ba1      	ldr	r3, [pc, #644]	; (80019e0 <IntAdjust+0x2e4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <IntAdjust+0x2e8>)
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	edd3 7a06 	vldr	s15, [r3, #24]
 8001768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176c:	ee17 3a90 	vmov	r3, s15
 8001770:	b21b      	sxth	r3, r3
 8001772:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001776:	429a      	cmp	r2, r3
 8001778:	dd10      	ble.n	800179c <IntAdjust+0xa0>
		TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 800177a:	4b99      	ldr	r3, [pc, #612]	; (80019e0 <IntAdjust+0x2e4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <IntAdjust+0x2e8>)
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	edd3 7a06 	vldr	s15, [r3, #24]
 800178a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178e:	ee17 3a90 	vmov	r3, s15
 8001792:	b21b      	sxth	r3, r3
 8001794:	009a      	lsls	r2, r3, #2
 8001796:	4b94      	ldr	r3, [pc, #592]	; (80019e8 <IntAdjust+0x2ec>)
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
 800179a:	e020      	b.n	80017de <IntAdjust+0xe2>

	else if ( valueIA < (int16_t)pValues[cursorLine]->downLimit )
 800179c:	4b90      	ldr	r3, [pc, #576]	; (80019e0 <IntAdjust+0x2e4>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b90      	ldr	r3, [pc, #576]	; (80019e4 <IntAdjust+0x2e8>)
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b0:	ee17 3a90 	vmov	r3, s15
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	da0f      	bge.n	80017de <IntAdjust+0xe2>
		TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 80017be:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <IntAdjust+0x2e4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <IntAdjust+0x2e8>)
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	009a      	lsls	r2, r3, #2
 80017da:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <IntAdjust+0x2ec>)
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24

	sprintf(lcdBufferIA,"%-3d", TIM1->CNT/ROTARY_SPC);
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <IntAdjust+0x2ec>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	089a      	lsrs	r2, r3, #2
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4981      	ldr	r1, [pc, #516]	; (80019f0 <IntAdjust+0x2f4>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f008 f9a4 	bl	8009b38 <siprintf>
	LCD_Puts(14,cursorLine, lcdBufferIA);
 80017f0:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <IntAdjust+0x2e4>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	200e      	movs	r0, #14
 80017fc:	f007 f8f0 	bl	80089e0 <LCD_Puts>

	switch (input)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d003      	beq.n	800180e <IntAdjust+0x112>
 8001806:	2b02      	cmp	r3, #2
 8001808:	f000 8166 	beq.w	8001ad8 <IntAdjust+0x3dc>
 800180c:	e172      	b.n	8001af4 <IntAdjust+0x3f8>
	{
		case KEY_ACCEPT:
			pValues[cursorLine]->ival = TIM1->CNT/ROTARY_SPC;
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <IntAdjust+0x2ec>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	089a      	lsrs	r2, r3, #2
 8001814:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <IntAdjust+0x2e4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <IntAdjust+0x2e8>)
 800181c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001820:	601a      	str	r2, [r3, #0]

			if( StateVar[cursorLine].IndexMenu == Second_Menu_1 ) //if we are in sub menu Alfa:
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <IntAdjust+0x2e4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4a72      	ldr	r2, [pc, #456]	; (80019f4 <IntAdjust+0x2f8>)
 800182a:	460b      	mov	r3, r1
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3311      	adds	r3, #17
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2bc9      	cmp	r3, #201	; 0xc9
 800183a:	d11c      	bne.n	8001876 <IntAdjust+0x17a>
			{
				for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 800183c:	2301      	movs	r3, #1
 800183e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001842:	e013      	b.n	800186c <IntAdjust+0x170>
				{
					EEPROM_Write(i,0, (uint8_t*)&values_Alfa[i], sizeof(ValueStruct));
 8001844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001848:	b298      	uxth	r0, r3
 800184a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4a68      	ldr	r2, [pc, #416]	; (80019f8 <IntAdjust+0x2fc>)
 8001858:	441a      	add	r2, r3
 800185a:	231c      	movs	r3, #28
 800185c:	2100      	movs	r1, #0
 800185e:	f006 ff17 	bl	8008690 <EEPROM_Write>
				for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001866:	3301      	adds	r3, #1
 8001868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800186c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001870:	2b06      	cmp	r3, #6
 8001872:	d9e7      	bls.n	8001844 <IntAdjust+0x148>
 8001874:	e122      	b.n	8001abc <IntAdjust+0x3c0>
				}
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_2)
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <IntAdjust+0x2e4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	4a5d      	ldr	r2, [pc, #372]	; (80019f4 <IntAdjust+0x2f8>)
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3311      	adds	r3, #17
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2bca      	cmp	r3, #202	; 0xca
 800188e:	d128      	bne.n	80018e2 <IntAdjust+0x1e6>
			{
				for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 8001890:	2307      	movs	r3, #7
 8001892:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001896:	e01f      	b.n	80018d8 <IntAdjust+0x1dc>
				{
				    EEPROM_Write(i,0, (uint8_t*)&values_Beta[j], sizeof(ValueStruct));
 8001898:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800189c:	b298      	uxth	r0, r3
 800189e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4a54      	ldr	r2, [pc, #336]	; (80019fc <IntAdjust+0x300>)
 80018ac:	441a      	add	r2, r3
 80018ae:	231c      	movs	r3, #28
 80018b0:	2100      	movs	r1, #0
 80018b2:	f006 feed 	bl	8008690 <EEPROM_Write>
				    j++;
 80018b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ba:	3301      	adds	r3, #1
 80018bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(j==7)
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d102      	bne.n	80018ce <IntAdjust+0x1d2>
						j=1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 80018ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d2:	3301      	adds	r3, #1
 80018d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	d9db      	bls.n	8001898 <IntAdjust+0x19c>
 80018e0:	e0ec      	b.n	8001abc <IntAdjust+0x3c0>
				}
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_3)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <IntAdjust+0x2e4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4a42      	ldr	r2, [pc, #264]	; (80019f4 <IntAdjust+0x2f8>)
 80018ea:	460b      	mov	r3, r1
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3311      	adds	r3, #17
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2bcb      	cmp	r3, #203	; 0xcb
 80018fa:	d128      	bne.n	800194e <IntAdjust+0x252>
			{
				for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 80018fc:	230d      	movs	r3, #13
 80018fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001902:	e01f      	b.n	8001944 <IntAdjust+0x248>
				{
					EEPROM_Write(i,0, (uint8_t*)&values_Teta[j], sizeof(ValueStruct));
 8001904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001908:	b298      	uxth	r0, r3
 800190a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <IntAdjust+0x304>)
 8001918:	441a      	add	r2, r3
 800191a:	231c      	movs	r3, #28
 800191c:	2100      	movs	r1, #0
 800191e:	f006 feb7 	bl	8008690 <EEPROM_Write>
					j++;
 8001922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001926:	3301      	adds	r3, #1
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(j==7)
 800192c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001930:	2b07      	cmp	r3, #7
 8001932:	d102      	bne.n	800193a <IntAdjust+0x23e>
						j=1;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 800193a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001944:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001948:	2b12      	cmp	r3, #18
 800194a:	d9db      	bls.n	8001904 <IntAdjust+0x208>
 800194c:	e0b6      	b.n	8001abc <IntAdjust+0x3c0>
				}
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_4)
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <IntAdjust+0x2e4>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <IntAdjust+0x2f8>)
 8001956:	460b      	mov	r3, r1
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3311      	adds	r3, #17
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2bcc      	cmp	r3, #204	; 0xcc
 8001966:	d128      	bne.n	80019ba <IntAdjust+0x2be>
			{
				for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 8001968:	2313      	movs	r3, #19
 800196a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800196e:	e01f      	b.n	80019b0 <IntAdjust+0x2b4>
				{
					EEPROM_Write(i,0, (uint8_t*)&values_Delta[j], sizeof(ValueStruct));
 8001970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001974:	b298      	uxth	r0, r3
 8001976:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <IntAdjust+0x308>)
 8001984:	441a      	add	r2, r3
 8001986:	231c      	movs	r3, #28
 8001988:	2100      	movs	r1, #0
 800198a:	f006 fe81 	bl	8008690 <EEPROM_Write>
					j++;
 800198e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001992:	3301      	adds	r3, #1
 8001994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(j==7)
 8001998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199c:	2b07      	cmp	r3, #7
 800199e:	d102      	bne.n	80019a6 <IntAdjust+0x2aa>
						j=1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 80019a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019aa:	3301      	adds	r3, #1
 80019ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b4:	2b18      	cmp	r3, #24
 80019b6:	d9db      	bls.n	8001970 <IntAdjust+0x274>
 80019b8:	e080      	b.n	8001abc <IntAdjust+0x3c0>
				}
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_5)
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <IntAdjust+0x2e4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <IntAdjust+0x2f8>)
 80019c2:	460b      	mov	r3, r1
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3311      	adds	r3, #17
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2bcd      	cmp	r3, #205	; 0xcd
 80019d2:	d13e      	bne.n	8001a52 <IntAdjust+0x356>
			{
				for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 80019d4:	2319      	movs	r3, #25
 80019d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019da:	e035      	b.n	8001a48 <IntAdjust+0x34c>
 80019dc:	20000007 	.word	0x20000007
 80019e0:	200008ff 	.word	0x200008ff
 80019e4:	20000914 	.word	0x20000914
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	0800d5b8 	.word	0x0800d5b8
 80019f0:	0800d54c 	.word	0x0800d54c
 80019f4:	2000099c 	.word	0x2000099c
 80019f8:	200002dc 	.word	0x200002dc
 80019fc:	200003a0 	.word	0x200003a0
 8001a00:	20000464 	.word	0x20000464
 8001a04:	20000528 	.word	0x20000528
				{
					EEPROM_Write(i,0, (uint8_t*)&values_Gama[j], sizeof(ValueStruct));
 8001a08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <IntAdjust+0x404>)
 8001a1c:	441a      	add	r2, r3
 8001a1e:	231c      	movs	r3, #28
 8001a20:	2100      	movs	r1, #0
 8001a22:	f006 fe35 	bl	8008690 <EEPROM_Write>
					j++;
 8001a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(j==7)
 8001a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a34:	2b07      	cmp	r3, #7
 8001a36:	d102      	bne.n	8001a3e <IntAdjust+0x342>
						j=1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 8001a3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a42:	3301      	adds	r3, #1
 8001a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a4c:	2b1e      	cmp	r3, #30
 8001a4e:	d9db      	bls.n	8001a08 <IntAdjust+0x30c>
 8001a50:	e034      	b.n	8001abc <IntAdjust+0x3c0>
				}
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_6)
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <IntAdjust+0x408>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4a2b      	ldr	r2, [pc, #172]	; (8001b08 <IntAdjust+0x40c>)
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	3311      	adds	r3, #17
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2bce      	cmp	r3, #206	; 0xce
 8001a6a:	d127      	bne.n	8001abc <IntAdjust+0x3c0>
			{
				for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 8001a6c:	231f      	movs	r3, #31
 8001a6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001a72:	e01f      	b.n	8001ab4 <IntAdjust+0x3b8>
				{
					EEPROM_Write(i,0, (uint8_t*)&values_Custom[j], sizeof(ValueStruct));
 8001a74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <IntAdjust+0x410>)
 8001a88:	441a      	add	r2, r3
 8001a8a:	231c      	movs	r3, #28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f006 fdff 	bl	8008690 <EEPROM_Write>
					j++;
 8001a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a96:	3301      	adds	r3, #1
 8001a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(j==7)
 8001a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d102      	bne.n	8001aaa <IntAdjust+0x3ae>
						j=1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 8001aaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001ab4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ab8:	2b24      	cmp	r3, #36	; 0x24
 8001aba:	d9db      	bls.n	8001a74 <IntAdjust+0x378>
				}
			}
			enterFunction = 1;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <IntAdjust+0x414>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
			LCD_CursorSet(13,cursorLine);
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <IntAdjust+0x408>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	200d      	movs	r0, #13
 8001aca:	f007 f89f 	bl	8008c0c <LCD_CursorSet>
			LCD_Data(0x20);  //  "blank" character
 8001ace:	2020      	movs	r0, #32
 8001ad0:	f007 f83d 	bl	8008b4e <LCD_Data>
			return ST_MAIN_STATE;
 8001ad4:	231e      	movs	r3, #30
 8001ad6:	e00e      	b.n	8001af6 <IntAdjust+0x3fa>
			LCD_CursorSet(13,cursorLine);
			LCD_Data(0x20);  //  "blank" character
			return ST_MAIN_STATE;*/

		case KEY_STANDBY:
			enterFunction = 1;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <IntAdjust+0x414>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
			LCD_CursorSet(13,cursorLine);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <IntAdjust+0x408>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	200d      	movs	r0, #13
 8001ae6:	f007 f891 	bl	8008c0c <LCD_CursorSet>
			LCD_Data(0x20);  //  "blank" character
 8001aea:	2020      	movs	r0, #32
 8001aec:	f007 f82f 	bl	8008b4e <LCD_Data>
			return ST_STANDBY;
 8001af0:	2314      	movs	r3, #20
 8001af2:	e000      	b.n	8001af6 <IntAdjust+0x3fa>
	}
	return ST_INT_ADJUST;
 8001af4:	2332      	movs	r3, #50	; 0x32
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200005ec 	.word	0x200005ec
 8001b04:	200008ff 	.word	0x200008ff
 8001b08:	2000099c 	.word	0x2000099c
 8001b0c:	200006b0 	.word	0x200006b0
 8001b10:	20000007 	.word	0x20000007

08001b14 <StringChange>:
 * \param input			Buttons state after debouncig.
 *
 * \return nextState    next state according to the current state and button input.
 */
char StringChange(char input)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	static char enterFunction = 1;
	static int8_t strNumTemp;
	if ( enterFunction==1 )
 8001b1e:	4bbb      	ldr	r3, [pc, #748]	; (8001e0c <StringChange+0x2f8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10c      	bne.n	8001b40 <StringChange+0x2c>
	{
		strNumTemp = pValues[cursorLine]->strNum;
 8001b26:	4bba      	ldr	r3, [pc, #744]	; (8001e10 <StringChange+0x2fc>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4bb9      	ldr	r3, [pc, #740]	; (8001e14 <StringChange+0x300>)
 8001b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b32:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8001b36:	4bb8      	ldr	r3, [pc, #736]	; (8001e18 <StringChange+0x304>)
 8001b38:	701a      	strb	r2, [r3, #0]
		enterFunction = 0;
 8001b3a:	4bb4      	ldr	r3, [pc, #720]	; (8001e0c <StringChange+0x2f8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
	}

	switch (input)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	2b1f      	cmp	r3, #31
 8001b46:	f200 80f4 	bhi.w	8001d32 <StringChange+0x21e>
 8001b4a:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <StringChange+0x3c>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001bf9 	.word	0x08001bf9
 8001b54:	08001d17 	.word	0x08001d17
 8001b58:	08001d33 	.word	0x08001d33
 8001b5c:	08001d33 	.word	0x08001d33
 8001b60:	08001d33 	.word	0x08001d33
 8001b64:	08001d33 	.word	0x08001d33
 8001b68:	08001d33 	.word	0x08001d33
 8001b6c:	08001d33 	.word	0x08001d33
 8001b70:	08001d33 	.word	0x08001d33
 8001b74:	08001d33 	.word	0x08001d33
 8001b78:	08001d33 	.word	0x08001d33
 8001b7c:	08001d33 	.word	0x08001d33
 8001b80:	08001d33 	.word	0x08001d33
 8001b84:	08001d33 	.word	0x08001d33
 8001b88:	08001d33 	.word	0x08001d33
 8001b8c:	08001bd1 	.word	0x08001bd1
 8001b90:	08001d33 	.word	0x08001d33
 8001b94:	08001d33 	.word	0x08001d33
 8001b98:	08001d33 	.word	0x08001d33
 8001b9c:	08001d33 	.word	0x08001d33
 8001ba0:	08001d33 	.word	0x08001d33
 8001ba4:	08001d33 	.word	0x08001d33
 8001ba8:	08001d33 	.word	0x08001d33
 8001bac:	08001d33 	.word	0x08001d33
 8001bb0:	08001d33 	.word	0x08001d33
 8001bb4:	08001d33 	.word	0x08001d33
 8001bb8:	08001d33 	.word	0x08001d33
 8001bbc:	08001d33 	.word	0x08001d33
 8001bc0:	08001d33 	.word	0x08001d33
 8001bc4:	08001d33 	.word	0x08001d33
 8001bc8:	08001d33 	.word	0x08001d33
 8001bcc:	08001be5 	.word	0x08001be5
	{
		case ROTARY_CW_DIR:		strNumTemp ++;	break;
 8001bd0:	4b91      	ldr	r3, [pc, #580]	; (8001e18 <StringChange+0x304>)
 8001bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <StringChange+0x304>)
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e0a6      	b.n	8001d32 <StringChange+0x21e>

		case ROTARY_CCW_DIR:	strNumTemp --;	break;
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <StringChange+0x304>)
 8001be6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <StringChange+0x304>)
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e09c      	b.n	8001d32 <StringChange+0x21e>

		case KEY_ACCEPT:

			// store the temporary adjusted value to the global variable
			pValues[cursorLine]->strNum = strNumTemp;
 8001bf8:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <StringChange+0x2fc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <StringChange+0x300>)
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	4a84      	ldr	r2, [pc, #528]	; (8001e18 <StringChange+0x304>)
 8001c06:	f992 2000 	ldrsb.w	r2, [r2]
 8001c0a:	741a      	strb	r2, [r3, #16]

			if(StateVar[cursorLine].IndexMenu==Second_Menu_1)
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <StringChange+0x2fc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4a82      	ldr	r2, [pc, #520]	; (8001e1c <StringChange+0x308>)
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3311      	adds	r3, #17
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2bc9      	cmp	r3, #201	; 0xc9
 8001c24:	d106      	bne.n	8001c34 <StringChange+0x120>
			{
				if ( variable == VA_VOLTAGE /*&& pValues[cursorLine]->strNum==VOL_LEVEL_LOW*/ )
				{
					//LED2_SET(1);
				}
				EEPROM_Write(1,0, (uint8_t*)&values_Alfa[1], sizeof(ValueStruct));
 8001c26:	231c      	movs	r3, #28
 8001c28:	4a7d      	ldr	r2, [pc, #500]	; (8001e20 <StringChange+0x30c>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f006 fd2f 	bl	8008690 <EEPROM_Write>
 8001c32:	e062      	b.n	8001cfa <StringChange+0x1e6>
			}

			else if(StateVar[cursorLine].IndexMenu==Second_Menu_2)
 8001c34:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <StringChange+0x2fc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4a78      	ldr	r2, [pc, #480]	; (8001e1c <StringChange+0x308>)
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3311      	adds	r3, #17
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2bca      	cmp	r3, #202	; 0xca
 8001c4c:	d106      	bne.n	8001c5c <StringChange+0x148>
			{
				EEPROM_Write((1+(1*NUMBER_OF_VARIABLES)),0, (uint8_t*)&values_Beta[1], sizeof(ValueStruct));
 8001c4e:	231c      	movs	r3, #28
 8001c50:	4a74      	ldr	r2, [pc, #464]	; (8001e24 <StringChange+0x310>)
 8001c52:	2100      	movs	r1, #0
 8001c54:	2007      	movs	r0, #7
 8001c56:	f006 fd1b 	bl	8008690 <EEPROM_Write>
 8001c5a:	e04e      	b.n	8001cfa <StringChange+0x1e6>
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_3)
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <StringChange+0x2fc>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <StringChange+0x308>)
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3311      	adds	r3, #17
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2bcb      	cmp	r3, #203	; 0xcb
 8001c74:	d106      	bne.n	8001c84 <StringChange+0x170>
			{
                EEPROM_Write((1+(2*NUMBER_OF_VARIABLES)),0, (uint8_t*)&values_Teta[1], sizeof(ValueStruct));
 8001c76:	231c      	movs	r3, #28
 8001c78:	4a6b      	ldr	r2, [pc, #428]	; (8001e28 <StringChange+0x314>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	200d      	movs	r0, #13
 8001c7e:	f006 fd07 	bl	8008690 <EEPROM_Write>
 8001c82:	e03a      	b.n	8001cfa <StringChange+0x1e6>
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_4)
 8001c84:	4b62      	ldr	r3, [pc, #392]	; (8001e10 <StringChange+0x2fc>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4a64      	ldr	r2, [pc, #400]	; (8001e1c <StringChange+0x308>)
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3311      	adds	r3, #17
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2bcc      	cmp	r3, #204	; 0xcc
 8001c9c:	d106      	bne.n	8001cac <StringChange+0x198>
			{
				EEPROM_Write((1+(3*NUMBER_OF_VARIABLES)),0, (uint8_t*)&values_Delta[1], sizeof(ValueStruct));
 8001c9e:	231c      	movs	r3, #28
 8001ca0:	4a62      	ldr	r2, [pc, #392]	; (8001e2c <StringChange+0x318>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2013      	movs	r0, #19
 8001ca6:	f006 fcf3 	bl	8008690 <EEPROM_Write>
 8001caa:	e026      	b.n	8001cfa <StringChange+0x1e6>
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_5)
 8001cac:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <StringChange+0x2fc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <StringChange+0x308>)
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3311      	adds	r3, #17
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2bcd      	cmp	r3, #205	; 0xcd
 8001cc4:	d106      	bne.n	8001cd4 <StringChange+0x1c0>
			{
				EEPROM_Write((1+(4*NUMBER_OF_VARIABLES)),0, (uint8_t*)&values_Gama[1], sizeof(ValueStruct));
 8001cc6:	231c      	movs	r3, #28
 8001cc8:	4a59      	ldr	r2, [pc, #356]	; (8001e30 <StringChange+0x31c>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2019      	movs	r0, #25
 8001cce:	f006 fcdf 	bl	8008690 <EEPROM_Write>
 8001cd2:	e012      	b.n	8001cfa <StringChange+0x1e6>
			}
			else if(StateVar[cursorLine].IndexMenu==Second_Menu_6)
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <StringChange+0x2fc>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <StringChange+0x308>)
 8001cdc:	460b      	mov	r3, r1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3311      	adds	r3, #17
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2bce      	cmp	r3, #206	; 0xce
 8001cec:	d105      	bne.n	8001cfa <StringChange+0x1e6>
			{
				EEPROM_Write((1+(5*NUMBER_OF_VARIABLES)),0, (uint8_t*)&values_Custom[1], sizeof(ValueStruct));
 8001cee:	231c      	movs	r3, #28
 8001cf0:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <StringChange+0x320>)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	201f      	movs	r0, #31
 8001cf6:	f006 fccb 	bl	8008690 <EEPROM_Write>
			}
			enterFunction = 1;
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <StringChange+0x2f8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
			LCD_CursorSet(13,cursorLine);
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <StringChange+0x2fc>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	200d      	movs	r0, #13
 8001d08:	f006 ff80 	bl	8008c0c <LCD_CursorSet>
			LCD_Data(0x20);  //  "blank" character
 8001d0c:	2020      	movs	r0, #32
 8001d0e:	f006 ff1e 	bl	8008b4e <LCD_Data>

			return ST_MAIN_STATE;
 8001d12:	231e      	movs	r3, #30
 8001d14:	e075      	b.n	8001e02 <StringChange+0x2ee>
			LCD_CursorSet(13,cursorLine);
			LCD_Data(0x20);  //  "blank" character
			return ST_MAIN_STATE;*/

		case KEY_STANDBY:
			enterFunction = 1;
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <StringChange+0x2f8>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
			LCD_CursorSet(13,cursorLine);
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <StringChange+0x2fc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	200d      	movs	r0, #13
 8001d24:	f006 ff72 	bl	8008c0c <LCD_CursorSet>
			LCD_Data(0x20);  //  "blank" character
 8001d28:	2020      	movs	r0, #32
 8001d2a:	f006 ff10 	bl	8008b4e <LCD_Data>
			return ST_STANDBY;
 8001d2e:	2314      	movs	r3, #20
 8001d30:	e067      	b.n	8001e02 <StringChange+0x2ee>
	}

	LCD_CreateChar(0,updownCharacter);// "<>" character
 8001d32:	4941      	ldr	r1, [pc, #260]	; (8001e38 <StringChange+0x324>)
 8001d34:	2000      	movs	r0, #0
 8001d36:	f006 fec5 	bl	8008ac4 <LCD_CreateChar>
	LCD_CursorSet(13,cursorLine);
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <StringChange+0x2fc>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	200d      	movs	r0, #13
 8001d42:	f006 ff63 	bl	8008c0c <LCD_CursorSet>
	LCD_Data(0);  //  "<>" character
 8001d46:	2000      	movs	r0, #0
 8001d48:	f006 ff01 	bl	8008b4e <LCD_Data>


	if( strNumTemp > pValues[cursorLine]->upLimit )
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <StringChange+0x304>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <StringChange+0x2fc>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <StringChange+0x300>)
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd10      	ble.n	8001d96 <StringChange+0x282>
	{
		strNumTemp = pValues[cursorLine]->upLimit;
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <StringChange+0x2fc>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <StringChange+0x300>)
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	edc7 7a00 	vstr	s15, [r7]
 8001d8c:	783b      	ldrb	r3, [r7, #0]
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <StringChange+0x304>)
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e023      	b.n	8001dde <StringChange+0x2ca>
	}
	else if ( strNumTemp < pValues[cursorLine]->downLimit )
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <StringChange+0x304>)
 8001d98:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <StringChange+0x2fc>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <StringChange+0x300>)
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d50f      	bpl.n	8001dde <StringChange+0x2ca>
	{
		strNumTemp = pValues[cursorLine]->downLimit;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <StringChange+0x2fc>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <StringChange+0x300>)
 8001dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dca:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd2:	edc7 7a00 	vstr	s15, [r7]
 8001dd6:	783b      	ldrb	r3, [r7, #0]
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <StringChange+0x304>)
 8001ddc:	701a      	strb	r2, [r3, #0]
	}
	LCD_Puts(14,cursorLine,pValues[cursorLine]->pText[strNumTemp]);
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <StringChange+0x2fc>)
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <StringChange+0x2fc>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <StringChange+0x300>)
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <StringChange+0x304>)
 8001df0:	f992 2000 	ldrsb.w	r2, [r2]
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	f006 fdf0 	bl	80089e0 <LCD_Puts>

	return ST_STR_CHANGE;
 8001e00:	2346      	movs	r3, #70	; 0x46
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	200008ff 	.word	0x200008ff
 8001e14:	20000914 	.word	0x20000914
 8001e18:	20000a7b 	.word	0x20000a7b
 8001e1c:	2000099c 	.word	0x2000099c
 8001e20:	200002f8 	.word	0x200002f8
 8001e24:	200003bc 	.word	0x200003bc
 8001e28:	20000480 	.word	0x20000480
 8001e2c:	20000544 	.word	0x20000544
 8001e30:	20000608 	.word	0x20000608
 8001e34:	200006cc 	.word	0x200006cc
 8001e38:	0800d5b8 	.word	0x0800d5b8

08001e3c <FloatAdjust>:
 * \param input			Buttons state after debouncig.
 *
 * \return nextState    next state according to the current state and button input.
 */
char FloatAdjust(char input)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
    #define INTEGER_PART	0
    #define DECIMAL_PART	1
	static uint8_t mode = INTEGER_PART;
	static int FloatTemp[2];
	static char enterFunction = 1;
	uint8_t j=1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char lcdBufferIA[15];
    //int16_t UpLimit_DEC;
	int16_t DownLimit_DEC;

	if ( enterFunction==1 )
 8001e4c:	4b7c      	ldr	r3, [pc, #496]	; (8002040 <FloatAdjust+0x204>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d16d      	bne.n	8001f30 <FloatAdjust+0xf4>
	{
		//FloatTemp[DECIMAL_PART] = modf(pValues[cursorLine]->fval, &FloatTemp[INTEGER_PART]);
		FloatTemp[INTEGER_PART] = (int) pValues[cursorLine]->fval;
 8001e54:	4b7b      	ldr	r3, [pc, #492]	; (8002044 <FloatAdjust+0x208>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <FloatAdjust+0x20c>)
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <FloatAdjust+0x210>)
 8001e6e:	601a      	str	r2, [r3, #0]
		FloatTemp[DECIMAL_PART] = round((pValues[cursorLine]->fval - FloatTemp[INTEGER_PART])*10);
 8001e70:	4b74      	ldr	r3, [pc, #464]	; (8002044 <FloatAdjust+0x208>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <FloatAdjust+0x20c>)
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	4b72      	ldr	r3, [pc, #456]	; (800204c <FloatAdjust+0x210>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	ee17 0a90 	vmov	r0, s15
 8001e9c:	f7fe fb54 	bl	8000548 <__aeabi_f2d>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	ec43 2b10 	vmov	d0, r2, r3
 8001ea8:	f00b fab6 	bl	800d418 <round>
 8001eac:	ec53 2b10 	vmov	r2, r3, d0
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe50 	bl	8000b58 <__aeabi_d2iz>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a64      	ldr	r2, [pc, #400]	; (800204c <FloatAdjust+0x210>)
 8001ebc:	6053      	str	r3, [r2, #4]

		//UpLimit_DEC = round((pValues[cursorLine]->upLimit - (int)pValues[cursorLine]->upLimit)*10);
		DownLimit_DEC = round((pValues[cursorLine]->downLimit - (int)pValues[cursorLine]->downLimit)*10);
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <FloatAdjust+0x208>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b60      	ldr	r3, [pc, #384]	; (8002048 <FloatAdjust+0x20c>)
 8001ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eca:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <FloatAdjust+0x208>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <FloatAdjust+0x20c>)
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef2:	ee17 0a90 	vmov	r0, s15
 8001ef6:	f7fe fb27 	bl	8000548 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	ec43 2b10 	vmov	d0, r2, r3
 8001f02:	f00b fa89 	bl	800d418 <round>
 8001f06:	ec53 2b10 	vmov	r2, r3, d0
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fe23 	bl	8000b58 <__aeabi_d2iz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	84bb      	strh	r3, [r7, #36]	; 0x24

		if (mode == INTEGER_PART)
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <FloatAdjust+0x214>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <FloatAdjust+0xee>
		{
			TIM1->CNT = (int16_t)(FloatTemp[INTEGER_PART])*ROTARY_SPC;
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	; (800204c <FloatAdjust+0x210>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <FloatAdjust+0x218>)
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
		}
		/*else if ( mode == DECIMAL_PART)
		{
			TIM1->CNT = ((int16_t)(FloatTemp[DECIMAL_PART])*10)*ROTARY_SPC;
		}*/
		enterFunction = 0;
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <FloatAdjust+0x204>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
	}

	if (mode == INTEGER_PART)
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <FloatAdjust+0x214>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d164      	bne.n	8002002 <FloatAdjust+0x1c6>
	{
		FloatTemp[INTEGER_PART] = (int16_t)TIM1->CNT/ROTARY_SPC;
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <FloatAdjust+0x218>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da00      	bge.n	8001f44 <FloatAdjust+0x108>
 8001f42:	3303      	adds	r3, #3
 8001f44:	109b      	asrs	r3, r3, #2
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <FloatAdjust+0x210>)
 8001f4c:	601a      	str	r2, [r3, #0]
		if( FloatTemp[INTEGER_PART] > (int16_t)pValues[cursorLine]->upLimit )
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <FloatAdjust+0x210>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <FloatAdjust+0x208>)
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <FloatAdjust+0x20c>)
 8001f5a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001f5e:	edd2 7a06 	vldr	s15, [r2, #24]
 8001f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f66:	ee17 2a90 	vmov	r2, s15
 8001f6a:	b212      	sxth	r2, r2
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	dd10      	ble.n	8001f92 <FloatAdjust+0x156>
			TIM1->CNT = (int16_t)pValues[cursorLine]->upLimit*ROTARY_SPC;
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <FloatAdjust+0x208>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <FloatAdjust+0x20c>)
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <FloatAdjust+0x218>)
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f90:	e020      	b.n	8001fd4 <FloatAdjust+0x198>

		else if ( FloatTemp[INTEGER_PART] < (int16_t)pValues[cursorLine]->downLimit )
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <FloatAdjust+0x210>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <FloatAdjust+0x208>)
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <FloatAdjust+0x20c>)
 8001f9e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001fa2:	edd2 7a05 	vldr	s15, [r2, #20]
 8001fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001faa:	ee17 2a90 	vmov	r2, s15
 8001fae:	b212      	sxth	r2, r2
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	da0f      	bge.n	8001fd4 <FloatAdjust+0x198>
			TIM1->CNT = (int16_t)pValues[cursorLine]->downLimit*ROTARY_SPC;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <FloatAdjust+0x208>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b23      	ldr	r3, [pc, #140]	; (8002048 <FloatAdjust+0x20c>)
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc8:	ee17 3a90 	vmov	r3, s15
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	009a      	lsls	r2, r3, #2
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <FloatAdjust+0x218>)
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

		LCD_CreateChar(0,updownCharacter);// "<>" character
 8001fd4:	4920      	ldr	r1, [pc, #128]	; (8002058 <FloatAdjust+0x21c>)
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f006 fd74 	bl	8008ac4 <LCD_CreateChar>

		LCD_CursorSet(19,cursorLine);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <FloatAdjust+0x208>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2013      	movs	r0, #19
 8001fe4:	f006 fe12 	bl	8008c0c <LCD_CursorSet>
		LCD_Data(0x20);  //  "blank" character
 8001fe8:	2020      	movs	r0, #32
 8001fea:	f006 fdb0 	bl	8008b4e <LCD_Data>

		LCD_CursorSet(13,cursorLine);
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <FloatAdjust+0x208>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	200d      	movs	r0, #13
 8001ff6:	f006 fe09 	bl	8008c0c <LCD_CursorSet>
		LCD_Data(0);  //  "<>" character
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f006 fda7 	bl	8008b4e <LCD_Data>
 8002000:	e04f      	b.n	80020a2 <FloatAdjust+0x266>
	}
	else if (mode == DECIMAL_PART)
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <FloatAdjust+0x214>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d14b      	bne.n	80020a2 <FloatAdjust+0x266>
	{
		FloatTemp[DECIMAL_PART] = (int16_t)TIM1->CNT/ROTARY_SPC;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <FloatAdjust+0x218>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b21b      	sxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	da00      	bge.n	8002016 <FloatAdjust+0x1da>
 8002014:	3303      	adds	r3, #3
 8002016:	109b      	asrs	r3, r3, #2
 8002018:	b21b      	sxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <FloatAdjust+0x210>)
 800201e:	605a      	str	r2, [r3, #4]
		if( FloatTemp[DECIMAL_PART] > 9 )
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <FloatAdjust+0x210>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b09      	cmp	r3, #9
 8002026:	dd03      	ble.n	8002030 <FloatAdjust+0x1f4>
			TIM1->CNT = 9*ROTARY_SPC;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <FloatAdjust+0x218>)
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
 800202e:	e022      	b.n	8002076 <FloatAdjust+0x23a>

		else if ( FloatTemp[DECIMAL_PART] < 0 )
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <FloatAdjust+0x210>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da11      	bge.n	800205c <FloatAdjust+0x220>
			TIM1->CNT = 0*ROTARY_SPC;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <FloatAdjust+0x218>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
 800203e:	e01a      	b.n	8002076 <FloatAdjust+0x23a>
 8002040:	20000009 	.word	0x20000009
 8002044:	200008ff 	.word	0x200008ff
 8002048:	20000914 	.word	0x20000914
 800204c:	20000a7c 	.word	0x20000a7c
 8002050:	20000a84 	.word	0x20000a84
 8002054:	40012c00 	.word	0x40012c00
 8002058:	0800d5b8 	.word	0x0800d5b8

        //The value of the float number should not be below downlimit of the value
		else if ( FloatTemp[DECIMAL_PART] == 0 && FloatTemp[INTEGER_PART]==0 )
 800205c:	4bb6      	ldr	r3, [pc, #728]	; (8002338 <FloatAdjust+0x4fc>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <FloatAdjust+0x23a>
 8002064:	4bb4      	ldr	r3, [pc, #720]	; (8002338 <FloatAdjust+0x4fc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <FloatAdjust+0x23a>
			TIM1->CNT = DownLimit_DEC*ROTARY_SPC;
 800206c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	4bb2      	ldr	r3, [pc, #712]	; (800233c <FloatAdjust+0x500>)
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

		LCD_CreateChar(0,updownCharacter);// "<>" character
 8002076:	49b2      	ldr	r1, [pc, #712]	; (8002340 <FloatAdjust+0x504>)
 8002078:	2000      	movs	r0, #0
 800207a:	f006 fd23 	bl	8008ac4 <LCD_CreateChar>

		LCD_CursorSet(19,cursorLine);
 800207e:	4bb1      	ldr	r3, [pc, #708]	; (8002344 <FloatAdjust+0x508>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	2013      	movs	r0, #19
 8002086:	f006 fdc1 	bl	8008c0c <LCD_CursorSet>
		LCD_Data(0);  //  "<>" character
 800208a:	2000      	movs	r0, #0
 800208c:	f006 fd5f 	bl	8008b4e <LCD_Data>

		LCD_CursorSet(13,cursorLine);
 8002090:	4bac      	ldr	r3, [pc, #688]	; (8002344 <FloatAdjust+0x508>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	200d      	movs	r0, #13
 8002098:	f006 fdb8 	bl	8008c0c <LCD_CursorSet>
		LCD_Data(0x20);  //  "blank" character
 800209c:	2020      	movs	r0, #32
 800209e:	f006 fd56 	bl	8008b4e <LCD_Data>
	}

	// store the temporary adjusted value to the global variable
	pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART]/10.0));
 80020a2:	4ba5      	ldr	r3, [pc, #660]	; (8002338 <FloatAdjust+0x4fc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa3c 	bl	8000524 <__aeabi_i2d>
 80020ac:	4604      	mov	r4, r0
 80020ae:	460d      	mov	r5, r1
 80020b0:	4ba1      	ldr	r3, [pc, #644]	; (8002338 <FloatAdjust+0x4fc>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa35 	bl	8000524 <__aeabi_i2d>
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4ba2      	ldr	r3, [pc, #648]	; (8002348 <FloatAdjust+0x50c>)
 80020c0:	f7fe fbc4 	bl	800084c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f8de 	bl	800028c <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	499b      	ldr	r1, [pc, #620]	; (8002344 <FloatAdjust+0x508>)
 80020d6:	7809      	ldrb	r1, [r1, #0]
 80020d8:	4608      	mov	r0, r1
 80020da:	499c      	ldr	r1, [pc, #624]	; (800234c <FloatAdjust+0x510>)
 80020dc:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f7fe fd80 	bl	8000be8 <__aeabi_d2f>
 80020e8:	4603      	mov	r3, r0
 80020ea:	6023      	str	r3, [r4, #0]
	sprintf(lcdBufferIA,"%-4.1f", pValues[cursorLine]->fval);
 80020ec:	4b95      	ldr	r3, [pc, #596]	; (8002344 <FloatAdjust+0x508>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b96      	ldr	r3, [pc, #600]	; (800234c <FloatAdjust+0x510>)
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	f107 000c 	add.w	r0, r7, #12
 8002108:	4991      	ldr	r1, [pc, #580]	; (8002350 <FloatAdjust+0x514>)
 800210a:	f007 fd15 	bl	8009b38 <siprintf>
	LCD_Puts(14,cursorLine, lcdBufferIA);
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <FloatAdjust+0x508>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	200e      	movs	r0, #14
 800211a:	f006 fc61 	bl	80089e0 <LCD_Puts>

	switch (input)
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	3b01      	subs	r3, #1
 8002122:	2b1f      	cmp	r3, #31
 8002124:	f200 823b 	bhi.w	800259e <FloatAdjust+0x762>
 8002128:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <FloatAdjust+0x2f4>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	080021d9 	.word	0x080021d9
 8002134:	08002583 	.word	0x08002583
 8002138:	0800259f 	.word	0x0800259f
 800213c:	0800259f 	.word	0x0800259f
 8002140:	0800259f 	.word	0x0800259f
 8002144:	0800259f 	.word	0x0800259f
 8002148:	0800259f 	.word	0x0800259f
 800214c:	0800259f 	.word	0x0800259f
 8002150:	0800259f 	.word	0x0800259f
 8002154:	0800259f 	.word	0x0800259f
 8002158:	0800259f 	.word	0x0800259f
 800215c:	0800259f 	.word	0x0800259f
 8002160:	0800259f 	.word	0x0800259f
 8002164:	0800259f 	.word	0x0800259f
 8002168:	0800259f 	.word	0x0800259f
 800216c:	080021b1 	.word	0x080021b1
 8002170:	0800259f 	.word	0x0800259f
 8002174:	0800259f 	.word	0x0800259f
 8002178:	0800259f 	.word	0x0800259f
 800217c:	0800259f 	.word	0x0800259f
 8002180:	0800259f 	.word	0x0800259f
 8002184:	0800259f 	.word	0x0800259f
 8002188:	0800259f 	.word	0x0800259f
 800218c:	0800259f 	.word	0x0800259f
 8002190:	0800259f 	.word	0x0800259f
 8002194:	0800259f 	.word	0x0800259f
 8002198:	0800259f 	.word	0x0800259f
 800219c:	0800259f 	.word	0x0800259f
 80021a0:	0800259f 	.word	0x0800259f
 80021a4:	0800259f 	.word	0x0800259f
 80021a8:	0800259f 	.word	0x0800259f
 80021ac:	080021c5 	.word	0x080021c5
	{
		case ROTARY_CW_DIR:  FloatTemp[mode] ++;   break;
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <FloatAdjust+0x518>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4a60      	ldr	r2, [pc, #384]	; (8002338 <FloatAdjust+0x4fc>)
 80021b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ba:	3201      	adds	r2, #1
 80021bc:	495e      	ldr	r1, [pc, #376]	; (8002338 <FloatAdjust+0x4fc>)
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021c2:	e1ec      	b.n	800259e <FloatAdjust+0x762>

		case ROTARY_CCW_DIR:  FloatTemp[mode] --;	break;
 80021c4:	4b63      	ldr	r3, [pc, #396]	; (8002354 <FloatAdjust+0x518>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4a5b      	ldr	r2, [pc, #364]	; (8002338 <FloatAdjust+0x4fc>)
 80021ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ce:	3a01      	subs	r2, #1
 80021d0:	4959      	ldr	r1, [pc, #356]	; (8002338 <FloatAdjust+0x4fc>)
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021d6:	e1e2      	b.n	800259e <FloatAdjust+0x762>

		case KEY_ACCEPT:

			pValues[cursorLine]->fval = (FloatTemp[INTEGER_PART] + (FloatTemp[DECIMAL_PART]/10.0));
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <FloatAdjust+0x4fc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9a1 	bl	8000524 <__aeabi_i2d>
 80021e2:	4604      	mov	r4, r0
 80021e4:	460d      	mov	r5, r1
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <FloatAdjust+0x4fc>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f99a 	bl	8000524 <__aeabi_i2d>
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b54      	ldr	r3, [pc, #336]	; (8002348 <FloatAdjust+0x50c>)
 80021f6:	f7fe fb29 	bl	800084c <__aeabi_ddiv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe f843 	bl	800028c <__adddf3>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	494e      	ldr	r1, [pc, #312]	; (8002344 <FloatAdjust+0x508>)
 800220c:	7809      	ldrb	r1, [r1, #0]
 800220e:	4608      	mov	r0, r1
 8002210:	494e      	ldr	r1, [pc, #312]	; (800234c <FloatAdjust+0x510>)
 8002212:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fce5 	bl	8000be8 <__aeabi_d2f>
 800221e:	4603      	mov	r3, r0
 8002220:	6023      	str	r3, [r4, #0]
			if (mode == INTEGER_PART)
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <FloatAdjust+0x518>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <FloatAdjust+0x408>
			{
				mode++;
 800222a:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <FloatAdjust+0x518>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b48      	ldr	r3, [pc, #288]	; (8002354 <FloatAdjust+0x518>)
 8002234:	701a      	strb	r2, [r3, #0]
				TIM1->CNT = (int16_t)(FloatTemp[DECIMAL_PART])*ROTARY_SPC;
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <FloatAdjust+0x4fc>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b21b      	sxth	r3, r3
 800223c:	009a      	lsls	r2, r3, #2
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <FloatAdjust+0x500>)
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8002242:	e1ac      	b.n	800259e <FloatAdjust+0x762>
			}
			else if (mode == DECIMAL_PART)
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <FloatAdjust+0x518>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 819a 	bne.w	8002582 <FloatAdjust+0x746>
			{
				if ( variable == VA_FREQUENCY )
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <FloatAdjust+0x51c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d109      	bne.n	800226a <FloatAdjust+0x42e>
				{
					Frequency = (pValues[cursorLine]->fval)/1.000;
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <FloatAdjust+0x508>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <FloatAdjust+0x510>)
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3d      	ldr	r2, [pc, #244]	; (800235c <FloatAdjust+0x520>)
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e020      	b.n	80022ac <FloatAdjust+0x470>
				}
				else if ( variable == VA_TIME )
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <FloatAdjust+0x51c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b0a      	cmp	r3, #10
 8002270:	d109      	bne.n	8002286 <FloatAdjust+0x44a>
				{
					Time_ON = (pValues[cursorLine]->fval/1.000);
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <FloatAdjust+0x508>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <FloatAdjust+0x510>)
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a37      	ldr	r2, [pc, #220]	; (8002360 <FloatAdjust+0x524>)
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e012      	b.n	80022ac <FloatAdjust+0x470>
				}
				else if ( variable == VA_RAMP /*&& pValues[cursorLine]->ival==3*/ )
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <FloatAdjust+0x51c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b0b      	cmp	r3, #11
 800228c:	d10e      	bne.n	80022ac <FloatAdjust+0x470>
				{
					StepRamp = (pValues[cursorLine]->fval * 1000)/1.000;
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <FloatAdjust+0x508>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <FloatAdjust+0x510>)
 8002296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002364 <FloatAdjust+0x528>
 80022a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <FloatAdjust+0x52c>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
				}

				if ( enterFunction == 0 && variable != VA_RAMP) // change variables in the RUN time
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <FloatAdjust+0x530>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <FloatAdjust+0x486>
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <FloatAdjust+0x51c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b0b      	cmp	r3, #11
 80022ba:	d002      	beq.n	80022c2 <FloatAdjust+0x486>
					flagUpdatePWM = true;
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <FloatAdjust+0x534>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]

				if(StateVar[cursorLine].IndexMenu==Second_Menu_1)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <FloatAdjust+0x508>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <FloatAdjust+0x538>)
 80022ca:	460b      	mov	r3, r1
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3311      	adds	r3, #17
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2bc9      	cmp	r3, #201	; 0xc9
 80022da:	d11c      	bne.n	8002316 <FloatAdjust+0x4da>
				{
					for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022e2:	e013      	b.n	800230c <FloatAdjust+0x4d0>
					{
						EEPROM_Write(i,0, (uint8_t*)&values_Alfa[i], sizeof(ValueStruct));
 80022e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e8:	b298      	uxth	r0, r3
 80022ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <FloatAdjust+0x53c>)
 80022f8:	441a      	add	r2, r3
 80022fa:	231c      	movs	r3, #28
 80022fc:	2100      	movs	r1, #0
 80022fe:	f006 f9c7 	bl	8008690 <EEPROM_Write>
					for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 8002302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002306:	3301      	adds	r3, #1
 8002308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800230c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002310:	2b06      	cmp	r3, #6
 8002312:	d9e7      	bls.n	80022e4 <FloatAdjust+0x4a8>
 8002314:	e124      	b.n	8002560 <FloatAdjust+0x724>
					}
				}
				else if(StateVar[cursorLine].IndexMenu==Second_Menu_2)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <FloatAdjust+0x508>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <FloatAdjust+0x538>)
 800231e:	460b      	mov	r3, r1
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3311      	adds	r3, #17
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2bca      	cmp	r3, #202	; 0xca
 800232e:	d14a      	bne.n	80023c6 <FloatAdjust+0x58a>
				{
					for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 8002330:	2307      	movs	r3, #7
 8002332:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002336:	e041      	b.n	80023bc <FloatAdjust+0x580>
 8002338:	20000a7c 	.word	0x20000a7c
 800233c:	40012c00 	.word	0x40012c00
 8002340:	0800d5b8 	.word	0x0800d5b8
 8002344:	200008ff 	.word	0x200008ff
 8002348:	40240000 	.word	0x40240000
 800234c:	20000914 	.word	0x20000914
 8002350:	0800d544 	.word	0x0800d544
 8002354:	20000a84 	.word	0x20000a84
 8002358:	200008fd 	.word	0x200008fd
 800235c:	20000958 	.word	0x20000958
 8002360:	20000954 	.word	0x20000954
 8002364:	447a0000 	.word	0x447a0000
 8002368:	2000094c 	.word	0x2000094c
 800236c:	20000009 	.word	0x20000009
 8002370:	2000093c 	.word	0x2000093c
 8002374:	2000099c 	.word	0x2000099c
 8002378:	200002dc 	.word	0x200002dc
					{
					    EEPROM_Write(i,0, (uint8_t*)&values_Beta[j], sizeof(ValueStruct));
 800237c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002380:	b298      	uxth	r0, r3
 8002382:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4a86      	ldr	r2, [pc, #536]	; (80025a8 <FloatAdjust+0x76c>)
 8002390:	441a      	add	r2, r3
 8002392:	231c      	movs	r3, #28
 8002394:	2100      	movs	r1, #0
 8002396:	f006 f97b 	bl	8008690 <EEPROM_Write>
					    j++;
 800239a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(j==7)
 80023a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	d102      	bne.n	80023b2 <FloatAdjust+0x576>
							j=1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 80023b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023b6:	3301      	adds	r3, #1
 80023b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d9db      	bls.n	800237c <FloatAdjust+0x540>
 80023c4:	e0cc      	b.n	8002560 <FloatAdjust+0x724>
					}
				}
				else if(StateVar[cursorLine].IndexMenu==Second_Menu_3)
 80023c6:	4b79      	ldr	r3, [pc, #484]	; (80025ac <FloatAdjust+0x770>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <FloatAdjust+0x774>)
 80023ce:	460b      	mov	r3, r1
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3311      	adds	r3, #17
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2bcb      	cmp	r3, #203	; 0xcb
 80023de:	d128      	bne.n	8002432 <FloatAdjust+0x5f6>
				{
					for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 80023e0:	230d      	movs	r3, #13
 80023e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80023e6:	e01f      	b.n	8002428 <FloatAdjust+0x5ec>
					{
						EEPROM_Write(i,0, (uint8_t*)&values_Teta[j], sizeof(ValueStruct));
 80023e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80023ec:	b298      	uxth	r0, r3
 80023ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <FloatAdjust+0x778>)
 80023fc:	441a      	add	r2, r3
 80023fe:	231c      	movs	r3, #28
 8002400:	2100      	movs	r1, #0
 8002402:	f006 f945 	bl	8008690 <EEPROM_Write>
						j++;
 8002406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800240a:	3301      	adds	r3, #1
 800240c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(j==7)
 8002410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002414:	2b07      	cmp	r3, #7
 8002416:	d102      	bne.n	800241e <FloatAdjust+0x5e2>
							j=1;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 800241e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002422:	3301      	adds	r3, #1
 8002424:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002428:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800242c:	2b12      	cmp	r3, #18
 800242e:	d9db      	bls.n	80023e8 <FloatAdjust+0x5ac>
 8002430:	e096      	b.n	8002560 <FloatAdjust+0x724>
					}
				}
				else if(StateVar[cursorLine].IndexMenu==Second_Menu_4)
 8002432:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <FloatAdjust+0x770>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <FloatAdjust+0x774>)
 800243a:	460b      	mov	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3311      	adds	r3, #17
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2bcc      	cmp	r3, #204	; 0xcc
 800244a:	d128      	bne.n	800249e <FloatAdjust+0x662>
				{
					for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 800244c:	2313      	movs	r3, #19
 800244e:	f887 3020 	strb.w	r3, [r7, #32]
 8002452:	e01f      	b.n	8002494 <FloatAdjust+0x658>
					{
						EEPROM_Write(i,0, (uint8_t*)&values_Delta[j], sizeof(ValueStruct));
 8002454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002458:	b298      	uxth	r0, r3
 800245a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <FloatAdjust+0x77c>)
 8002468:	441a      	add	r2, r3
 800246a:	231c      	movs	r3, #28
 800246c:	2100      	movs	r1, #0
 800246e:	f006 f90f 	bl	8008690 <EEPROM_Write>
						j++;
 8002472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002476:	3301      	adds	r3, #1
 8002478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(j==7)
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b07      	cmp	r3, #7
 8002482:	d102      	bne.n	800248a <FloatAdjust+0x64e>
							j=1;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 800248a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800248e:	3301      	adds	r3, #1
 8002490:	f887 3020 	strb.w	r3, [r7, #32]
 8002494:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002498:	2b18      	cmp	r3, #24
 800249a:	d9db      	bls.n	8002454 <FloatAdjust+0x618>
 800249c:	e060      	b.n	8002560 <FloatAdjust+0x724>
					}
				}
				else if(StateVar[cursorLine].IndexMenu==Second_Menu_5)
 800249e:	4b43      	ldr	r3, [pc, #268]	; (80025ac <FloatAdjust+0x770>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <FloatAdjust+0x774>)
 80024a6:	460b      	mov	r3, r1
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3311      	adds	r3, #17
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2bcd      	cmp	r3, #205	; 0xcd
 80024b6:	d123      	bne.n	8002500 <FloatAdjust+0x6c4>
				{
					for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 80024b8:	2319      	movs	r3, #25
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e01c      	b.n	80024f8 <FloatAdjust+0x6bc>
					{
						EEPROM_Write(i,0, (uint8_t*)&values_Gama[j], sizeof(ValueStruct));
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	b298      	uxth	r0, r3
 80024c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <FloatAdjust+0x780>)
 80024d0:	441a      	add	r2, r3
 80024d2:	231c      	movs	r3, #28
 80024d4:	2100      	movs	r1, #0
 80024d6:	f006 f8db 	bl	8008690 <EEPROM_Write>
						j++;
 80024da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024de:	3301      	adds	r3, #1
 80024e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(j==7)
 80024e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	d102      	bne.n	80024f2 <FloatAdjust+0x6b6>
							j=1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	3301      	adds	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	7ffb      	ldrb	r3, [r7, #31]
 80024fa:	2b1e      	cmp	r3, #30
 80024fc:	d9df      	bls.n	80024be <FloatAdjust+0x682>
 80024fe:	e02f      	b.n	8002560 <FloatAdjust+0x724>
					}
				}
				else if(StateVar[cursorLine].IndexMenu==Second_Menu_6)
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <FloatAdjust+0x770>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <FloatAdjust+0x774>)
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3311      	adds	r3, #17
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2bce      	cmp	r3, #206	; 0xce
 8002518:	d122      	bne.n	8002560 <FloatAdjust+0x724>
				{
					for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 800251a:	231f      	movs	r3, #31
 800251c:	77bb      	strb	r3, [r7, #30]
 800251e:	e01c      	b.n	800255a <FloatAdjust+0x71e>
					{
						EEPROM_Write(i,0, (uint8_t*)&values_Custom[j], sizeof(ValueStruct));
 8002520:	7fbb      	ldrb	r3, [r7, #30]
 8002522:	b298      	uxth	r0, r3
 8002524:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <FloatAdjust+0x784>)
 8002532:	441a      	add	r2, r3
 8002534:	231c      	movs	r3, #28
 8002536:	2100      	movs	r1, #0
 8002538:	f006 f8aa 	bl	8008690 <EEPROM_Write>
						j++;
 800253c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002540:	3301      	adds	r3, #1
 8002542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(j==7)
 8002546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254a:	2b07      	cmp	r3, #7
 800254c:	d102      	bne.n	8002554 <FloatAdjust+0x718>
							j=1;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 8002554:	7fbb      	ldrb	r3, [r7, #30]
 8002556:	3301      	adds	r3, #1
 8002558:	77bb      	strb	r3, [r7, #30]
 800255a:	7fbb      	ldrb	r3, [r7, #30]
 800255c:	2b24      	cmp	r3, #36	; 0x24
 800255e:	d9df      	bls.n	8002520 <FloatAdjust+0x6e4>
					}
				}

				mode = INTEGER_PART;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <FloatAdjust+0x788>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
				enterFunction = 1;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <FloatAdjust+0x78c>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
				LCD_CursorSet(19,cursorLine);
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <FloatAdjust+0x770>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	2013      	movs	r0, #19
 8002574:	f006 fb4a 	bl	8008c0c <LCD_CursorSet>
				LCD_Data(0x20);  //  "blank" character
 8002578:	2020      	movs	r0, #32
 800257a:	f006 fae8 	bl	8008b4e <LCD_Data>
				return ST_MAIN_STATE;
 800257e:	231e      	movs	r3, #30
 8002580:	e00e      	b.n	80025a0 <FloatAdjust+0x764>
				LCD_Data(0x20);  //  "blank" character
				return ST_MAIN_STATE;
			}*/

		case KEY_STANDBY:
			enterFunction = 1;
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <FloatAdjust+0x78c>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
			LCD_CursorSet(13,cursorLine);
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <FloatAdjust+0x770>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	200d      	movs	r0, #13
 8002590:	f006 fb3c 	bl	8008c0c <LCD_CursorSet>
			LCD_Data(0x20);  //  "blank" character
 8002594:	2020      	movs	r0, #32
 8002596:	f006 fada 	bl	8008b4e <LCD_Data>
			return ST_STANDBY;
 800259a:	2314      	movs	r3, #20
 800259c:	e000      	b.n	80025a0 <FloatAdjust+0x764>
	}

	return ST_FLT_ADJUST;
 800259e:	233c      	movs	r3, #60	; 0x3c
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3728      	adds	r7, #40	; 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}
 80025a8:	200003a0 	.word	0x200003a0
 80025ac:	200008ff 	.word	0x200008ff
 80025b0:	2000099c 	.word	0x2000099c
 80025b4:	20000464 	.word	0x20000464
 80025b8:	20000528 	.word	0x20000528
 80025bc:	200005ec 	.word	0x200005ec
 80025c0:	200006b0 	.word	0x200006b0
 80025c4:	20000a84 	.word	0x20000a84
 80025c8:	20000009 	.word	0x20000009

080025cc <ValuInit_Read_EE>:
	}
}

//Read initial values from external eeprom.
void ValuInit_Read_EE(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
	uint8_t j=1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 80025d6:	2301      	movs	r3, #1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	e00f      	b.n	80025fc <ValuInit_Read_EE+0x30>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Alfa[i], sizeof(ValueStruct));
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b298      	uxth	r0, r3
 80025e0:	79ba      	ldrb	r2, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <ValuInit_Read_EE+0x1fc>)
 80025ec:	441a      	add	r2, r3
 80025ee:	231c      	movs	r3, #28
 80025f0:	2100      	movs	r1, #0
 80025f2:	f006 f8b3 	bl	800875c <EEPROM_Read>
	for(uint8_t i=1; i<=NUMBER_OF_VARIABLES; i++)
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	3301      	adds	r3, #1
 80025fa:	71bb      	strb	r3, [r7, #6]
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d9ec      	bls.n	80025dc <ValuInit_Read_EE+0x10>
	}
	for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 8002602:	2307      	movs	r3, #7
 8002604:	717b      	strb	r3, [r7, #5]
 8002606:	e017      	b.n	8002638 <ValuInit_Read_EE+0x6c>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Beta[j], sizeof(ValueStruct));
 8002608:	797b      	ldrb	r3, [r7, #5]
 800260a:	b298      	uxth	r0, r3
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4a6d      	ldr	r2, [pc, #436]	; (80027cc <ValuInit_Read_EE+0x200>)
 8002618:	441a      	add	r2, r3
 800261a:	231c      	movs	r3, #28
 800261c:	2100      	movs	r1, #0
 800261e:	f006 f89d 	bl	800875c <EEPROM_Read>
		j++;
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	3301      	adds	r3, #1
 8002626:	71fb      	strb	r3, [r7, #7]
		if(j==7)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d101      	bne.n	8002632 <ValuInit_Read_EE+0x66>
			j=1;
 800262e:	2301      	movs	r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=(1+(1*NUMBER_OF_VARIABLES)); i<=(2*NUMBER_OF_VARIABLES); i++)
 8002632:	797b      	ldrb	r3, [r7, #5]
 8002634:	3301      	adds	r3, #1
 8002636:	717b      	strb	r3, [r7, #5]
 8002638:	797b      	ldrb	r3, [r7, #5]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d9e4      	bls.n	8002608 <ValuInit_Read_EE+0x3c>
	}
	for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 800263e:	230d      	movs	r3, #13
 8002640:	713b      	strb	r3, [r7, #4]
 8002642:	e017      	b.n	8002674 <ValuInit_Read_EE+0xa8>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Teta[j], sizeof(ValueStruct));
 8002644:	793b      	ldrb	r3, [r7, #4]
 8002646:	b298      	uxth	r0, r3
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <ValuInit_Read_EE+0x204>)
 8002654:	441a      	add	r2, r3
 8002656:	231c      	movs	r3, #28
 8002658:	2100      	movs	r1, #0
 800265a:	f006 f87f 	bl	800875c <EEPROM_Read>
		j++;
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	3301      	adds	r3, #1
 8002662:	71fb      	strb	r3, [r7, #7]
		if(j==7)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b07      	cmp	r3, #7
 8002668:	d101      	bne.n	800266e <ValuInit_Read_EE+0xa2>
			j=1;
 800266a:	2301      	movs	r3, #1
 800266c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=(1+(2*NUMBER_OF_VARIABLES)); i<=(3*NUMBER_OF_VARIABLES); i++)
 800266e:	793b      	ldrb	r3, [r7, #4]
 8002670:	3301      	adds	r3, #1
 8002672:	713b      	strb	r3, [r7, #4]
 8002674:	793b      	ldrb	r3, [r7, #4]
 8002676:	2b12      	cmp	r3, #18
 8002678:	d9e4      	bls.n	8002644 <ValuInit_Read_EE+0x78>
	}
	for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 800267a:	2313      	movs	r3, #19
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	e017      	b.n	80026b0 <ValuInit_Read_EE+0xe4>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Delta[j], sizeof(ValueStruct));
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	b298      	uxth	r0, r3
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <ValuInit_Read_EE+0x208>)
 8002690:	441a      	add	r2, r3
 8002692:	231c      	movs	r3, #28
 8002694:	2100      	movs	r1, #0
 8002696:	f006 f861 	bl	800875c <EEPROM_Read>
		j++;
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	3301      	adds	r3, #1
 800269e:	71fb      	strb	r3, [r7, #7]
		if(j==7)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d101      	bne.n	80026aa <ValuInit_Read_EE+0xde>
			j=1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=(1+(3*NUMBER_OF_VARIABLES)); i<=(4*NUMBER_OF_VARIABLES); i++)
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	3301      	adds	r3, #1
 80026ae:	70fb      	strb	r3, [r7, #3]
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b18      	cmp	r3, #24
 80026b4:	d9e4      	bls.n	8002680 <ValuInit_Read_EE+0xb4>
	}
	for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 80026b6:	2319      	movs	r3, #25
 80026b8:	70bb      	strb	r3, [r7, #2]
 80026ba:	e017      	b.n	80026ec <ValuInit_Read_EE+0x120>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Gama[j], sizeof(ValueStruct));
 80026bc:	78bb      	ldrb	r3, [r7, #2]
 80026be:	b298      	uxth	r0, r3
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4a43      	ldr	r2, [pc, #268]	; (80027d8 <ValuInit_Read_EE+0x20c>)
 80026cc:	441a      	add	r2, r3
 80026ce:	231c      	movs	r3, #28
 80026d0:	2100      	movs	r1, #0
 80026d2:	f006 f843 	bl	800875c <EEPROM_Read>
		j++;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	3301      	adds	r3, #1
 80026da:	71fb      	strb	r3, [r7, #7]
		if(j==7)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2b07      	cmp	r3, #7
 80026e0:	d101      	bne.n	80026e6 <ValuInit_Read_EE+0x11a>
			j=1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=(1+(4*NUMBER_OF_VARIABLES)); i<=(5*NUMBER_OF_VARIABLES); i++)
 80026e6:	78bb      	ldrb	r3, [r7, #2]
 80026e8:	3301      	adds	r3, #1
 80026ea:	70bb      	strb	r3, [r7, #2]
 80026ec:	78bb      	ldrb	r3, [r7, #2]
 80026ee:	2b1e      	cmp	r3, #30
 80026f0:	d9e4      	bls.n	80026bc <ValuInit_Read_EE+0xf0>
	}
	for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 80026f2:	231f      	movs	r3, #31
 80026f4:	707b      	strb	r3, [r7, #1]
 80026f6:	e017      	b.n	8002728 <ValuInit_Read_EE+0x15c>
	{
		EEPROM_Read(i,0, (uint8_t*)&values_Custom[j], sizeof(ValueStruct));
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	b298      	uxth	r0, r3
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4a35      	ldr	r2, [pc, #212]	; (80027dc <ValuInit_Read_EE+0x210>)
 8002708:	441a      	add	r2, r3
 800270a:	231c      	movs	r3, #28
 800270c:	2100      	movs	r1, #0
 800270e:	f006 f825 	bl	800875c <EEPROM_Read>
		j++;
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	3301      	adds	r3, #1
 8002716:	71fb      	strb	r3, [r7, #7]
		if(j==7)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b07      	cmp	r3, #7
 800271c:	d101      	bne.n	8002722 <ValuInit_Read_EE+0x156>
			j=1;
 800271e:	2301      	movs	r3, #1
 8002720:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=(1+(5*NUMBER_OF_VARIABLES)); i<=(6*NUMBER_OF_VARIABLES); i++)
 8002722:	787b      	ldrb	r3, [r7, #1]
 8002724:	3301      	adds	r3, #1
 8002726:	707b      	strb	r3, [r7, #1]
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b24      	cmp	r3, #36	; 0x24
 800272c:	d9e4      	bls.n	80026f8 <ValuInit_Read_EE+0x12c>
	}

	values_Alfa[1].pText[VOL_LEVEL_NONE] = NON;
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <ValuInit_Read_EE+0x1fc>)
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <ValuInit_Read_EE+0x214>)
 8002732:	61da      	str	r2, [r3, #28]
	values_Alfa[1].pText[VOL_LEVEL_LOW] = LOW;
 8002734:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <ValuInit_Read_EE+0x1fc>)
 8002736:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <ValuInit_Read_EE+0x218>)
 8002738:	621a      	str	r2, [r3, #32]
	values_Alfa[1].pText[VOL_LEVEL_MED] = MED;
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <ValuInit_Read_EE+0x1fc>)
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
	values_Alfa[1].pText[VOL_LEVEL_HIGH] = HIGH;
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <ValuInit_Read_EE+0x1fc>)
 8002742:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <ValuInit_Read_EE+0x220>)
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

	values_Beta[1].pText[VOL_LEVEL_NONE] = NON;
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <ValuInit_Read_EE+0x200>)
 8002748:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <ValuInit_Read_EE+0x214>)
 800274a:	61da      	str	r2, [r3, #28]
	values_Beta[1].pText[VOL_LEVEL_LOW] = LOW;
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <ValuInit_Read_EE+0x200>)
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <ValuInit_Read_EE+0x218>)
 8002750:	621a      	str	r2, [r3, #32]
	values_Beta[1].pText[VOL_LEVEL_MED] = MED;
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <ValuInit_Read_EE+0x200>)
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
	values_Beta[1].pText[VOL_LEVEL_HIGH] = HIGH;
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <ValuInit_Read_EE+0x200>)
 800275a:	4a24      	ldr	r2, [pc, #144]	; (80027ec <ValuInit_Read_EE+0x220>)
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

	values_Teta[1].pText[VOL_LEVEL_NONE] = NON;
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <ValuInit_Read_EE+0x204>)
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <ValuInit_Read_EE+0x214>)
 8002762:	61da      	str	r2, [r3, #28]
	values_Teta[1].pText[VOL_LEVEL_LOW] = LOW;
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <ValuInit_Read_EE+0x204>)
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <ValuInit_Read_EE+0x218>)
 8002768:	621a      	str	r2, [r3, #32]
	values_Teta[1].pText[VOL_LEVEL_MED] = MED;
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <ValuInit_Read_EE+0x204>)
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
	values_Teta[1].pText[VOL_LEVEL_HIGH] = HIGH;
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <ValuInit_Read_EE+0x204>)
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <ValuInit_Read_EE+0x220>)
 8002774:	629a      	str	r2, [r3, #40]	; 0x28

	values_Delta[1].pText[VOL_LEVEL_NONE] = NON;
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <ValuInit_Read_EE+0x208>)
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <ValuInit_Read_EE+0x214>)
 800277a:	61da      	str	r2, [r3, #28]
	values_Delta[1].pText[VOL_LEVEL_LOW] = LOW;
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <ValuInit_Read_EE+0x208>)
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <ValuInit_Read_EE+0x218>)
 8002780:	621a      	str	r2, [r3, #32]
	values_Delta[1].pText[VOL_LEVEL_MED] = MED;
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <ValuInit_Read_EE+0x208>)
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 8002786:	625a      	str	r2, [r3, #36]	; 0x24
	values_Delta[1].pText[VOL_LEVEL_HIGH] = HIGH;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <ValuInit_Read_EE+0x208>)
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <ValuInit_Read_EE+0x220>)
 800278c:	629a      	str	r2, [r3, #40]	; 0x28

	values_Gama[1].pText[VOL_LEVEL_NONE] = NON;
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <ValuInit_Read_EE+0x20c>)
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <ValuInit_Read_EE+0x214>)
 8002792:	61da      	str	r2, [r3, #28]
	values_Gama[1].pText[VOL_LEVEL_LOW] = LOW;
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <ValuInit_Read_EE+0x20c>)
 8002796:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <ValuInit_Read_EE+0x218>)
 8002798:	621a      	str	r2, [r3, #32]
	values_Gama[1].pText[VOL_LEVEL_MED] = MED;
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <ValuInit_Read_EE+0x20c>)
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
	values_Gama[1].pText[VOL_LEVEL_HIGH] = HIGH;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <ValuInit_Read_EE+0x20c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <ValuInit_Read_EE+0x220>)
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28

	values_Custom[1].pText[VOL_LEVEL_NONE] = NON;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <ValuInit_Read_EE+0x210>)
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <ValuInit_Read_EE+0x214>)
 80027aa:	61da      	str	r2, [r3, #28]
	values_Custom[1].pText[VOL_LEVEL_LOW] = LOW;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <ValuInit_Read_EE+0x210>)
 80027ae:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <ValuInit_Read_EE+0x218>)
 80027b0:	621a      	str	r2, [r3, #32]
	values_Custom[1].pText[VOL_LEVEL_MED] = MED;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <ValuInit_Read_EE+0x210>)
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <ValuInit_Read_EE+0x21c>)
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
	values_Custom[1].pText[VOL_LEVEL_HIGH] = HIGH;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <ValuInit_Read_EE+0x210>)
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <ValuInit_Read_EE+0x220>)
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200002dc 	.word	0x200002dc
 80027cc:	200003a0 	.word	0x200003a0
 80027d0:	20000464 	.word	0x20000464
 80027d4:	20000528 	.word	0x20000528
 80027d8:	200005ec 	.word	0x200005ec
 80027dc:	200006b0 	.word	0x200006b0
 80027e0:	0800db64 	.word	0x0800db64
 80027e4:	0800db6c 	.word	0x0800db6c
 80027e8:	0800db74 	.word	0x0800db74
 80027ec:	0800db7c 	.word	0x0800db7c

080027f0 <Set_Frequency>:

void Set_Frequency(float frequency)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	ed87 0a01 	vstr	s0, [r7, #4]
	 * Frequency_PWM = It is the input of function that user want to set
	 * Frequency_CLK = 72 MHz
	 * APRx = Auto-reload register
	 * PSCx = The value of prescaler */
	volatile static uint32_t PWM_APR;  //start PWM-Frequency with 100Hz
	PWM_APR = (PWM_CLK/frequency) - 1 ;
 80027fa:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002830 <Set_Frequency+0x40>
 80027fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800280a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800280e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002812:	ee17 2a90 	vmov	r2, s15
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <Set_Frequency+0x44>)
 8002818:	601a      	str	r2, [r3, #0]
	TIM3->ARR = PWM_APR;
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <Set_Frequency+0x48>)
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <Set_Frequency+0x44>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	461c4000 	.word	0x461c4000
 8002834:	20000a88 	.word	0x20000a88
 8002838:	40000400 	.word	0x40000400

0800283c <Set_DutyCycle>:

void Set_DutyCycle(float Ton)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	ed87 0a01 	vstr	s0, [r7, #4]
	/* DutyCycle = CCRx/APRx = Ton/(Ton + Toff)
	 * CCRx = The value for compare */
	float dutycycle = (Ton/1000.000) * (Frequency/1.000);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fd fe7e 	bl	8000548 <__aeabi_f2d>
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <Set_DutyCycle+0x100>)
 8002852:	f7fd fffb 	bl	800084c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4614      	mov	r4, r2
 800285c:	461d      	mov	r5, r3
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <Set_DutyCycle+0x104>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe70 	bl	8000548 <__aeabi_f2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4620      	mov	r0, r4
 800286e:	4629      	mov	r1, r5
 8002870:	f7fd fec2 	bl	80005f8 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f9b4 	bl	8000be8 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	60bb      	str	r3, [r7, #8]

	assert(((dutycycle*100) >= 0.0F) && ((dutycycle*100) <= 100.0F));
 8002884:	edd7 7a02 	vldr	s15, [r7, #8]
 8002888:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002944 <Set_DutyCycle+0x108>
 800288c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	bfac      	ite	ge
 800289a:	2301      	movge	r3, #1
 800289c:	2300      	movlt	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f083 0301 	eor.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d114      	bne.n	80028d4 <Set_DutyCycle+0x98>
 80028aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ae:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002944 <Set_DutyCycle+0x108>
 80028b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002944 <Set_DutyCycle+0x108>
 80028ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <Set_DutyCycle+0xa6>
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <Set_DutyCycle+0x10c>)
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <Set_DutyCycle+0x110>)
 80028d8:	f240 41af 	movw	r1, #1199	; 0x4af
 80028dc:	481c      	ldr	r0, [pc, #112]	; (8002950 <Set_DutyCycle+0x114>)
 80028de:	f006 f9c3 	bl	8008c68 <__assert_func>

	uint32_t newRegVal = (uint32_t)roundf((float)(TIM3->ARR + 1) * dutycycle);
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <Set_DutyCycle+0x118>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	3301      	adds	r3, #1
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f00a fdd4 	bl	800d4a8 <roundf>
 8002900:	eef0 7a40 	vmov.f32	s15, s0
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	ee17 3a90 	vmov	r3, s15
 800290c:	60fb      	str	r3, [r7, #12]

    //In case of the dutycycle being calculated as higher than the reload register, cap it to the reload register
	if(newRegVal > TIM3->ARR)
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <Set_DutyCycle+0x118>)
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d902      	bls.n	800291e <Set_DutyCycle+0xe2>
		newRegVal = TIM3->ARR;
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <Set_DutyCycle+0x118>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	60fb      	str	r3, [r7, #12]

	TIM3->CCR1 = (uint32_t)(roundf(newRegVal));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <Set_DutyCycle+0x118>)
 800292a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292e:	ee17 2a90 	vmov	r2, s15
 8002932:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, TIM3->CCR1);
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bdb0      	pop	{r4, r5, r7, pc}
 800293c:	408f4000 	.word	0x408f4000
 8002940:	20000958 	.word	0x20000958
 8002944:	42c80000 	.word	0x42c80000
 8002948:	0800d568 	.word	0x0800d568
 800294c:	0800db84 	.word	0x0800db84
 8002950:	0800d5a4 	.word	0x0800d5a4
 8002954:	40000400 	.word	0x40000400

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295e:	f001 f883 	bl	8003a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002962:	f000 f97b 	bl	8002c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002966:	f000 fb97 	bl	8003098 <MX_GPIO_Init>
  MX_ADC1_Init();
 800296a:	f000 f9dd 	bl	8002d28 <MX_ADC1_Init>
  MX_TIM1_Init();
 800296e:	f000 fa8b 	bl	8002e88 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002972:	f000 fae3 	bl	8002f3c <MX_TIM3_Init>
  MX_TIM7_Init();
 8002976:	f000 fb59 	bl	800302c <MX_TIM7_Init>
  MX_I2C1_Init();
 800297a:	f000 fa45 	bl	8002e08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /*first uncomment ValuInit_Write_EE() to write initial values,
  then comment it and upload the program again on the micro*/
  //ValuInit_Write_EE();
  ValuInit_Read_EE();
 800297e:	f7ff fe25 	bl	80025cc <ValuInit_Read_EE>
  values_Custom[4] = EEValues_Custom[4];
  values_Custom[5] = EEValues_Custom[5];
  values_Custom[6] = EEValues_Custom[6];*/

  //start encoder timer 1 for reading rotary encoder
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002982:	213c      	movs	r1, #60	; 0x3c
 8002984:	4899      	ldr	r0, [pc, #612]	; (8002bec <main+0x294>)
 8002986:	f004 fe4b 	bl	8007620 <HAL_TIM_Encoder_Start>

  //create different flags base on 1ms timer 7
  //__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE );
  HAL_TIM_Base_Start_IT(&htim7);
 800298a:	4899      	ldr	r0, [pc, #612]	; (8002bf0 <main+0x298>)
 800298c:	f004 face 	bl	8006f2c <HAL_TIM_Base_Start_IT>

  //create PWM and change Frequency and Duty Cycle
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE );
 8002990:	4b98      	ldr	r3, [pc, #608]	; (8002bf4 <main+0x29c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b97      	ldr	r3, [pc, #604]	; (8002bf4 <main+0x29c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	60da      	str	r2, [r3, #12]
  volatile char input;// holds the current keys state.
  uint8_t j;

  char (*pStateFunc)(char);
  // Initial state variables
  uint8_t state = ST_STANDBY;
 80029a0:	2314      	movs	r3, #20
 80029a2:	70fb      	strb	r3, [r7, #3]
  pStateFunc = StandBy;
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <main+0x2a0>)
 80029a6:	607b      	str	r3, [r7, #4]

  memcpy(&StateNextVar, &main_state_nextVariable, sizeof(main_state_nextVariable));
 80029a8:	4a94      	ldr	r2, [pc, #592]	; (8002bfc <main+0x2a4>)
 80029aa:	4b95      	ldr	r3, [pc, #596]	; (8002c00 <main+0x2a8>)
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029c0:	e884 0003 	stmia.w	r4, {r0, r1}
  memcpy(&StateVar, &main_stateVariable, sizeof(main_stateVariable));
 80029c4:	4a8f      	ldr	r2, [pc, #572]	; (8002c04 <main+0x2ac>)
 80029c6:	4b90      	ldr	r3, [pc, #576]	; (8002c08 <main+0x2b0>)
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	23a0      	movs	r3, #160	; 0xa0
 80029ce:	461a      	mov	r2, r3
 80029d0:	f007 f995 	bl	8009cfe <memcpy>
  memcpy(&StateMenu, &main_menuState, sizeof(main_menuState));
 80029d4:	4a8d      	ldr	r2, [pc, #564]	; (8002c0c <main+0x2b4>)
 80029d6:	4b8e      	ldr	r3, [pc, #568]	; (8002c10 <main+0x2b8>)
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  LCD_Init();
 80029ec:	f005 ff62 	bl	80088b4 <LCD_Init>
  LCD_Clear();
 80029f0:	f005 ffec 	bl	80089cc <LCD_Clear>
  LCD_DisplayOn();
 80029f4:	f006 f850 	bl	8008a98 <LCD_DisplayOn>
  LCD_BL_SET(1);
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029fe:	4885      	ldr	r0, [pc, #532]	; (8002c14 <main+0x2bc>)
 8002a00:	f002 f85c 	bl	8004abc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/4;
 8002a04:	4b79      	ldr	r3, [pc, #484]	; (8002bec <main+0x294>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <main+0x2c0>)
 8002a10:	601a      	str	r2, [r3, #0]
		diff = encoder_counter - last_count;  // Calculate the difference between the current count and the last count
 8002a12:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <main+0x2c0>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <main+0x2c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4a80      	ldr	r2, [pc, #512]	; (8002c20 <main+0x2c8>)
 8002a1e:	6013      	str	r3, [r2, #0]

		if (diff != 0)
 8002a20:	4b7f      	ldr	r3, [pc, #508]	; (8002c20 <main+0x2c8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d018      	beq.n	8002a5a <main+0x102>
		{
			if (diff > 0)
 8002a28:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <main+0x2c8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dd06      	ble.n	8002a3e <main+0xe6>
			{
				flagRotaryCW = true; //Clockwise rotation
 8002a30:	4b7c      	ldr	r3, [pc, #496]	; (8002c24 <main+0x2cc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = false;
 8002a36:	4b7c      	ldr	r3, [pc, #496]	; (8002c28 <main+0x2d0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e009      	b.n	8002a52 <main+0xfa>
			}
			else if (diff < 0)
 8002a3e:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <main+0x2c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da05      	bge.n	8002a52 <main+0xfa>
			{
				flagRotaryCW = false;
 8002a46:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <main+0x2cc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
				flagRotaryCCW = true; //Counter-clockwise rotation
 8002a4c:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <main+0x2d0>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
			}

			last_count = encoder_counter; //Update the last count
 8002a52:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <main+0x2c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a71      	ldr	r2, [pc, #452]	; (8002c1c <main+0x2c4>)
 8002a58:	6013      	str	r3, [r2, #0]
		}

		if ( flag10ms == true )
 8002a5a:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <main+0x2d4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <main+0x116>
		{
			debounce();  // Update button_state.
 8002a64:	f7fe f946 	bl	8000cf4 <debounce>

			//if (buzzer[BUZZ_NUM])
				//ToggleBuzzer(buzzer);

			flag10ms = false;
 8002a68:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <main+0x2d4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
		}

		if ( flag1ms == true && flagSetPWM == true )
 8002a6e:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <main+0x2d8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d036      	beq.n	8002ae6 <main+0x18e>
 8002a78:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <main+0x2dc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d031      	beq.n	8002ae6 <main+0x18e>
		{
			CountRamp++;
 8002a82:	4b6d      	ldr	r3, [pc, #436]	; (8002c38 <main+0x2e0>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <main+0x2e0>)
 8002a8c:	801a      	strh	r2, [r3, #0]
			if( CountRamp > StepRamp )
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <main+0x2e0>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9a:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <main+0x2e4>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	dd06      	ble.n	8002ab8 <main+0x160>
			{
				CountRamp = 0;
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <main+0x2e0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	801a      	strh	r2, [r3, #0]
				flagSetPWM = false;
 8002ab0:	4b60      	ldr	r3, [pc, #384]	; (8002c34 <main+0x2dc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e013      	b.n	8002ae0 <main+0x188>
				//Set_DutyCycle(DutyCycle);
			}
			else
			    Set_DutyCycle( (Time_ON/StepRamp) * CountRamp );
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <main+0x2e8>)
 8002aba:	edd3 6a00 	vldr	s13, [r3]
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <main+0x2e4>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac8:	4b5b      	ldr	r3, [pc, #364]	; (8002c38 <main+0x2e0>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	f7ff feae 	bl	800283c <Set_DutyCycle>

			flag1ms = false;
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <main+0x2d8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
		}

		// Read input and change states
		buttonMask=KEY_MASK;
 8002ae6:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <main+0x2ec>)
 8002ae8:	220f      	movs	r2, #15
 8002aea:	701a      	strb	r2, [r3, #0]
		buttonMask &= buttons_release;
 8002aec:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <main+0x2f0>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <main+0x2ec>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <main+0x2ec>)
 8002afe:	701a      	strb	r2, [r3, #0]
		buttons_release ^= buttonMask;
 8002b00:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <main+0x2ec>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <main+0x2f0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4053      	eors	r3, r2
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <main+0x2f0>)
 8002b12:	701a      	strb	r2, [r3, #0]
		input = buttonMask | ((flagRotaryCCW*ROTARY_CCW_DIR)) | ((flagRotaryCW*ROTARY_CW_DIR)); // Read buttons
 8002b14:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <main+0x2d0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	b25a      	sxtb	r2, r3
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <main+0x2ec>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <main+0x2cc>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	703b      	strb	r3, [r7, #0]
		flagRotaryCW = false;
 8002b40:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <main+0x2cc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
		flagRotaryCCW = false;
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <main+0x2d0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]


	    //Set buzzer to beep if one button is pressed.
		if (input)
 8002b4c:	783b      	ldrb	r3, [r7, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <main+0x208>
		{
			buzzer[BUZZ_NUM] = 1;
 8002b54:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <main+0x2f4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
			buzzer[BUZZ_DELAY] = 10;
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <main+0x2f4>)
 8002b5c:	220a      	movs	r2, #10
 8002b5e:	705a      	strb	r2, [r3, #1]
		}

		if (tapChangerState == 0 || errorVar != 0)
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <main+0x2f8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <main+0x21a>
 8002b68:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <main+0x2fc>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f43f af49 	beq.w	8002a04 <main+0xac>
		{
			// When in this state, we must call the state function
			nextState = pStateFunc(input);
 8002b72:	783b      	ldrb	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4798      	blx	r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <main+0x300>)
 8002b82:	701a      	strb	r2, [r3, #0]
			if(errorVar != 0)
 8002b84:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <main+0x2fc>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <main+0x23a>
				nextState = ST_ERRORS;
 8002b8c:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <main+0x300>)
 8002b8e:	225a      	movs	r2, #90	; 0x5a
 8002b90:	701a      	strb	r2, [r3, #0]
			if (nextState != state)
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <main+0x300>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f43f af32 	beq.w	8002a04 <main+0xac>
			{
				state = nextState;
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <main+0x300>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	70fb      	strb	r3, [r7, #3]

				for (uint8_t n = 0; (j=StateMenu[n].state); n++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	70bb      	strb	r3, [r7, #2]
 8002baa:	e011      	b.n	8002bd0 <main+0x278>
				{
					if (j == state)
 8002bac:	787a      	ldrb	r2, [r7, #1]
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10a      	bne.n	8002bca <main+0x272>
					{
						pStateFunc = StateMenu[n].pFunc;
 8002bb4:	78ba      	ldrb	r2, [r7, #2]
 8002bb6:	4915      	ldr	r1, [pc, #84]	; (8002c0c <main+0x2b4>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	607b      	str	r3, [r7, #4]
						break;
 8002bc8:	e00e      	b.n	8002be8 <main+0x290>
				for (uint8_t n = 0; (j=StateMenu[n].state); n++)
 8002bca:	78bb      	ldrb	r3, [r7, #2]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	70bb      	strb	r3, [r7, #2]
 8002bd0:	78ba      	ldrb	r2, [r7, #2]
 8002bd2:	490e      	ldr	r1, [pc, #56]	; (8002c0c <main+0x2b4>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	707b      	strb	r3, [r7, #1]
 8002be2:	787b      	ldrb	r3, [r7, #1]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e1      	bne.n	8002bac <main+0x254>
		encoder_counter = __HAL_TIM_GET_COUNTER(&htim1)/4;
 8002be8:	e70c      	b.n	8002a04 <main+0xac>
 8002bea:	bf00      	nop
 8002bec:	20000818 	.word	0x20000818
 8002bf0:	200008b0 	.word	0x200008b0
 8002bf4:	20000864 	.word	0x20000864
 8002bf8:	08001129 	.word	0x08001129
 8002bfc:	20000960 	.word	0x20000960
 8002c00:	0800d650 	.word	0x0800d650
 8002c04:	2000099c 	.word	0x2000099c
 8002c08:	0800d688 	.word	0x0800d688
 8002c0c:	20000a3c 	.word	0x20000a3c
 8002c10:	0800d728 	.word	0x0800d728
 8002c14:	48000800 	.word	0x48000800
 8002c18:	20000940 	.word	0x20000940
 8002c1c:	20000944 	.word	0x20000944
 8002c20:	20000948 	.word	0x20000948
 8002c24:	2000093e 	.word	0x2000093e
 8002c28:	2000093f 	.word	0x2000093f
 8002c2c:	2000092f 	.word	0x2000092f
 8002c30:	2000092e 	.word	0x2000092e
 8002c34:	2000093d 	.word	0x2000093d
 8002c38:	20000950 	.word	0x20000950
 8002c3c:	2000094c 	.word	0x2000094c
 8002c40:	20000954 	.word	0x20000954
 8002c44:	200008fc 	.word	0x200008fc
 8002c48:	20000aed 	.word	0x20000aed
 8002c4c:	2000095c 	.word	0x2000095c
 8002c50:	2000092a 	.word	0x2000092a
 8002c54:	20000926 	.word	0x20000926
 8002c58:	200008fe 	.word	0x200008fe

08002c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b096      	sub	sp, #88	; 0x58
 8002c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c66:	2228      	movs	r2, #40	; 0x28
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 ffc7 	bl	8009bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	463b      	mov	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	611a      	str	r2, [r3, #16]
 8002c8e:	615a      	str	r2, [r3, #20]
 8002c90:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c92:	2303      	movs	r3, #3
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fd23 	bl	8005708 <HAL_RCC_OscConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002cc8:	f000 fbc0 	bl	800344c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ccc:	230f      	movs	r3, #15
 8002cce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fd4b 	bl	8006784 <HAL_RCC_ClockConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002cf4:	f000 fbaa 	bl	800344c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8002cf8:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8002cfc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d02:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 ff7e 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d1a:	f000 fb97 	bl	800344c <Error_Handler>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3758      	adds	r7, #88	; 0x58
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d92:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d94:	2204      	movs	r2, #4
 8002d96:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002da4:	4817      	ldr	r0, [pc, #92]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002da6:	f000 feb9 	bl	8003b1c <HAL_ADC_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002db0:	f000 fb4c 	bl	800344c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4811      	ldr	r0, [pc, #68]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002dc0:	f001 fafc 	bl	80043bc <HAL_ADCEx_MultiModeConfigChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002dca:	f000 fb3f 	bl	800344c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002dce:	2312      	movs	r3, #18
 8002dd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <MX_ADC1_Init+0xdc>)
 8002dec:	f001 f828 	bl	8003e40 <HAL_ADC_ConfigChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002df6:	f000 fb29 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000774 	.word	0x20000774

08002e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <MX_I2C1_Init+0x78>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101827;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <MX_I2C1_Init+0x7c>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e42:	480e      	ldr	r0, [pc, #56]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e44:	f001 fe52 	bl	8004aec <HAL_I2C_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e4e:	f000 fafd 	bl	800344c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e52:	2100      	movs	r1, #0
 8002e54:	4809      	ldr	r0, [pc, #36]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e56:	f002 fbbf 	bl	80055d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e60:	f000 faf4 	bl	800344c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8002e64:	2105      	movs	r1, #5
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_I2C1_Init+0x74>)
 8002e68:	f002 fc01 	bl	800566e <HAL_I2CEx_ConfigDigitalFilter>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e72:	f000 faeb 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200007c4 	.word	0x200007c4
 8002e80:	40005400 	.word	0x40005400
 8002e84:	00101827 	.word	0x00101827

08002e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f006 feb1 	bl	8009bfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002ea8:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <MX_TIM1_Init+0xb0>)
 8002eaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002eac:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eda:	2301      	movs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4619      	mov	r1, r3
 8002efc:	480d      	ldr	r0, [pc, #52]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002efe:	f004 fae9 	bl	80074d4 <HAL_TIM_Encoder_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002f08:	f000 faa0 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	; (8002f34 <MX_TIM1_Init+0xac>)
 8002f1e:	f005 fb11 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002f28:	f000 fa90 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f2c:	bf00      	nop
 8002f2e:	3730      	adds	r7, #48	; 0x30
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000818 	.word	0x20000818
 8002f38:	40012c00 	.word	0x40012c00

08002f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f70:	4a2d      	ldr	r2, [pc, #180]	; (8003028 <MX_TIM3_Init+0xec>)
 8002f72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f76:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b29      	ldr	r3, [pc, #164]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f96:	4823      	ldr	r0, [pc, #140]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002f98:	f003 ff70 	bl	8006e7c <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002fa2:	f000 fa53 	bl	800344c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	481c      	ldr	r0, [pc, #112]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002fb4:	f004 fdf6 	bl	8007ba4 <HAL_TIM_ConfigClockSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002fbe:	f000 fa45 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fc2:	4818      	ldr	r0, [pc, #96]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002fc4:	f004 f80e 	bl	8006fe4 <HAL_TIM_PWM_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002fce:	f000 fa3d 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4810      	ldr	r0, [pc, #64]	; (8003024 <MX_TIM3_Init+0xe8>)
 8002fe2:	f005 faaf 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002fec:	f000 fa2e 	bl	800344c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff0:	2360      	movs	r3, #96	; 0x60
 8002ff2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003000:	463b      	mov	r3, r7
 8003002:	2200      	movs	r2, #0
 8003004:	4619      	mov	r1, r3
 8003006:	4807      	ldr	r0, [pc, #28]	; (8003024 <MX_TIM3_Init+0xe8>)
 8003008:	f004 fcb8 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003012:	f000 fa1b 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003016:	4803      	ldr	r0, [pc, #12]	; (8003024 <MX_TIM3_Init+0xe8>)
 8003018:	f000 fb2a 	bl	8003670 <HAL_TIM_MspPostInit>

}
 800301c:	bf00      	nop
 800301e:	3738      	adds	r7, #56	; 0x38
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000864 	.word	0x20000864
 8003028:	40000400 	.word	0x40000400

0800302c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_TIM7_Init+0x64>)
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <MX_TIM7_Init+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 720-1;
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <MX_TIM7_Init+0x64>)
 8003044:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003048:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_TIM7_Init+0x64>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_TIM7_Init+0x64>)
 8003052:	2263      	movs	r2, #99	; 0x63
 8003054:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <MX_TIM7_Init+0x64>)
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <MX_TIM7_Init+0x64>)
 800305e:	f003 ff0d 	bl	8006e7c <HAL_TIM_Base_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003068:	f000 f9f0 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	; (8003090 <MX_TIM7_Init+0x64>)
 800307a:	f005 fa63 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003084:	f000 f9e2 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200008b0 	.word	0x200008b0
 8003094:	40001400 	.word	0x40001400

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	4b66      	ldr	r3, [pc, #408]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4a65      	ldr	r2, [pc, #404]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030b8:	6153      	str	r3, [r2, #20]
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a5f      	ldr	r2, [pc, #380]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4a59      	ldr	r2, [pc, #356]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e8:	6153      	str	r3, [r2, #20]
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4a53      	ldr	r2, [pc, #332]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6153      	str	r3, [r2, #20]
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <MX_GPIO_Init+0x1b0>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800310e:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <MX_GPIO_Init+0x1b0>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <MX_GPIO_Init+0x1b0>)
 8003114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003118:	6153      	str	r3, [r2, #20]
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <MX_GPIO_Init+0x1b0>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_BKL_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
 8003126:	2200      	movs	r2, #0
 8003128:	f643 410f 	movw	r1, #15375	; 0x3c0f
 800312c:	4847      	ldr	r0, [pc, #284]	; (800324c <MX_GPIO_Init+0x1b4>)
 800312e:	f001 fcc5 	bl	8004abc <HAL_GPIO_WritePin>
                          |LCD7_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|Madule_LED_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	f248 0184 	movw	r1, #32900	; 0x8084
 8003138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313c:	f001 fcbe 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003146:	4842      	ldr	r0, [pc, #264]	; (8003250 <MX_GPIO_Init+0x1b8>)
 8003148:	f001 fcb8 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	2104      	movs	r1, #4
 8003150:	4840      	ldr	r0, [pc, #256]	; (8003254 <MX_GPIO_Init+0x1bc>)
 8003152:	f001 fcb3 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_BKL_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LCD_BKL_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003156:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800315a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315c:	2301      	movs	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003160:	2302      	movs	r3, #2
 8003162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	4837      	ldr	r0, [pc, #220]	; (800324c <MX_GPIO_Init+0x1b4>)
 8003170:	f001 fb32 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY6_Pin */
  GPIO_InitStruct.Pin = KEY6_Pin;
 8003174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY6_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	4830      	ldr	r0, [pc, #192]	; (800324c <MX_GPIO_Init+0x1b4>)
 800318a:	f001 fb25 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD4_Pin LCD5_Pin LCD6_Pin LCD7_Pin */
  GPIO_InitStruct.Pin = LCD4_Pin|LCD5_Pin|LCD6_Pin|LCD7_Pin;
 800318e:	230f      	movs	r3, #15
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4829      	ldr	r0, [pc, #164]	; (800324c <MX_GPIO_Init+0x1b4>)
 80031a6:	f001 fb17 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 80031aa:	2384      	movs	r3, #132	; 0x84
 80031ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c4:	f001 fb08 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80031c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	4619      	mov	r1, r3
 80031e0:	481b      	ldr	r0, [pc, #108]	; (8003250 <MX_GPIO_Init+0x1b8>)
 80031e2:	f001 faf9 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : rotaryMiddle_Pin Key4_Pin Key5_Pin */
  GPIO_InitStruct.Pin = rotaryMiddle_Pin|Key4_Pin|Key5_Pin;
 80031e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031fe:	f001 faeb 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Madule_LED_Pin */
  GPIO_InitStruct.Pin = Madule_LED_Pin;
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800320c:	2302      	movs	r3, #2
 800320e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Madule_LED_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321e:	f001 fadb 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8003222:	2304      	movs	r3, #4
 8003224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800322a:	2302      	movs	r3, #2
 800322c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	4619      	mov	r1, r3
 8003238:	4806      	ldr	r0, [pc, #24]	; (8003254 <MX_GPIO_Init+0x1bc>)
 800323a:	f001 facd 	bl	80047d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	48000800 	.word	0x48000800
 8003250:	48000400 	.word	0x48000400
 8003254:	48000c00 	.word	0x48000c00

08003258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5b      	ldr	r2, [pc, #364]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800326a:	f000 fc13 	bl	8003a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d17d      	bne.n	8003374 <HAL_TIM_PeriodElapsedCallback+0x11c>
	volatile static uint32_t count1ms = 0;
	count1ms++;
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a57      	ldr	r2, [pc, #348]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003280:	6013      	str	r3, [r2, #0]
	flag1ms = true;
 8003282:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]

	if ( (count1ms % 10) == 0 )
 8003288:	4b54      	ldr	r3, [pc, #336]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800328e:	fba3 2301 	umull	r2, r3, r3, r1
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	1aca      	subs	r2, r1, r3
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d168      	bne.n	8003374 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{
		//if ( (count1ms % 10) == 0 )
		//{
			flag10ms = true;
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
			flcd10ms = true;
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x194>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
			flagADC10ms= true;
 80032ae:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
		//}
		if ( (count1ms % 100) == 0 )
 80032b4:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b4e      	ldr	r3, [pc, #312]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80032ba:	fba3 1302 	umull	r1, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <HAL_TIM_PeriodElapsedCallback+0x8c>
		{
			flag100ms = true;
 80032cc:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
			flcd100ms = true;
 80032d2:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
			f2lcd100ms = true;
 80032d8:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
			fSlope100ms = true;
 80032de:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		}
		if ( (count1ms % 300) == 0 )
 80032e4:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_TIM_PeriodElapsedCallback+0xb2>
		{
			flag300ms = true;
 80032fe:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
			flcd300ms = true;
 8003304:	4b42      	ldr	r3, [pc, #264]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
		}
		if ( (count1ms % 500) == 0 )
 800330a:	4b34      	ldr	r3, [pc, #208]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003310:	fba3 1302 	umull	r1, r3, r3, r2
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <HAL_TIM_PeriodElapsedCallback+0xde>
		{
			fLcdError500ms = true;
 8003324:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
			flagRefreshValue500ms = true;
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
			flcd500ms = true;
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]

		}
		if ( (count1ms % 1000) == 0 )
 8003336:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <HAL_TIM_PeriodElapsedCallback+0x10a>
		{
			//flagZeroDetectEr1s = true;
			flag1s = true;
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
			flcd1s = true;
 8003356:	4b34      	ldr	r3, [pc, #208]	; (8003428 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
			fupdate1s = true;
 800335c:	4b33      	ldr	r3, [pc, #204]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
		/*if ( (count100us % StepRamp) == 0 )
		{
			flagCountRamp = true;
			CountRamp++;
		}*/
		if (count1ms == 10000)
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f242 7210 	movw	r2, #10000	; 0x2710
 800336a:	4293      	cmp	r3, r2
 800336c:	d102      	bne.n	8003374 <HAL_TIM_PeriodElapsedCallback+0x11c>
		{
			//fErr2s = true;
			count1ms = 0;
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
			//fErr2s = true;
			count10ms = 0;
		}
	}*/
  }
  if (htim->Instance == TIM3 && flagUpdatePWM == true) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d125      	bne.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x172>
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x172>
	  if(StateVar[cursorLine].IndexMenu==Second_Menu_1)
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	4a2b      	ldr	r2, [pc, #172]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003390:	460b      	mov	r3, r1
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3311      	adds	r3, #17
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2bc9      	cmp	r3, #201	; 0xc9
 80033a0:	d10d      	bne.n	80033be <HAL_TIM_PeriodElapsedCallback+0x166>
	  {
		  Set_Frequency(Frequency);  //VA_FREQUENCY
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	f7ff fa20 	bl	80027f0 <Set_Frequency>
		  Set_DutyCycle(Time_ON);  //VA_TIME
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ba:	f7ff fa3f 	bl	800283c <Set_DutyCycle>
	  }
	  flagSetPWM = true;
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
	  flagUpdatePWM = false;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40001000 	.word	0x40001000
 80033d8:	40001400 	.word	0x40001400
 80033dc:	20000a90 	.word	0x20000a90
 80033e0:	2000092e 	.word	0x2000092e
 80033e4:	cccccccd 	.word	0xcccccccd
 80033e8:	2000092f 	.word	0x2000092f
 80033ec:	20000936 	.word	0x20000936
 80033f0:	20000933 	.word	0x20000933
 80033f4:	51eb851f 	.word	0x51eb851f
 80033f8:	20000930 	.word	0x20000930
 80033fc:	20000937 	.word	0x20000937
 8003400:	20000938 	.word	0x20000938
 8003404:	20000935 	.word	0x20000935
 8003408:	1b4e81b5 	.word	0x1b4e81b5
 800340c:	20000932 	.word	0x20000932
 8003410:	2000093b 	.word	0x2000093b
 8003414:	10624dd3 	.word	0x10624dd3
 8003418:	20000939 	.word	0x20000939
 800341c:	20000931 	.word	0x20000931
 8003420:	2000093a 	.word	0x2000093a
 8003424:	2000092c 	.word	0x2000092c
 8003428:	20000934 	.word	0x20000934
 800342c:	2000092d 	.word	0x2000092d
 8003430:	40000400 	.word	0x40000400
 8003434:	2000093c 	.word	0x2000093c
 8003438:	200008ff 	.word	0x200008ff
 800343c:	2000099c 	.word	0x2000099c
 8003440:	20000958 	.word	0x20000958
 8003444:	20000954 	.word	0x20000954
 8003448:	2000093d 	.word	0x2000093d

0800344c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003454:	e7fe      	b.n	8003454 <Error_Handler+0x8>
	...

08003458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_MspInit+0x44>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_MspInit+0x44>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6193      	str	r3, [r2, #24]
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_MspInit+0x44>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_MspInit+0x44>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <HAL_MspInit+0x44>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	61d3      	str	r3, [r2, #28]
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_MspInit+0x44>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b0:	d10b      	bne.n	80034ca <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_ADC_MspInit+0x38>)
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_ADC_MspInit+0x38>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6153      	str	r3, [r2, #20]
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_ADC_MspInit+0x38>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_I2C_MspInit+0x7c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d128      	bne.n	8003550 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_I2C_MspInit+0x80>)
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_I2C_MspInit+0x80>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003508:	6153      	str	r3, [r2, #20]
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_I2C_MspInit+0x80>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003528:	2304      	movs	r3, #4
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	480b      	ldr	r0, [pc, #44]	; (8003560 <HAL_I2C_MspInit+0x84>)
 8003534:	f001 f950 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_I2C_MspInit+0x80>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_I2C_MspInit+0x80>)
 800353e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003542:	61d3      	str	r3, [r2, #28]
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_I2C_MspInit+0x80>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40005400 	.word	0x40005400
 800355c:	40021000 	.word	0x40021000
 8003560:	48000400 	.word	0x48000400

08003564 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d129      	bne.n	80035da <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 800358c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003590:	6193      	str	r3, [r2, #24]
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	6153      	str	r3, [r2, #20]
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = rotaryA_Pin|rotaryB_Pin;
 80035b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035c8:	2306      	movs	r3, #6
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d6:	f001 f8ff 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_TIM_Base_MspInit+0x78>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d114      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	201d      	movs	r0, #29
 800361c:	f001 f8b2 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003620:	201d      	movs	r0, #29
 8003622:	f001 f8cb 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003626:	e018      	b.n	800365a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0f      	ldr	r2, [pc, #60]	; (800366c <HAL_TIM_Base_MspInit+0x80>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 8003638:	f043 0320 	orr.w	r3, r3, #32
 800363c:	61d3      	str	r3, [r2, #28]
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_TIM_Base_MspInit+0x7c>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	2037      	movs	r0, #55	; 0x37
 8003650:	f001 f898 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8003654:	2037      	movs	r0, #55	; 0x37
 8003656:	f001 f8b1 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40000400 	.word	0x40000400
 8003668:	40021000 	.word	0x40021000
 800366c:	40001400 	.word	0x40001400

08003670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_TIM_MspPostInit+0x64>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d11c      	bne.n	80036cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_TIM_MspPostInit+0x68>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_TIM_MspPostInit+0x68>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	6153      	str	r3, [r2, #20]
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_TIM_MspPostInit+0x68>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4619      	mov	r1, r3
 80036c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c8:	f001 f886 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036cc:	bf00      	nop
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036ec:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_InitTick+0xe0>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_InitTick+0xe0>)
 80036f2:	f043 0310 	orr.w	r3, r3, #16
 80036f6:	61d3      	str	r3, [r2, #28]
 80036f8:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_InitTick+0xe0>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003704:	f107 0210 	add.w	r2, r7, #16
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fa4c 	bl	8006bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800371e:	f003 fa23 	bl	8006b68 <HAL_RCC_GetPCLK1Freq>
 8003722:	6378      	str	r0, [r7, #52]	; 0x34
 8003724:	e004      	b.n	8003730 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003726:	f003 fa1f 	bl	8006b68 <HAL_RCC_GetPCLK1Freq>
 800372a:	4603      	mov	r3, r0
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_InitTick+0xe4>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	0c9b      	lsrs	r3, r3, #18
 800373a:	3b01      	subs	r3, #1
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_InitTick+0xe8>)
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_InitTick+0xec>)
 8003742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_InitTick+0xe8>)
 8003746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800374a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_InitTick+0xe8>)
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_InitTick+0xe8>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_InitTick+0xe8>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_InitTick+0xe8>)
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003764:	4817      	ldr	r0, [pc, #92]	; (80037c4 <HAL_InitTick+0xe8>)
 8003766:	f003 fb89 	bl	8006e7c <HAL_TIM_Base_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11b      	bne.n	80037b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003778:	4812      	ldr	r0, [pc, #72]	; (80037c4 <HAL_InitTick+0xe8>)
 800377a:	f003 fbd7 	bl	8006f2c <HAL_TIM_Base_Start_IT>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800378c:	2036      	movs	r0, #54	; 0x36
 800378e:	f001 f815 	bl	80047bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d808      	bhi.n	80037aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	2036      	movs	r0, #54	; 0x36
 800379e:	f000 fff1 	bl	8004784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_InitTick+0xf0>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e002      	b.n	80037b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3738      	adds	r7, #56	; 0x38
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	20000a94 	.word	0x20000a94
 80037c8:	40001000 	.word	0x40001000
 80037cc:	20000010 	.word	0x20000010

080037d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037d4:	e7fe      	b.n	80037d4 <NMI_Handler+0x4>

080037d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <HardFault_Handler+0x4>

080037dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <MemManage_Handler+0x4>

080037e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e6:	e7fe      	b.n	80037e6 <BusFault_Handler+0x4>

080037e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ec:	e7fe      	b.n	80037ec <UsageFault_Handler+0x4>

080037ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800382c:	4802      	ldr	r0, [pc, #8]	; (8003838 <TIM3_IRQHandler+0x10>)
 800382e:	f003 ff85 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000864 	.word	0x20000864

0800383c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <TIM6_DAC1_IRQHandler+0x10>)
 8003842:	f003 ff7b 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000a94 	.word	0x20000a94

08003850 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003854:	4802      	ldr	r0, [pc, #8]	; (8003860 <TIM7_DAC2_IRQHandler+0x10>)
 8003856:	f003 ff71 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200008b0 	.word	0x200008b0

08003864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return 1;
 8003868:	2301      	movs	r3, #1
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_kill>:

int _kill(int pid, int sig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800387e:	f006 fa11 	bl	8009ca4 <__errno>
 8003882:	4603      	mov	r3, r0
 8003884:	2216      	movs	r2, #22
 8003886:	601a      	str	r2, [r3, #0]
  return -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_exit>:

void _exit (int status)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ffe7 	bl	8003874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038a6:	e7fe      	b.n	80038a6 <_exit+0x12>

080038a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e00a      	b.n	80038d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ba:	f3af 8000 	nop.w
 80038be:	4601      	mov	r1, r0
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	60ba      	str	r2, [r7, #8]
 80038c6:	b2ca      	uxtb	r2, r1
 80038c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3301      	adds	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	dbf0      	blt.n	80038ba <_read+0x12>
  }

  return len;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e009      	b.n	8003908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	60ba      	str	r2, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	dbf1      	blt.n	80038f4 <_write+0x12>
  }
  return len;
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_close>:

int _close(int file)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003942:	605a      	str	r2, [r3, #4]
  return 0;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <_isatty>:

int _isatty(int file)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800395a:	2301      	movs	r3, #1
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <_sbrk+0x5c>)
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <_sbrk+0x60>)
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <_sbrk+0x64>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <_sbrk+0x64>)
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <_sbrk+0x68>)
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <_sbrk+0x64>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d207      	bcs.n	80039c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039b4:	f006 f976 	bl	8009ca4 <__errno>
 80039b8:	4603      	mov	r3, r0
 80039ba:	220c      	movs	r2, #12
 80039bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	e009      	b.n	80039d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <_sbrk+0x64>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <_sbrk+0x64>)
 80039d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20003000 	.word	0x20003000
 80039e4:	00000400 	.word	0x00000400
 80039e8:	20000ae0 	.word	0x20000ae0
 80039ec:	20000c40 	.word	0x20000c40

080039f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <SystemInit+0x20>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <SystemInit+0x20>)
 80039fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <Reset_Handler>:
 8003a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a4c <LoopForever+0x2>
 8003a18:	f7ff ffea 	bl	80039f0 <SystemInit>
 8003a1c:	480c      	ldr	r0, [pc, #48]	; (8003a50 <LoopForever+0x6>)
 8003a1e:	490d      	ldr	r1, [pc, #52]	; (8003a54 <LoopForever+0xa>)
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <LoopForever+0xe>)
 8003a22:	2300      	movs	r3, #0
 8003a24:	e002      	b.n	8003a2c <LoopCopyDataInit>

08003a26 <CopyDataInit>:
 8003a26:	58d4      	ldr	r4, [r2, r3]
 8003a28:	50c4      	str	r4, [r0, r3]
 8003a2a:	3304      	adds	r3, #4

08003a2c <LoopCopyDataInit>:
 8003a2c:	18c4      	adds	r4, r0, r3
 8003a2e:	428c      	cmp	r4, r1
 8003a30:	d3f9      	bcc.n	8003a26 <CopyDataInit>
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <LoopForever+0x12>)
 8003a34:	4c0a      	ldr	r4, [pc, #40]	; (8003a60 <LoopForever+0x16>)
 8003a36:	2300      	movs	r3, #0
 8003a38:	e001      	b.n	8003a3e <LoopFillZerobss>

08003a3a <FillZerobss>:
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	3204      	adds	r2, #4

08003a3e <LoopFillZerobss>:
 8003a3e:	42a2      	cmp	r2, r4
 8003a40:	d3fb      	bcc.n	8003a3a <FillZerobss>
 8003a42:	f006 f935 	bl	8009cb0 <__libc_init_array>
 8003a46:	f7fe ff87 	bl	8002958 <main>

08003a4a <LoopForever>:
 8003a4a:	e7fe      	b.n	8003a4a <LoopForever>
 8003a4c:	20003000 	.word	0x20003000
 8003a50:	20000000 	.word	0x20000000
 8003a54:	200001e0 	.word	0x200001e0
 8003a58:	0800dffc 	.word	0x0800dffc
 8003a5c:	200001e0 	.word	0x200001e0
 8003a60:	20000c3c 	.word	0x20000c3c

08003a64 <ADC1_2_IRQHandler>:
 8003a64:	e7fe      	b.n	8003a64 <ADC1_2_IRQHandler>
	...

08003a68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_Init+0x28>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_Init+0x28>)
 8003a72:	f043 0310 	orr.w	r3, r3, #16
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 fe78 	bl	800476e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7e:	200f      	movs	r0, #15
 8003a80:	f7ff fe2c 	bl	80036dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7ff fce8 	bl	8003458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40022000 	.word	0x40022000

08003a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000014 	.word	0x20000014
 8003ab8:	20000ae4 	.word	0x20000ae4

08003abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000ae4 	.word	0x20000ae4

08003ad4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000014 	.word	0x20000014

08003b1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b09a      	sub	sp, #104	; 0x68
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e172      	b.n	8003e22 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d176      	bne.n	8003c3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d152      	bne.n	8003bfc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fc95 	bl	80034a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13b      	bne.n	8003bfc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fcdf 	bl	8004548 <ADC_Disable>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d12f      	bne.n	8003bfc <HAL_ADC_Init+0xe0>
 8003b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12b      	bne.n	8003bfc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bc6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bd8:	4b94      	ldr	r3, [pc, #592]	; (8003e2c <HAL_ADC_Init+0x310>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a94      	ldr	r2, [pc, #592]	; (8003e30 <HAL_ADC_Init+0x314>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9a      	lsrs	r2, r3, #18
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bee:	e002      	b.n	8003bf6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c18:	d110      	bne.n	8003c3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f023 0312 	bic.w	r3, r3, #18
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 80df 	bne.w	8003e08 <HAL_ADC_Init+0x2ec>
 8003c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 80da 	bne.w	8003e08 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 80d2 	bne.w	8003e08 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c6c:	f043 0202 	orr.w	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_ADC_Init+0x318>)
 8003c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c80:	d102      	bne.n	8003c88 <HAL_ADC_Init+0x16c>
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <HAL_ADC_Init+0x31c>)
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <HAL_ADC_Init+0x172>
 8003c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c8c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d108      	bne.n	8003cae <HAL_ADC_Init+0x192>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Init+0x192>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_ADC_Init+0x194>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11c      	bne.n	8003cee <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_ADC_Init+0x1ba>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Init+0x1ba>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_ADC_Init+0x1bc>
 8003cd6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7e5b      	ldrb	r3, [r3, #25]
 8003cf2:	035b      	lsls	r3, r3, #13
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf8:	2a01      	cmp	r2, #1
 8003cfa:	d002      	beq.n	8003d02 <HAL_ADC_Init+0x1e6>
 8003cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d00:	e000      	b.n	8003d04 <HAL_ADC_Init+0x1e8>
 8003d02:	2200      	movs	r2, #0
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d14:	4313      	orrs	r3, r2
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11b      	bne.n	8003d5a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7e5b      	ldrb	r3, [r3, #25]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	045a      	lsls	r2, r3, #17
 8003d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3c:	e00d      	b.n	8003d5a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d007      	beq.n	8003d72 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8e:	f023 0302 	bic.w	r3, r3, #2
 8003d92:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7e1b      	ldrb	r3, [r3, #24]
 8003d98:	039a      	lsls	r2, r3, #14
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003da6:	4313      	orrs	r3, r2
 8003da8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_ADC_Init+0x320>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10c      	bne.n	8003de0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f023 010f 	bic.w	r1, r3, #15
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dde:	e007      	b.n	8003df0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 020f 	bic.w	r2, r2, #15
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
 8003e06:	e00a      	b.n	8003e1e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f023 0312 	bic.w	r3, r3, #18
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3768      	adds	r7, #104	; 0x68
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	50000300 	.word	0x50000300
 8003e38:	50000100 	.word	0x50000100
 8003e3c:	fff0c007 	.word	0xfff0c007

08003e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b09b      	sub	sp, #108	; 0x6c
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x22>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e2a1      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x566>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 8285 	bne.w	8004384 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d81c      	bhi.n	8003ebc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	461a      	mov	r2, r3
 8003e96:	231f      	movs	r3, #31
 8003e98:	4093      	lsls	r3, r2
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	4019      	ands	r1, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa00 f203 	lsl.w	r2, r0, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eba:	e063      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b09      	cmp	r3, #9
 8003ec2:	d81e      	bhi.n	8003f02 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	3b1e      	subs	r3, #30
 8003ed8:	221f      	movs	r2, #31
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	4019      	ands	r1, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	3b1e      	subs	r3, #30
 8003ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34
 8003f00:	e040      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b0e      	cmp	r3, #14
 8003f08:	d81e      	bhi.n	8003f48 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	3b3c      	subs	r3, #60	; 0x3c
 8003f1e:	221f      	movs	r2, #31
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	4019      	ands	r1, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4413      	add	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	3b3c      	subs	r3, #60	; 0x3c
 8003f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
 8003f46:	e01d      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	3b5a      	subs	r3, #90	; 0x5a
 8003f5c:	221f      	movs	r2, #31
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	4019      	ands	r1, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	3b5a      	subs	r3, #90	; 0x5a
 8003f78:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80e5 	bne.w	800415e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b09      	cmp	r3, #9
 8003f9a:	d91c      	bls.n	8003fd6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6999      	ldr	r1, [r3, #24]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	3b1e      	subs	r3, #30
 8003fae:	2207      	movs	r2, #7
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	4019      	ands	r1, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6898      	ldr	r0, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b1e      	subs	r3, #30
 8003fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	e019      	b.n	800400a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6959      	ldr	r1, [r3, #20]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4413      	add	r3, r2
 8003fe6:	2207      	movs	r2, #7
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	4019      	ands	r1, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6898      	ldr	r0, [r3, #8]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	3b01      	subs	r3, #1
 8004028:	2b03      	cmp	r3, #3
 800402a:	d84f      	bhi.n	80040cc <HAL_ADC_ConfigChannel+0x28c>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_ADC_ConfigChannel+0x1f4>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004067 	.word	0x08004067
 800403c:	08004089 	.word	0x08004089
 8004040:	080040ab 	.word	0x080040ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800404a:	4b9c      	ldr	r3, [pc, #624]	; (80042bc <HAL_ADC_ConfigChannel+0x47c>)
 800404c:	4013      	ands	r3, r2
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	0691      	lsls	r1, r2, #26
 8004054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004056:	430a      	orrs	r2, r1
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004064:	e07b      	b.n	800415e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800406c:	4b93      	ldr	r3, [pc, #588]	; (80042bc <HAL_ADC_ConfigChannel+0x47c>)
 800406e:	4013      	ands	r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	0691      	lsls	r1, r2, #26
 8004076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004078:	430a      	orrs	r2, r1
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004086:	e06a      	b.n	800415e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800408e:	4b8b      	ldr	r3, [pc, #556]	; (80042bc <HAL_ADC_ConfigChannel+0x47c>)
 8004090:	4013      	ands	r3, r2
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	0691      	lsls	r1, r2, #26
 8004098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800409a:	430a      	orrs	r2, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040a8:	e059      	b.n	800415e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040b0:	4b82      	ldr	r3, [pc, #520]	; (80042bc <HAL_ADC_ConfigChannel+0x47c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	0691      	lsls	r1, r2, #26
 80040ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040bc:	430a      	orrs	r2, r1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040ca:	e048      	b.n	800415e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	069b      	lsls	r3, r3, #26
 80040dc:	429a      	cmp	r2, r3
 80040de:	d107      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	069b      	lsls	r3, r3, #26
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004112:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004136:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	069b      	lsls	r3, r3, #26
 8004148:	429a      	cmp	r2, r3
 800414a:	d107      	bne.n	800415c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800415a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800415c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_ADC_ConfigChannel+0x33e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ADC_ConfigChannel+0x33e>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_ADC_ConfigChannel+0x340>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 810a 	bne.w	800439a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d00f      	beq.n	80041ae <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2201      	movs	r2, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43da      	mvns	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	400a      	ands	r2, r1
 80041a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80041ac:	e049      	b.n	8004242 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	409a      	lsls	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b09      	cmp	r3, #9
 80041ce:	d91c      	bls.n	800420a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	3b1b      	subs	r3, #27
 80041e2:	2207      	movs	r2, #7
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	4019      	ands	r1, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6898      	ldr	r0, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	3b1b      	subs	r3, #27
 80041fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]
 8004208:	e01b      	b.n	8004242 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6959      	ldr	r1, [r3, #20]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	2207      	movs	r2, #7
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	4019      	ands	r1, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6898      	ldr	r0, [r3, #8]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	fa00 f203 	lsl.w	r2, r0, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_ADC_ConfigChannel+0x480>)
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b10      	cmp	r3, #16
 800424c:	d105      	bne.n	800425a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800425e:	2b11      	cmp	r3, #17
 8004260:	d105      	bne.n	800426e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004272:	2b12      	cmp	r3, #18
 8004274:	f040 8091 	bne.w	800439a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 808a 	bne.w	800439a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428e:	d102      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x456>
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_ADC_ConfigChannel+0x484>)
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e002      	b.n	800429c <HAL_ADC_ConfigChannel+0x45c>
 8004296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800429a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10e      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x488>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x488>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e006      	b.n	80042ca <HAL_ADC_ConfigChannel+0x48a>
 80042bc:	83fff000 	.word	0x83fff000
 80042c0:	50000300 	.word	0x50000300
 80042c4:	50000100 	.word	0x50000100
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d150      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042ce:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d107      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x4b0>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x4b0>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x4b2>
 80042f0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13c      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d11d      	bne.n	800433a <HAL_ADC_ConfigChannel+0x4fa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004306:	d118      	bne.n	800433a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004312:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_ADC_ConfigChannel+0x574>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <HAL_ADC_ConfigChannel+0x578>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0c9a      	lsrs	r2, r3, #18
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800432a:	e002      	b.n	8004332 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3b01      	subs	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f9      	bne.n	800432c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004338:	e02e      	b.n	8004398 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b11      	cmp	r3, #17
 8004340:	d10b      	bne.n	800435a <HAL_ADC_ConfigChannel+0x51a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434a:	d106      	bne.n	800435a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800434c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004358:	e01e      	b.n	8004398 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b12      	cmp	r3, #18
 8004360:	d11a      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800436a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800436e:	e013      	b.n	8004398 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004382:	e00a      	b.n	800439a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004396:	e000      	b.n	800439a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004398:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80043a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	376c      	adds	r7, #108	; 0x6c
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000000c 	.word	0x2000000c
 80043b8:	431bde83 	.word	0x431bde83

080043bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80043bc:	b480      	push	{r7}
 80043be:	b099      	sub	sp, #100	; 0x64
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d4:	d102      	bne.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80043d6:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	e002      	b.n	80043e2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80043dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a2      	b.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e09b      	b.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d17f      	bne.n	8004510 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d179      	bne.n	8004510 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800441c:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800441e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d040      	beq.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800443a:	035b      	lsls	r3, r3, #13
 800443c:	430b      	orrs	r3, r1
 800443e:	431a      	orrs	r2, r3
 8004440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004442:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d108      	bne.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d15c      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8004486:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004488:	2b00      	cmp	r3, #0
 800448a:	d14b      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800448c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004494:	f023 030f 	bic.w	r3, r3, #15
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	6811      	ldr	r1, [r2, #0]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	431a      	orrs	r2, r3
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80044a8:	e03c      	b.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d108      	bne.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d123      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80044f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d112      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004506:	f023 030f 	bic.w	r3, r3, #15
 800450a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800450c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800450e:	e009      	b.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004522:	e000      	b.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004524:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800452e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004532:	4618      	mov	r0, r3
 8004534:	3764      	adds	r7, #100	; 0x64
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	50000100 	.word	0x50000100
 8004544:	50000300 	.word	0x50000300

08004548 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <ADC_Disable+0x2c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <ADC_Disable+0x2c>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <ADC_Disable+0x2e>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d047      	beq.n	800460a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030d 	and.w	r3, r3, #13
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10f      	bne.n	80045a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0202 	orr.w	r2, r2, #2
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2203      	movs	r2, #3
 800459e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80045a0:	f7ff fa8c 	bl	8003abc <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045a6:	e029      	b.n	80045fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0210 	orr.w	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e023      	b.n	800460c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045c4:	f7ff fa7a 	bl	8003abc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d914      	bls.n	80045fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10d      	bne.n	80045fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d0dc      	beq.n	80045c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800463c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <__NVIC_GetPriorityGrouping+0x18>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 0307 	and.w	r3, r3, #7
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db0b      	blt.n	80046a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <__NVIC_EnableIRQ+0x38>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2001      	movs	r0, #1
 800469a:	fa00 f202 	lsl.w	r2, r0, r2
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ff4c 	bl	8004614 <__NVIC_SetPriorityGrouping>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004796:	f7ff ff61 	bl	800465c <__NVIC_GetPriorityGrouping>
 800479a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ffb1 	bl	8004708 <NVIC_EncodePriority>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff80 	bl	80046b4 <__NVIC_SetPriority>
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff54 	bl	8004678 <__NVIC_EnableIRQ>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e6:	e14e      	b.n	8004a86 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2101      	movs	r1, #1
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8140 	beq.w	8004a80 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d005      	beq.n	8004818 <HAL_GPIO_Init+0x40>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d130      	bne.n	800487a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	2203      	movs	r2, #3
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800484e:	2201      	movs	r2, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0201 	and.w	r2, r3, #1
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d017      	beq.n	80048b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d123      	bne.n	800490a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	08da      	lsrs	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3208      	adds	r2, #8
 80048ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	220f      	movs	r2, #15
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	6939      	ldr	r1, [r7, #16]
 8004906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0203 	and.w	r2, r3, #3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 809a 	beq.w	8004a80 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494c:	4b55      	ldr	r3, [pc, #340]	; (8004aa4 <HAL_GPIO_Init+0x2cc>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	4a54      	ldr	r2, [pc, #336]	; (8004aa4 <HAL_GPIO_Init+0x2cc>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6193      	str	r3, [r2, #24]
 8004958:	4b52      	ldr	r3, [pc, #328]	; (8004aa4 <HAL_GPIO_Init+0x2cc>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004964:	4a50      	ldr	r2, [pc, #320]	; (8004aa8 <HAL_GPIO_Init+0x2d0>)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	3302      	adds	r3, #2
 800496c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	220f      	movs	r2, #15
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800498e:	d013      	beq.n	80049b8 <HAL_GPIO_Init+0x1e0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a46      	ldr	r2, [pc, #280]	; (8004aac <HAL_GPIO_Init+0x2d4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00d      	beq.n	80049b4 <HAL_GPIO_Init+0x1dc>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a45      	ldr	r2, [pc, #276]	; (8004ab0 <HAL_GPIO_Init+0x2d8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <HAL_GPIO_Init+0x1d8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a44      	ldr	r2, [pc, #272]	; (8004ab4 <HAL_GPIO_Init+0x2dc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_GPIO_Init+0x1d4>
 80049a8:	2303      	movs	r3, #3
 80049aa:	e006      	b.n	80049ba <HAL_GPIO_Init+0x1e2>
 80049ac:	2305      	movs	r3, #5
 80049ae:	e004      	b.n	80049ba <HAL_GPIO_Init+0x1e2>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e002      	b.n	80049ba <HAL_GPIO_Init+0x1e2>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_GPIO_Init+0x1e2>
 80049b8:	2300      	movs	r3, #0
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	f002 0203 	and.w	r2, r2, #3
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4093      	lsls	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ca:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_GPIO_Init+0x2d0>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d8:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049fc:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a02:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a7a:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <HAL_GPIO_Init+0x2e0>)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f aea9 	bne.w	80047e8 <HAL_GPIO_Init+0x10>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	48000400 	.word	0x48000400
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	48000c00 	.word	0x48000c00
 8004ab8:	40010400 	.word	0x40010400

08004abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004acc:	787b      	ldrb	r3, [r7, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ad8:	e002      	b.n	8004ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e081      	b.n	8004c02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fe fce2 	bl	80034dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d107      	bne.n	8004b66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	e006      	b.n	8004b74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d104      	bne.n	8004b86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	817b      	strh	r3, [r7, #10]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	813b      	strh	r3, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	f040 80f9 	bne.w	8004e26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_I2C_Mem_Write+0x34>
 8004c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0ed      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_I2C_Mem_Write+0x4e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0e6      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c62:	f7fe ff2b 	bl	8003abc <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2319      	movs	r3, #25
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fac3 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d1      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2221      	movs	r2, #33	; 0x21
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cac:	88f8      	ldrh	r0, [r7, #6]
 8004cae:	893a      	ldrh	r2, [r7, #8]
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4603      	mov	r3, r0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f9d3 	bl	8005068 <I2C_RequestMemoryWrite>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0a9      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2bff      	cmp	r3, #255	; 0xff
 8004cdc:	d90e      	bls.n	8004cfc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	22ff      	movs	r2, #255	; 0xff
 8004ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	8979      	ldrh	r1, [r7, #10]
 8004cec:	2300      	movs	r3, #0
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fc3d 	bl	8005574 <I2C_TransferConfig>
 8004cfa:	e00f      	b.n	8004d1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	8979      	ldrh	r1, [r7, #10]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fc2c 	bl	8005574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fabc 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e07b      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d034      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x1c8>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d130      	bne.n	8004dd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa3f 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e04d      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2bff      	cmp	r3, #255	; 0xff
 8004d94:	d90e      	bls.n	8004db4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	8979      	ldrh	r1, [r7, #10]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fbe1 	bl	8005574 <I2C_TransferConfig>
 8004db2:	e00f      	b.n	8004dd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fbd0 	bl	8005574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d19e      	bne.n	8004d1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 faa2 	bl	800532c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e01a      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2220      	movs	r2, #32
 8004df8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_I2C_Mem_Write+0x224>)
 8004e06:	400b      	ands	r3, r1
 8004e08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e000      	b.n	8004e28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	fe00e800 	.word	0xfe00e800

08004e34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	817b      	strh	r3, [r7, #10]
 8004e46:	460b      	mov	r3, r1
 8004e48:	813b      	strh	r3, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	f040 80fd 	bne.w	8005056 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_I2C_Mem_Read+0x34>
 8004e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0f1      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2C_Mem_Read+0x4e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0ea      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fe fe17 	bl	8003abc <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2319      	movs	r3, #25
 8004e96:	2201      	movs	r2, #1
 8004e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f9af 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0d5      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2222      	movs	r2, #34	; 0x22
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ed4:	88f8      	ldrh	r0, [r7, #6]
 8004ed6:	893a      	ldrh	r2, [r7, #8]
 8004ed8:	8979      	ldrh	r1, [r7, #10]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f913 	bl	8005110 <I2C_RequestMemoryRead>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0ad      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2bff      	cmp	r3, #255	; 0xff
 8004f04:	d90e      	bls.n	8004f24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	8979      	ldrh	r1, [r7, #10]
 8004f14:	4b52      	ldr	r3, [pc, #328]	; (8005060 <HAL_I2C_Mem_Read+0x22c>)
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fb29 	bl	8005574 <I2C_TransferConfig>
 8004f22:	e00f      	b.n	8004f44 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	8979      	ldrh	r1, [r7, #10]
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_I2C_Mem_Read+0x22c>)
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fb18 	bl	8005574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f956 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07c      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d034      	beq.n	8005004 <HAL_I2C_Mem_Read+0x1d0>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d130      	bne.n	8005004 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f927 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e04d      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2bff      	cmp	r3, #255	; 0xff
 8004fc4:	d90e      	bls.n	8004fe4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	22ff      	movs	r2, #255	; 0xff
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	8979      	ldrh	r1, [r7, #10]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fac9 	bl	8005574 <I2C_TransferConfig>
 8004fe2:	e00f      	b.n	8005004 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	8979      	ldrh	r1, [r7, #10]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fab8 	bl	8005574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d19a      	bne.n	8004f44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f98a 	bl	800532c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e01a      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2220      	movs	r2, #32
 8005028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_I2C_Mem_Read+0x230>)
 8005036:	400b      	ands	r3, r1
 8005038:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
  }
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	80002400 	.word	0x80002400
 8005064:	fe00e800 	.word	0xfe00e800

08005068 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	4603      	mov	r3, r0
 8005078:	817b      	strh	r3, [r7, #10]
 800507a:	460b      	mov	r3, r1
 800507c:	813b      	strh	r3, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	8979      	ldrh	r1, [r7, #10]
 8005088:	4b20      	ldr	r3, [pc, #128]	; (800510c <I2C_RequestMemoryWrite+0xa4>)
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fa6f 	bl	8005574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f8ff 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e02c      	b.n	8005104 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050b0:	893b      	ldrh	r3, [r7, #8]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
 80050ba:	e015      	b.n	80050e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050bc:	893b      	ldrh	r3, [r7, #8]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f8e5 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e012      	b.n	8005104 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050de:	893b      	ldrh	r3, [r7, #8]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2200      	movs	r2, #0
 80050f0:	2180      	movs	r1, #128	; 0x80
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f884 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	80002000 	.word	0x80002000

08005110 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	461a      	mov	r2, r3
 800511e:	4603      	mov	r3, r0
 8005120:	817b      	strh	r3, [r7, #10]
 8005122:	460b      	mov	r3, r1
 8005124:	813b      	strh	r3, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	8979      	ldrh	r1, [r7, #10]
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <I2C_RequestMemoryRead+0xa4>)
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa1c 	bl	8005574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	69b9      	ldr	r1, [r7, #24]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f8ac 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e02c      	b.n	80051aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005156:	893b      	ldrh	r3, [r7, #8]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
 8005160:	e015      	b.n	800518e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005162:	893b      	ldrh	r3, [r7, #8]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	b29b      	uxth	r3, r3
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f892 	bl	800529e <I2C_WaitOnTXISFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e012      	b.n	80051aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2200      	movs	r2, #0
 8005196:	2140      	movs	r1, #64	; 0x40
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f831 	bl	8005200 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	80002000 	.word	0x80002000

080051b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d007      	beq.n	80051f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	619a      	str	r2, [r3, #24]
  }
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005210:	e031      	b.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d02d      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fe fc4f 	bl	8003abc <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d122      	bne.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	429a      	cmp	r2, r3
 800524c:	d113      	bne.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e00f      	b.n	8005296 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	429a      	cmp	r2, r3
 8005292:	d0be      	beq.n	8005212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052aa:	e033      	b.n	8005314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f87f 	bl	80053b4 <I2C_IsErrorOccurred>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e031      	b.n	8005324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d025      	beq.n	8005314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c8:	f7fe fbf8 	bl	8003abc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11a      	bne.n	8005314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d013      	beq.n	8005314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e007      	b.n	8005324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d1c4      	bne.n	80052ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005338:	e02f      	b.n	800539a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f838 	bl	80053b4 <I2C_IsErrorOccurred>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e02d      	b.n	80053aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe fbb5 	bl	8003abc <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11a      	bne.n	800539a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b20      	cmp	r3, #32
 8005370:	d013      	beq.n	800539a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e007      	b.n	80053aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d1c8      	bne.n	800533a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d068      	beq.n	80054b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2210      	movs	r2, #16
 80053e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053e8:	e049      	b.n	800547e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d045      	beq.n	800547e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fe fb63 	bl	8003abc <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <I2C_IsErrorOccurred+0x54>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d13a      	bne.n	800547e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800541a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d121      	bne.n	8005470 <I2C_IsErrorOccurred+0xbc>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005432:	d01d      	beq.n	8005470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	2b20      	cmp	r3, #32
 8005438:	d01a      	beq.n	8005470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800544a:	f7fe fb37 	bl	8003abc <HAL_GetTick>
 800544e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005450:	e00e      	b.n	8005470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005452:	f7fe fb33 	bl	8003abc <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b19      	cmp	r3, #25
 800545e:	d907      	bls.n	8005470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	f043 0320 	orr.w	r3, r3, #32
 8005466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800546e:	e006      	b.n	800547e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d1e9      	bne.n	8005452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b20      	cmp	r3, #32
 800548a:	d003      	beq.n	8005494 <I2C_IsErrorOccurred+0xe0>
 800548c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0aa      	beq.n	80053ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005498:	2b00      	cmp	r3, #0
 800549a:	d103      	bne.n	80054a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2220      	movs	r2, #32
 80054a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f043 0304 	orr.w	r3, r3, #4
 80054aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f043 0302 	orr.w	r3, r3, #2
 800550e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01c      	beq.n	8005562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff fe45 	bl	80051b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6859      	ldr	r1, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <I2C_IsErrorOccurred+0x1bc>)
 800553a:	400b      	ands	r3, r1
 800553c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005566:	4618      	mov	r0, r3
 8005568:	3728      	adds	r7, #40	; 0x28
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	fe00e800 	.word	0xfe00e800

08005574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	4613      	mov	r3, r2
 8005584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800558c:	7a7b      	ldrb	r3, [r7, #9]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	4313      	orrs	r3, r2
 800559e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	0d5b      	lsrs	r3, r3, #21
 80055ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <I2C_TransferConfig+0x60>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	43db      	mvns	r3, r3
 80055b8:	ea02 0103 	and.w	r1, r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	03ff63ff 	.word	0x03ff63ff

080055d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d138      	bne.n	8005660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e032      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800562a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d139      	bne.n	80056f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800568e:	2302      	movs	r3, #2
 8005690:	e033      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800570e:	af00      	add	r7, sp, #0
 8005710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005718:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f001 b823 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 817d 	beq.w	8005a3e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005744:	4bbc      	ldr	r3, [pc, #752]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b04      	cmp	r3, #4
 800574e:	d00c      	beq.n	800576a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005750:	4bb9      	ldr	r3, [pc, #740]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b08      	cmp	r3, #8
 800575a:	d15c      	bne.n	8005816 <HAL_RCC_OscConfig+0x10e>
 800575c:	4bb6      	ldr	r3, [pc, #728]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d155      	bne.n	8005816 <HAL_RCC_OscConfig+0x10e>
 800576a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800576e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800577e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005782:	fab3 f383 	clz	r3, r3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d102      	bne.n	800579c <HAL_RCC_OscConfig+0x94>
 8005796:	4ba8      	ldr	r3, [pc, #672]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	e015      	b.n	80057c8 <HAL_RCC_OscConfig+0xc0>
 800579c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80057b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80057b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80057c4:	4b9c      	ldr	r3, [pc, #624]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80057d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80057d4:	fa92 f2a2 	rbit	r2, r2
 80057d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80057dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80057e0:	fab2 f282 	clz	r2, r2
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	f042 0220 	orr.w	r2, r2, #32
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	f002 021f 	and.w	r2, r2, #31
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f202 	lsl.w	r2, r1, r2
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 811f 	beq.w	8005a3c <HAL_RCC_OscConfig+0x334>
 80057fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 8116 	bne.w	8005a3c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f000 bfaf 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005826:	d106      	bne.n	8005836 <HAL_RCC_OscConfig+0x12e>
 8005828:	4b83      	ldr	r3, [pc, #524]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a82      	ldr	r2, [pc, #520]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e036      	b.n	80058a4 <HAL_RCC_OscConfig+0x19c>
 8005836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0x158>
 8005846:	4b7c      	ldr	r3, [pc, #496]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a7b      	ldr	r2, [pc, #492]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800584c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a78      	ldr	r2, [pc, #480]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e021      	b.n	80058a4 <HAL_RCC_OscConfig+0x19c>
 8005860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0x184>
 8005872:	4b71      	ldr	r3, [pc, #452]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a70      	ldr	r2, [pc, #448]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	4b6e      	ldr	r3, [pc, #440]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6d      	ldr	r2, [pc, #436]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e00b      	b.n	80058a4 <HAL_RCC_OscConfig+0x19c>
 800588c:	4b6a      	ldr	r3, [pc, #424]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a69      	ldr	r2, [pc, #420]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b67      	ldr	r3, [pc, #412]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a66      	ldr	r2, [pc, #408]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800589e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058a4:	4b64      	ldr	r3, [pc, #400]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	f023 020f 	bic.w	r2, r3, #15
 80058ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	495f      	ldr	r1, [pc, #380]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d059      	beq.n	8005982 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fe f8f5 	bl	8003abc <HAL_GetTick>
 80058d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d6:	e00a      	b.n	80058ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d8:	f7fe f8f0 	bl	8003abc <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d902      	bls.n	80058ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	f000 bf43 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 80058ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80058fa:	fa93 f3a3 	rbit	r3, r3
 80058fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005902:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d102      	bne.n	8005920 <HAL_RCC_OscConfig+0x218>
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	e015      	b.n	800594c <HAL_RCC_OscConfig+0x244>
 8005920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005924:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005938:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800593c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005948:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005950:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005954:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005958:	fa92 f2a2 	rbit	r2, r2
 800595c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005960:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0220 	orr.w	r2, r2, #32
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ab      	beq.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
 8005980:	e05d      	b.n	8005a3e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fe f89b 	bl	8003abc <HAL_GetTick>
 8005986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800598c:	f7fe f896 	bl	8003abc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b64      	cmp	r3, #100	; 0x64
 800599a:	d902      	bls.n	80059a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	f000 bee9 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 80059a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80059b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d102      	bne.n	80059d4 <HAL_RCC_OscConfig+0x2cc>
 80059ce:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	e015      	b.n	8005a00 <HAL_RCC_OscConfig+0x2f8>
 80059d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80059e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80059f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80059f4:	fa93 f3a3 	rbit	r3, r3
 80059f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <HAL_RCC_OscConfig+0x330>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a04:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005a08:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005a0c:	fa92 f2a2 	rbit	r2, r2
 8005a10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005a14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005a18:	fab2 f282 	clz	r2, r2
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	f042 0220 	orr.w	r2, r2, #32
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	f002 021f 	and.w	r2, r2, #31
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1ab      	bne.n	800598c <HAL_RCC_OscConfig+0x284>
 8005a34:	e003      	b.n	8005a3e <HAL_RCC_OscConfig+0x336>
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 817d 	beq.w	8005d4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a54:	4ba6      	ldr	r3, [pc, #664]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a60:	4ba3      	ldr	r3, [pc, #652]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d172      	bne.n	8005b52 <HAL_RCC_OscConfig+0x44a>
 8005a6c:	4ba0      	ldr	r3, [pc, #640]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d16c      	bne.n	8005b52 <HAL_RCC_OscConfig+0x44a>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005a8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8e:	fab3 f383 	clz	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d102      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x3a0>
 8005aa2:	4b93      	ldr	r3, [pc, #588]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	e013      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3c8>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005aba:	2302      	movs	r3, #2
 8005abc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005ac0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005acc:	4b88      	ldr	r3, [pc, #544]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005ad6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005ada:	fa92 f2a2 	rbit	r2, r2
 8005ade:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005ae2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005ae6:	fab2 f282 	clz	r2, r2
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	f042 0220 	orr.w	r2, r2, #32
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f002 021f 	and.w	r2, r2, #31
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f202 	lsl.w	r2, r1, r2
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCC_OscConfig+0x410>
 8005b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d002      	beq.n	8005b18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f000 be2e 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b18:	4b75      	ldr	r3, [pc, #468]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	21f8      	movs	r1, #248	; 0xf8
 8005b2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005b36:	fa91 f1a1 	rbit	r1, r1
 8005b3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005b3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005b42:	fab1 f181 	clz	r1, r1
 8005b46:	b2c9      	uxtb	r1, r1
 8005b48:	408b      	lsls	r3, r1
 8005b4a:	4969      	ldr	r1, [pc, #420]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b50:	e0fd      	b.n	8005d4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8088 	beq.w	8005c74 <HAL_RCC_OscConfig+0x56c>
 8005b64:	2301      	movs	r3, #1
 8005b66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b6e:	fa93 f3a3 	rbit	r3, r3
 8005b72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005b76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fd ff94 	bl	8003abc <HAL_GetTick>
 8005b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fd ff8f 	bl	8003abc <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d902      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	f000 bde2 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005bc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc6:	fab3 f383 	clz	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d102      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4d8>
 8005bda:	4b45      	ldr	r3, [pc, #276]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	e013      	b.n	8005c08 <HAL_RCC_OscConfig+0x500>
 8005be0:	2302      	movs	r3, #2
 8005be2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005bf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005c04:	4b3a      	ldr	r3, [pc, #232]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005c0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005c12:	fa92 f2a2 	rbit	r2, r2
 8005c16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005c1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005c1e:	fab2 f282 	clz	r2, r2
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	f042 0220 	orr.w	r2, r2, #32
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	f002 021f 	and.w	r2, r2, #31
 8005c2e:	2101      	movs	r1, #1
 8005c30:	fa01 f202 	lsl.w	r2, r1, r2
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0af      	beq.n	8005b9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3a:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	21f8      	movs	r1, #248	; 0xf8
 8005c50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005c58:	fa91 f1a1 	rbit	r1, r1
 8005c5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005c60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005c64:	fab1 f181 	clz	r1, r1
 8005c68:	b2c9      	uxtb	r1, r1
 8005c6a:	408b      	lsls	r3, r1
 8005c6c:	4920      	ldr	r1, [pc, #128]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
 8005c72:	e06c      	b.n	8005d4e <HAL_RCC_OscConfig+0x646>
 8005c74:	2301      	movs	r3, #1
 8005c76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fd ff0c 	bl	8003abc <HAL_GetTick>
 8005ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fd ff07 	bl	8003abc <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d902      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f000 bd5a 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005cca:	fa93 f3a3 	rbit	r3, r3
 8005cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d104      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5ec>
 8005cea:	4b01      	ldr	r3, [pc, #4]	; (8005cf0 <HAL_RCC_OscConfig+0x5e8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	e015      	b.n	8005d1c <HAL_RCC_OscConfig+0x614>
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cfe:	fa93 f3a3 	rbit	r3, r3
 8005d02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d06:	2302      	movs	r3, #2
 8005d08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d18:	4bc8      	ldr	r3, [pc, #800]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005d22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005d26:	fa92 f2a2 	rbit	r2, r2
 8005d2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005d2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d32:	fab2 f282 	clz	r2, r2
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	f042 0220 	orr.w	r2, r2, #32
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	f002 021f 	and.w	r2, r2, #31
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f202 	lsl.w	r2, r1, r2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ad      	bne.n	8005caa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8110 	beq.w	8005f84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d079      	beq.n	8005e68 <HAL_RCC_OscConfig+0x760>
 8005d74:	2301      	movs	r3, #1
 8005d76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d7e:	fa93 f3a3 	rbit	r3, r3
 8005d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8a:	fab3 f383 	clz	r3, r3
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	4bab      	ldr	r3, [pc, #684]	; (8006040 <HAL_RCC_OscConfig+0x938>)
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9e:	f7fd fe8d 	bl	8003abc <HAL_GetTick>
 8005da2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da8:	f7fd fe88 	bl	8003abc <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d902      	bls.n	8005dbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	f000 bcdb 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc8:	fa93 f3a3 	rbit	r3, r3
 8005dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005dd8:	2202      	movs	r2, #2
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	fa93 f2a3 	rbit	r2, r3
 8005dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	fa93 f2a3 	rbit	r2, r3
 8005e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e18:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e24:	2102      	movs	r1, #2
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	fa93 f1a3 	rbit	r1, r3
 8005e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e3e:	6019      	str	r1, [r3, #0]
  return result;
 8005e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0a0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x6a0>
 8005e66:	e08d      	b.n	8005f84 <HAL_RCC_OscConfig+0x87c>
 8005e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	fa93 f2a3 	rbit	r2, r3
 8005e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e8a:	601a      	str	r2, [r3, #0]
  return result;
 8005e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b68      	ldr	r3, [pc, #416]	; (8006040 <HAL_RCC_OscConfig+0x938>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eaa:	f7fd fe07 	bl	8003abc <HAL_GetTick>
 8005eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb4:	f7fd fe02 	bl	8003abc <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d902      	bls.n	8005eca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	f000 bc55 	b.w	8006774 <HAL_RCC_OscConfig+0x106c>
 8005eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ece:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	fa93 f2a3 	rbit	r2, r3
 8005ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	fa93 f2a3 	rbit	r2, r3
 8005f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	fa93 f2a3 	rbit	r2, r3
 8005f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f42:	2102      	movs	r1, #2
 8005f44:	6019      	str	r1, [r3, #0]
 8005f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	fa93 f1a3 	rbit	r1, r3
 8005f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f5c:	6019      	str	r1, [r3, #0]
  return result;
 8005f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2101      	movs	r1, #1
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d197      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 81a1 	beq.w	80062dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa0:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d116      	bne.n	8005fda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fac:	4b23      	ldr	r3, [pc, #140]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	61d3      	str	r3, [r2, #28]
 8005fb8:	4b20      	ldr	r3, [pc, #128]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005fd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <HAL_RCC_OscConfig+0x93c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11a      	bne.n	800601c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe6:	4b17      	ldr	r3, [pc, #92]	; (8006044 <HAL_RCC_OscConfig+0x93c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a16      	ldr	r2, [pc, #88]	; (8006044 <HAL_RCC_OscConfig+0x93c>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fd fd63 	bl	8003abc <HAL_GetTick>
 8005ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffa:	e009      	b.n	8006010 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffc:	f7fd fd5e 	bl	8003abc <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	; 0x64
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e3b1      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_RCC_OscConfig+0x93c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10d      	bne.n	8006048 <HAL_RCC_OscConfig+0x940>
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <HAL_RCC_OscConfig+0x934>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	4a02      	ldr	r2, [pc, #8]	; (800603c <HAL_RCC_OscConfig+0x934>)
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	6213      	str	r3, [r2, #32]
 8006038:	e03c      	b.n	80060b4 <HAL_RCC_OscConfig+0x9ac>
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000
 8006040:	10908120 	.word	0x10908120
 8006044:	40007000 	.word	0x40007000
 8006048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <HAL_RCC_OscConfig+0x96a>
 8006058:	4bc1      	ldr	r3, [pc, #772]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	4ac0      	ldr	r2, [pc, #768]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	6213      	str	r3, [r2, #32]
 8006064:	4bbe      	ldr	r3, [pc, #760]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	4abd      	ldr	r2, [pc, #756]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800606a:	f023 0304 	bic.w	r3, r3, #4
 800606e:	6213      	str	r3, [r2, #32]
 8006070:	e020      	b.n	80060b4 <HAL_RCC_OscConfig+0x9ac>
 8006072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0x994>
 8006082:	4bb7      	ldr	r3, [pc, #732]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4ab6      	ldr	r2, [pc, #728]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	6213      	str	r3, [r2, #32]
 800608e:	4bb4      	ldr	r3, [pc, #720]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	4ab3      	ldr	r2, [pc, #716]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6213      	str	r3, [r2, #32]
 800609a:	e00b      	b.n	80060b4 <HAL_RCC_OscConfig+0x9ac>
 800609c:	4bb0      	ldr	r3, [pc, #704]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	4aaf      	ldr	r2, [pc, #700]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	6213      	str	r3, [r2, #32]
 80060a8:	4bad      	ldr	r3, [pc, #692]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	4aac      	ldr	r2, [pc, #688]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80060ae:	f023 0304 	bic.w	r3, r3, #4
 80060b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8081 	beq.w	80061c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c6:	f7fd fcf9 	bl	8003abc <HAL_GetTick>
 80060ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ce:	e00b      	b.n	80060e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d0:	f7fd fcf4 	bl	8003abc <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e345      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
 80060e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80060f0:	2202      	movs	r2, #2
 80060f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	fa93 f2a3 	rbit	r2, r3
 8006102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006106:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006110:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006114:	2202      	movs	r2, #2
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800611c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	fa93 f2a3 	rbit	r2, r3
 8006126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800612e:	601a      	str	r2, [r3, #0]
  return result;
 8006130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006134:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006138:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f043 0302 	orr.w	r3, r3, #2
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d102      	bne.n	8006154 <HAL_RCC_OscConfig+0xa4c>
 800614e:	4b84      	ldr	r3, [pc, #528]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	e013      	b.n	800617c <HAL_RCC_OscConfig+0xa74>
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800615c:	2202      	movs	r2, #2
 800615e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006164:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	fa93 f2a3 	rbit	r2, r3
 800616e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006172:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	4b79      	ldr	r3, [pc, #484]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006180:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006184:	2102      	movs	r1, #2
 8006186:	6011      	str	r1, [r2, #0]
 8006188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800618c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	fa92 f1a2 	rbit	r1, r2
 8006196:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800619a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800619e:	6011      	str	r1, [r2, #0]
  return result;
 80061a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	fab2 f282 	clz	r2, r2
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f002 021f 	and.w	r2, r2, #31
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d084      	beq.n	80060d0 <HAL_RCC_OscConfig+0x9c8>
 80061c6:	e07f      	b.n	80062c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c8:	f7fd fc78 	bl	8003abc <HAL_GetTick>
 80061cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d0:	e00b      	b.n	80061ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fd fc73 	bl	8003abc <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e2c4      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
 80061ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80061f2:	2202      	movs	r2, #2
 80061f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	fa93 f2a3 	rbit	r2, r3
 8006204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006208:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006212:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006216:	2202      	movs	r2, #2
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	fa93 f2a3 	rbit	r2, r3
 8006228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006230:	601a      	str	r2, [r3, #0]
  return result;
 8006232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006236:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800623a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623c:	fab3 f383 	clz	r3, r3
 8006240:	b2db      	uxtb	r3, r3
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f043 0302 	orr.w	r3, r3, #2
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d102      	bne.n	8006256 <HAL_RCC_OscConfig+0xb4e>
 8006250:	4b43      	ldr	r3, [pc, #268]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	e013      	b.n	800627e <HAL_RCC_OscConfig+0xb76>
 8006256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800625a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800625e:	2202      	movs	r2, #2
 8006260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006266:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	fa93 f2a3 	rbit	r2, r3
 8006270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006274:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	4b39      	ldr	r3, [pc, #228]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006282:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006286:	2102      	movs	r1, #2
 8006288:	6011      	str	r1, [r2, #0]
 800628a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800628e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	fa92 f1a2 	rbit	r1, r2
 8006298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800629c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80062a0:	6011      	str	r1, [r2, #0]
  return result;
 80062a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	fab2 f282 	clz	r2, r2
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	f002 021f 	and.w	r2, r2, #31
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f202 	lsl.w	r2, r1, r2
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d184      	bne.n	80061d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d0:	4b23      	ldr	r3, [pc, #140]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	4a22      	ldr	r2, [pc, #136]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80062d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8242 	beq.w	8006772 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <HAL_RCC_OscConfig+0xc58>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	f000 8213 	beq.w	8006722 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006300:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	2b02      	cmp	r3, #2
 800630a:	f040 8162 	bne.w	80065d2 <HAL_RCC_OscConfig+0xeca>
 800630e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006312:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800631a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006320:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	fa93 f2a3 	rbit	r2, r3
 800632a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800632e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006332:	601a      	str	r2, [r3, #0]
  return result;
 8006334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006338:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800633c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633e:	fab3 f383 	clz	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	461a      	mov	r2, r3
 8006350:	2300      	movs	r3, #0
 8006352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fd fbb2 	bl	8003abc <HAL_GetTick>
 8006358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800635c:	e00c      	b.n	8006378 <HAL_RCC_OscConfig+0xc70>
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006364:	f7fd fbaa 	bl	8003abc <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e1fd      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
 8006378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800638a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	fa93 f2a3 	rbit	r2, r3
 8006394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006398:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800639c:	601a      	str	r2, [r3, #0]
  return result;
 800639e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80063a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a8:	fab3 f383 	clz	r3, r3
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d102      	bne.n	80063c2 <HAL_RCC_OscConfig+0xcba>
 80063bc:	4bb0      	ldr	r3, [pc, #704]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	e027      	b.n	8006412 <HAL_RCC_OscConfig+0xd0a>
 80063c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80063ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	fa93 f2a3 	rbit	r2, r3
 80063de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80063f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	fa93 f2a3 	rbit	r2, r3
 8006404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006408:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	4b9c      	ldr	r3, [pc, #624]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006416:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800641a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800641e:	6011      	str	r1, [r2, #0]
 8006420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006424:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	fa92 f1a2 	rbit	r1, r2
 800642e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006432:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006436:	6011      	str	r1, [r2, #0]
  return result;
 8006438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800643c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	fab2 f282 	clz	r2, r2
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	f042 0220 	orr.w	r2, r2, #32
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	f002 021f 	and.w	r2, r2, #31
 8006452:	2101      	movs	r1, #1
 8006454:	fa01 f202 	lsl.w	r2, r1, r2
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d182      	bne.n	8006364 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800645e:	4b88      	ldr	r3, [pc, #544]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800646a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	430b      	orrs	r3, r1
 8006480:	497f      	ldr	r1, [pc, #508]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
 8006486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800648a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800648e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006498:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	fa93 f2a3 	rbit	r2, r3
 80064a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80064aa:	601a      	str	r2, [r3, #0]
  return result;
 80064ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80064b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b6:	fab3 f383 	clz	r3, r3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	461a      	mov	r2, r3
 80064c8:	2301      	movs	r3, #1
 80064ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064cc:	f7fd faf6 	bl	8003abc <HAL_GetTick>
 80064d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064d4:	e009      	b.n	80064ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d6:	f7fd faf1 	bl	8003abc <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e144      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
 80064ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80064f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	fa93 f2a3 	rbit	r2, r3
 8006506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800650a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800650e:	601a      	str	r2, [r3, #0]
  return result;
 8006510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006514:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006518:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800651a:	fab3 f383 	clz	r3, r3
 800651e:	b2db      	uxtb	r3, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d102      	bne.n	8006534 <HAL_RCC_OscConfig+0xe2c>
 800652e:	4b54      	ldr	r3, [pc, #336]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	e027      	b.n	8006584 <HAL_RCC_OscConfig+0xe7c>
 8006534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006538:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800653c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006546:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	fa93 f2a3 	rbit	r2, r3
 8006550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006554:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800656c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	fa93 f2a3 	rbit	r2, r3
 8006576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800657a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	4b3f      	ldr	r3, [pc, #252]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006588:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800658c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006596:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	fa92 f1a2 	rbit	r1, r2
 80065a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80065a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80065a8:	6011      	str	r1, [r2, #0]
  return result;
 80065aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80065ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	fab2 f282 	clz	r2, r2
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	f042 0220 	orr.w	r2, r2, #32
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	f002 021f 	and.w	r2, r2, #31
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f202 	lsl.w	r2, r1, r2
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d082      	beq.n	80064d6 <HAL_RCC_OscConfig+0xdce>
 80065d0:	e0cf      	b.n	8006772 <HAL_RCC_OscConfig+0x106a>
 80065d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80065da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	fa93 f2a3 	rbit	r2, r3
 80065ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80065f6:	601a      	str	r2, [r3, #0]
  return result;
 80065f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006600:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006602:	fab3 f383 	clz	r3, r3
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800660c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	461a      	mov	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fd fa50 	bl	8003abc <HAL_GetTick>
 800661c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006620:	e009      	b.n	8006636 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006622:	f7fd fa4b 	bl	8003abc <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e09e      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
 8006636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800663e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006648:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	fa93 f2a3 	rbit	r2, r3
 8006652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006656:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800665a:	601a      	str	r2, [r3, #0]
  return result;
 800665c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006660:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006666:	fab3 f383 	clz	r3, r3
 800666a:	b2db      	uxtb	r3, r3
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d104      	bne.n	8006684 <HAL_RCC_OscConfig+0xf7c>
 800667a:	4b01      	ldr	r3, [pc, #4]	; (8006680 <HAL_RCC_OscConfig+0xf78>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	e029      	b.n	80066d4 <HAL_RCC_OscConfig+0xfcc>
 8006680:	40021000 	.word	0x40021000
 8006684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006688:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800668c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006696:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	fa93 f2a3 	rbit	r2, r3
 80066a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80066b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	fa93 f2a3 	rbit	r2, r3
 80066c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <HAL_RCC_OscConfig+0x1078>)
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80066dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	fa92 f1a2 	rbit	r1, r2
 80066f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80066f8:	6011      	str	r1, [r2, #0]
  return result;
 80066fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	fab2 f282 	clz	r2, r2
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	f042 0220 	orr.w	r2, r2, #32
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	f002 021f 	and.w	r2, r2, #31
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f202 	lsl.w	r2, r1, r2
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d180      	bne.n	8006622 <HAL_RCC_OscConfig+0xf1a>
 8006720:	e027      	b.n	8006772 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e01e      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006736:	4b12      	ldr	r3, [pc, #72]	; (8006780 <HAL_RCC_OscConfig+0x1078>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800673e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006742:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800674a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	429a      	cmp	r2, r3
 8006754:	d10b      	bne.n	800676e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006756:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800675a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800675e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800676a:	429a      	cmp	r2, r3
 800676c:	d001      	beq.n	8006772 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000

08006784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b09e      	sub	sp, #120	; 0x78
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e162      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800679c:	4b90      	ldr	r3, [pc, #576]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d910      	bls.n	80067cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b8d      	ldr	r3, [pc, #564]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 0207 	bic.w	r2, r3, #7
 80067b2:	498b      	ldr	r1, [pc, #556]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ba:	4b89      	ldr	r3, [pc, #548]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e14a      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d8:	4b82      	ldr	r3, [pc, #520]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	497f      	ldr	r1, [pc, #508]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80dc 	beq.w	80069b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d13c      	bne.n	800687a <HAL_RCC_ClockConfig+0xf6>
 8006800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006804:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800680e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006810:	fab3 f383 	clz	r3, r3
 8006814:	b2db      	uxtb	r3, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d102      	bne.n	800682a <HAL_RCC_ClockConfig+0xa6>
 8006824:	4b6f      	ldr	r3, [pc, #444]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	e00f      	b.n	800684a <HAL_RCC_ClockConfig+0xc6>
 800682a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800682e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006832:	fa93 f3a3 	rbit	r3, r3
 8006836:	667b      	str	r3, [r7, #100]	; 0x64
 8006838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800683c:	663b      	str	r3, [r7, #96]	; 0x60
 800683e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006840:	fa93 f3a3 	rbit	r3, r3
 8006844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006846:	4b67      	ldr	r3, [pc, #412]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800684e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006852:	fa92 f2a2 	rbit	r2, r2
 8006856:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800685a:	fab2 f282 	clz	r2, r2
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	f042 0220 	orr.w	r2, r2, #32
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	f002 021f 	and.w	r2, r2, #31
 800686a:	2101      	movs	r1, #1
 800686c:	fa01 f202 	lsl.w	r2, r1, r2
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d17b      	bne.n	800696e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e0f3      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d13c      	bne.n	80068fc <HAL_RCC_ClockConfig+0x178>
 8006882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006886:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688a:	fa93 f3a3 	rbit	r3, r3
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006892:	fab3 f383 	clz	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <HAL_RCC_ClockConfig+0x128>
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	e00f      	b.n	80068cc <HAL_RCC_ClockConfig+0x148>
 80068ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	fa93 f3a3 	rbit	r3, r3
 80068b8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068be:	643b      	str	r3, [r7, #64]	; 0x40
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	fa93 f3a3 	rbit	r3, r3
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80068d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d4:	fa92 f2a2 	rbit	r2, r2
 80068d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80068da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068dc:	fab2 f282 	clz	r2, r2
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	f042 0220 	orr.w	r2, r2, #32
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	f002 021f 	and.w	r2, r2, #31
 80068ec:	2101      	movs	r1, #1
 80068ee:	fa01 f202 	lsl.w	r2, r1, r2
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d13a      	bne.n	800696e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0b2      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
 80068fc:	2302      	movs	r3, #2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690a:	fab3 f383 	clz	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d102      	bne.n	8006924 <HAL_RCC_ClockConfig+0x1a0>
 800691e:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	e00d      	b.n	8006940 <HAL_RCC_ClockConfig+0x1bc>
 8006924:	2302      	movs	r3, #2
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	fa93 f3a3 	rbit	r3, r3
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
 8006930:	2302      	movs	r3, #2
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	fa93 f3a3 	rbit	r3, r3
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	4b29      	ldr	r3, [pc, #164]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2202      	movs	r2, #2
 8006942:	61ba      	str	r2, [r7, #24]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	fa92 f2a2 	rbit	r2, r2
 800694a:	617a      	str	r2, [r7, #20]
  return result;
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	fab2 f282 	clz	r2, r2
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	f042 0220 	orr.w	r2, r2, #32
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f002 021f 	and.w	r2, r2, #31
 800695e:	2101      	movs	r1, #1
 8006960:	fa01 f202 	lsl.w	r2, r1, r2
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e079      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f023 0203 	bic.w	r2, r3, #3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	491a      	ldr	r1, [pc, #104]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006980:	f7fd f89c 	bl	8003abc <HAL_GetTick>
 8006984:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fd f898 	bl	8003abc <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e061      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <HAL_RCC_ClockConfig+0x260>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f003 020c 	and.w	r2, r3, #12
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d1eb      	bne.n	8006988 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d214      	bcs.n	80069e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 0207 	bic.w	r2, r3, #7
 80069c6:	4906      	ldr	r1, [pc, #24]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <HAL_RCC_ClockConfig+0x25c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e040      	b.n	8006a62 <HAL_RCC_ClockConfig+0x2de>
 80069e0:	40022000 	.word	0x40022000
 80069e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f4:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <HAL_RCC_ClockConfig+0x2e8>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	491a      	ldr	r1, [pc, #104]	; (8006a6c <HAL_RCC_ClockConfig+0x2e8>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a12:	4b16      	ldr	r3, [pc, #88]	; (8006a6c <HAL_RCC_ClockConfig+0x2e8>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4912      	ldr	r1, [pc, #72]	; (8006a6c <HAL_RCC_ClockConfig+0x2e8>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a26:	f000 f829 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <HAL_RCC_ClockConfig+0x2e8>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a34:	22f0      	movs	r2, #240	; 0xf0
 8006a36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	fa92 f2a2 	rbit	r2, r2
 8006a3e:	60fa      	str	r2, [r7, #12]
  return result;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	fab2 f282 	clz	r2, r2
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	40d3      	lsrs	r3, r2
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <HAL_RCC_ClockConfig+0x2ec>)
 8006a4c:	5cd3      	ldrb	r3, [r2, r3]
 8006a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8006a52:	4a08      	ldr	r2, [pc, #32]	; (8006a74 <HAL_RCC_ClockConfig+0x2f0>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006a56:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <HAL_RCC_ClockConfig+0x2f4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fc fe3e 	bl	80036dc <HAL_InitTick>
  
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3778      	adds	r7, #120	; 0x78
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800db94 	.word	0x0800db94
 8006a74:	2000000c 	.word	0x2000000c
 8006a78:	20000010 	.word	0x20000010

08006a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b08b      	sub	sp, #44	; 0x2c
 8006a80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006a96:	4b29      	ldr	r3, [pc, #164]	; (8006b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d002      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x30>
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8006aaa:	e03c      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006aac:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006aae:	623b      	str	r3, [r7, #32]
      break;
 8006ab0:	e03c      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ab8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006abc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	fa92 f2a2 	rbit	r2, r2
 8006ac4:	607a      	str	r2, [r7, #4]
  return result;
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	fab2 f282 	clz	r2, r2
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	40d3      	lsrs	r3, r2
 8006ad0:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	220f      	movs	r2, #15
 8006ae0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	fa92 f2a2 	rbit	r2, r2
 8006ae8:	60fa      	str	r2, [r7, #12]
  return result;
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	fab2 f282 	clz	r2, r2
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	40d3      	lsrs	r3, r2
 8006af4:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b04:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	e004      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	623b      	str	r3, [r7, #32]
      break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006b28:	623b      	str	r3, [r7, #32]
      break;
 8006b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	372c      	adds	r7, #44	; 0x2c
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	007a1200 	.word	0x007a1200
 8006b44:	0800dbac 	.word	0x0800dbac
 8006b48:	0800dbbc 	.word	0x0800dbbc
 8006b4c:	003d0900 	.word	0x003d0900

08006b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b54:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b56:	681b      	ldr	r3, [r3, #0]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c

08006b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006b6e:	f7ff ffef 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8006b72:	4601      	mov	r1, r0
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	fa92 f2a2 	rbit	r2, r2
 8006b88:	603a      	str	r2, [r7, #0]
  return result;
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	fab2 f282 	clz	r2, r2
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	40d3      	lsrs	r3, r2
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006b96:	5cd3      	ldrb	r3, [r2, r3]
 8006b98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	0800dba4 	.word	0x0800dba4

08006bac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220f      	movs	r2, #15
 8006bba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f003 0203 	and.w	r2, r3, #3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RCC_GetClockConfig+0x5c>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <HAL_RCC_GetClockConfig+0x60>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0207 	and.w	r2, r3, #7
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40022000 	.word	0x40022000

08006c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b092      	sub	sp, #72	; 0x48
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80cd 	beq.w	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c34:	4b8e      	ldr	r3, [pc, #568]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10e      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c40:	4b8b      	ldr	r3, [pc, #556]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	4a8a      	ldr	r2, [pc, #552]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	61d3      	str	r3, [r2, #28]
 8006c4c:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5e:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d118      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6a:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a81      	ldr	r2, [pc, #516]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c76:	f7fc ff21 	bl	8003abc <HAL_GetTick>
 8006c7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7c:	e008      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7e:	f7fc ff1d 	bl	8003abc <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b64      	cmp	r3, #100	; 0x64
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0ea      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c90:	4b78      	ldr	r3, [pc, #480]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c9c:	4b74      	ldr	r3, [pc, #464]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d07d      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d076      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cba:	4b6d      	ldr	r3, [pc, #436]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	fa93 f3a3 	rbit	r3, r3
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cd4:	fab3 f383 	clz	r3, r3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4b66      	ldr	r3, [pc, #408]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	fa93 f3a3 	rbit	r3, r3
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cf8:	fab3 f383 	clz	r3, r3
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4b5d      	ldr	r3, [pc, #372]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d0c:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d045      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fc fece 	bl	8003abc <HAL_GetTick>
 8006d20:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d22:	e00a      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d24:	f7fc feca 	bl	8003abc <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e095      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	2302      	movs	r3, #2
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	fa93 f3a3 	rbit	r3, r3
 8006d50:	61fb      	str	r3, [r7, #28]
  return result;
 8006d52:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d54:	fab3 f383 	clz	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006d68:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	e007      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	fa93 f3a3 	rbit	r3, r3
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	4b3d      	ldr	r3, [pc, #244]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2202      	movs	r2, #2
 8006d80:	613a      	str	r2, [r7, #16]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	fa92 f2a2 	rbit	r2, r2
 8006d88:	60fa      	str	r2, [r7, #12]
  return result;
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	fab2 f282 	clz	r2, r2
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	f002 021f 	and.w	r2, r2, #31
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0bd      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006da8:	4b31      	ldr	r3, [pc, #196]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	492e      	ldr	r1, [pc, #184]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006dba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d105      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dda:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	f023 0203 	bic.w	r2, r3, #3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	4922      	ldr	r1, [pc, #136]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006df8:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	f023 0210 	bic.w	r2, r3, #16
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	491a      	ldr	r1, [pc, #104]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	4913      	ldr	r1, [pc, #76]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	490b      	ldr	r1, [pc, #44]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	4904      	ldr	r1, [pc, #16]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3748      	adds	r7, #72	; 0x48
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	40007000 	.word	0x40007000
 8006e78:	10908100 	.word	0x10908100

08006e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e049      	b.n	8006f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fc fba2 	bl	80035ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f000 ff64 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d001      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e040      	b.n	8006fc6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00e      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x58>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d009      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x58>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xac>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x58>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <HAL_TIM_Base_Start_IT+0xb0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d115      	bne.n	8006fb0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d015      	beq.n	8006fc2 <HAL_TIM_Base_Start_IT+0x96>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d011      	beq.n	8006fc2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fae:	e008      	b.n	8006fc2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	00010007 	.word	0x00010007

08006fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e049      	b.n	800708a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f841 	bl	8007092 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f000 feb0 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <HAL_TIM_PWM_Start_IT+0x28>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	bf14      	ite	ne
 80070c8:	2301      	movne	r3, #1
 80070ca:	2300      	moveq	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	e03c      	b.n	800714a <HAL_TIM_PWM_Start_IT+0xa2>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d109      	bne.n	80070ea <HAL_TIM_PWM_Start_IT+0x42>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b01      	cmp	r3, #1
 80070e0:	bf14      	ite	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	2300      	moveq	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e02f      	b.n	800714a <HAL_TIM_PWM_Start_IT+0xa2>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d109      	bne.n	8007104 <HAL_TIM_PWM_Start_IT+0x5c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e022      	b.n	800714a <HAL_TIM_PWM_Start_IT+0xa2>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b0c      	cmp	r3, #12
 8007108:	d109      	bne.n	800711e <HAL_TIM_PWM_Start_IT+0x76>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	bf14      	ite	ne
 8007116:	2301      	movne	r3, #1
 8007118:	2300      	moveq	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e015      	b.n	800714a <HAL_TIM_PWM_Start_IT+0xa2>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b10      	cmp	r3, #16
 8007122:	d109      	bne.n	8007138 <HAL_TIM_PWM_Start_IT+0x90>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e008      	b.n	800714a <HAL_TIM_PWM_Start_IT+0xa2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0d3      	b.n	80072fa <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <HAL_TIM_PWM_Start_IT+0xba>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007160:	e023      	b.n	80071aa <HAL_TIM_PWM_Start_IT+0x102>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d104      	bne.n	8007172 <HAL_TIM_PWM_Start_IT+0xca>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007170:	e01b      	b.n	80071aa <HAL_TIM_PWM_Start_IT+0x102>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b08      	cmp	r3, #8
 8007176:	d104      	bne.n	8007182 <HAL_TIM_PWM_Start_IT+0xda>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007180:	e013      	b.n	80071aa <HAL_TIM_PWM_Start_IT+0x102>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b0c      	cmp	r3, #12
 8007186:	d104      	bne.n	8007192 <HAL_TIM_PWM_Start_IT+0xea>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007190:	e00b      	b.n	80071aa <HAL_TIM_PWM_Start_IT+0x102>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b10      	cmp	r3, #16
 8007196:	d104      	bne.n	80071a2 <HAL_TIM_PWM_Start_IT+0xfa>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a0:	e003      	b.n	80071aa <HAL_TIM_PWM_Start_IT+0x102>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b0c      	cmp	r3, #12
 80071ae:	d841      	bhi.n	8007234 <HAL_TIM_PWM_Start_IT+0x18c>
 80071b0:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <HAL_TIM_PWM_Start_IT+0x110>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071ed 	.word	0x080071ed
 80071bc:	08007235 	.word	0x08007235
 80071c0:	08007235 	.word	0x08007235
 80071c4:	08007235 	.word	0x08007235
 80071c8:	080071ff 	.word	0x080071ff
 80071cc:	08007235 	.word	0x08007235
 80071d0:	08007235 	.word	0x08007235
 80071d4:	08007235 	.word	0x08007235
 80071d8:	08007211 	.word	0x08007211
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007235 	.word	0x08007235
 80071e4:	08007235 	.word	0x08007235
 80071e8:	08007223 	.word	0x08007223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0202 	orr.w	r2, r2, #2
 80071fa:	60da      	str	r2, [r3, #12]
      break;
 80071fc:	e01d      	b.n	800723a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0204 	orr.w	r2, r2, #4
 800720c:	60da      	str	r2, [r3, #12]
      break;
 800720e:	e014      	b.n	800723a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	60da      	str	r2, [r3, #12]
      break;
 8007220:	e00b      	b.n	800723a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0210 	orr.w	r2, r2, #16
 8007230:	60da      	str	r2, [r3, #12]
      break;
 8007232:	e002      	b.n	800723a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	bf00      	nop
  }

  if (status == HAL_OK)
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d15b      	bne.n	80072f8 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2201      	movs	r2, #1
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f955 	bl	80084f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2c      	ldr	r2, [pc, #176]	; (8007304 <HAL_TIM_PWM_Start_IT+0x25c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <HAL_TIM_PWM_Start_IT+0x1ce>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <HAL_TIM_PWM_Start_IT+0x260>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_TIM_PWM_Start_IT+0x1ce>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a29      	ldr	r2, [pc, #164]	; (800730c <HAL_TIM_PWM_Start_IT+0x264>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_TIM_PWM_Start_IT+0x1ce>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a27      	ldr	r2, [pc, #156]	; (8007310 <HAL_TIM_PWM_Start_IT+0x268>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d101      	bne.n	800727a <HAL_TIM_PWM_Start_IT+0x1d2>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <HAL_TIM_PWM_Start_IT+0x1d4>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800728e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <HAL_TIM_PWM_Start_IT+0x25c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_TIM_PWM_Start_IT+0x210>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d009      	beq.n	80072b8 <HAL_TIM_PWM_Start_IT+0x210>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <HAL_TIM_PWM_Start_IT+0x26c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_TIM_PWM_Start_IT+0x210>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_TIM_PWM_Start_IT+0x260>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d115      	bne.n	80072e4 <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	4b16      	ldr	r3, [pc, #88]	; (8007318 <HAL_TIM_PWM_Start_IT+0x270>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d015      	beq.n	80072f6 <HAL_TIM_PWM_Start_IT+0x24e>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d011      	beq.n	80072f6 <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0201 	orr.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	e008      	b.n	80072f6 <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800
 8007314:	40000400 	.word	0x40000400
 8007318:	00010007 	.word	0x00010007

0800731c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b0c      	cmp	r3, #12
 800732e:	d841      	bhi.n	80073b4 <HAL_TIM_PWM_Stop_IT+0x98>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800736d 	.word	0x0800736d
 800733c:	080073b5 	.word	0x080073b5
 8007340:	080073b5 	.word	0x080073b5
 8007344:	080073b5 	.word	0x080073b5
 8007348:	0800737f 	.word	0x0800737f
 800734c:	080073b5 	.word	0x080073b5
 8007350:	080073b5 	.word	0x080073b5
 8007354:	080073b5 	.word	0x080073b5
 8007358:	08007391 	.word	0x08007391
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073b5 	.word	0x080073b5
 8007364:	080073b5 	.word	0x080073b5
 8007368:	080073a3 	.word	0x080073a3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0202 	bic.w	r2, r2, #2
 800737a:	60da      	str	r2, [r3, #12]
      break;
 800737c:	e01d      	b.n	80073ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0204 	bic.w	r2, r2, #4
 800738c:	60da      	str	r2, [r3, #12]
      break;
 800738e:	e014      	b.n	80073ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0208 	bic.w	r2, r2, #8
 800739e:	60da      	str	r2, [r3, #12]
      break;
 80073a0:	e00b      	b.n	80073ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0210 	bic.w	r2, r2, #16
 80073b0:	60da      	str	r2, [r3, #12]
      break;
 80073b2:	e002      	b.n	80073ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d17b      	bne.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f895 	bl	80084f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00e      	beq.n	80073f6 <HAL_TIM_PWM_Stop_IT+0xda>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a3a      	ldr	r2, [pc, #232]	; (80074c8 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d009      	beq.n	80073f6 <HAL_TIM_PWM_Stop_IT+0xda>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a39      	ldr	r2, [pc, #228]	; (80074cc <HAL_TIM_PWM_Stop_IT+0x1b0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_TIM_PWM_Stop_IT+0xda>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a37      	ldr	r2, [pc, #220]	; (80074d0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_PWM_Stop_IT+0xde>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <HAL_TIM_PWM_Stop_IT+0xe0>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d017      	beq.n	8007430 <HAL_TIM_PWM_Stop_IT+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	f241 1311 	movw	r3, #4369	; 0x1111
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10f      	bne.n	8007430 <HAL_TIM_PWM_Stop_IT+0x114>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	f240 4344 	movw	r3, #1092	; 0x444
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d107      	bne.n	8007430 <HAL_TIM_PWM_Stop_IT+0x114>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	f241 1311 	movw	r3, #4369	; 0x1111
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10f      	bne.n	8007460 <HAL_TIM_PWM_Stop_IT+0x144>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a1a      	ldr	r2, [r3, #32]
 8007446:	f240 4344 	movw	r3, #1092	; 0x444
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <HAL_TIM_PWM_Stop_IT+0x144>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <HAL_TIM_PWM_Stop_IT+0x154>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746e:	e023      	b.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d104      	bne.n	8007480 <HAL_TIM_PWM_Stop_IT+0x164>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800747e:	e01b      	b.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b08      	cmp	r3, #8
 8007484:	d104      	bne.n	8007490 <HAL_TIM_PWM_Stop_IT+0x174>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800748e:	e013      	b.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b0c      	cmp	r3, #12
 8007494:	d104      	bne.n	80074a0 <HAL_TIM_PWM_Stop_IT+0x184>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800749e:	e00b      	b.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d104      	bne.n	80074b0 <HAL_TIM_PWM_Stop_IT+0x194>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074ae:	e003      	b.n	80074b8 <HAL_TIM_PWM_Stop_IT+0x19c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40014400 	.word	0x40014400
 80074d0:	40014800 	.word	0x40014800

080074d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e097      	b.n	8007618 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fc f831 	bl	8003564 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f000 fc2d 	bl	8007d88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	4313      	orrs	r3, r2
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007574:	f023 030c 	bic.w	r3, r3, #12
 8007578:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	4313      	orrs	r3, r2
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	011a      	lsls	r2, r3, #4
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	031b      	lsls	r3, r3, #12
 80075a4:	4313      	orrs	r3, r2
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80075ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4313      	orrs	r3, r2
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007630:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007638:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007640:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007648:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d110      	bne.n	8007672 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d102      	bne.n	800765c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007656:	7b7b      	ldrb	r3, [r7, #13]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d001      	beq.n	8007660 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e069      	b.n	8007734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007670:	e031      	b.n	80076d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b04      	cmp	r3, #4
 8007676:	d110      	bne.n	800769a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d102      	bne.n	8007684 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800767e:	7b3b      	ldrb	r3, [r7, #12]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d001      	beq.n	8007688 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e055      	b.n	8007734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007698:	e01d      	b.n	80076d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d105      	bne.n	80076b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d102      	bne.n	80076b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ac:	7b3b      	ldrb	r3, [r7, #12]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d001      	beq.n	80076b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e03e      	b.n	8007734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_TIM_Encoder_Start+0xc4>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d008      	beq.n	80076f4 <HAL_TIM_Encoder_Start+0xd4>
 80076e2:	e00f      	b.n	8007704 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2201      	movs	r2, #1
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 ff03 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 80076f2:	e016      	b.n	8007722 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2201      	movs	r2, #1
 80076fa:	2104      	movs	r1, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fefb 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 8007702:	e00e      	b.n	8007722 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	2100      	movs	r1, #0
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fef3 	bl	80084f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2201      	movs	r2, #1
 8007718:	2104      	movs	r1, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f000 feec 	bl	80084f8 <TIM_CCxChannelCmd>
      break;
 8007720:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d122      	bne.n	8007798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d11b      	bne.n	8007798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0202 	mvn.w	r2, #2
 8007768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fae3 	bl	8007d4a <HAL_TIM_IC_CaptureCallback>
 8007784:	e005      	b.n	8007792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fad5 	bl	8007d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fae6 	bl	8007d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d122      	bne.n	80077ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d11b      	bne.n	80077ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0204 	mvn.w	r2, #4
 80077bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fab9 	bl	8007d4a <HAL_TIM_IC_CaptureCallback>
 80077d8:	e005      	b.n	80077e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 faab 	bl	8007d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fabc 	bl	8007d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d122      	bne.n	8007840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d11b      	bne.n	8007840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0208 	mvn.w	r2, #8
 8007810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2204      	movs	r2, #4
 8007816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa8f 	bl	8007d4a <HAL_TIM_IC_CaptureCallback>
 800782c:	e005      	b.n	800783a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa81 	bl	8007d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa92 	bl	8007d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b10      	cmp	r3, #16
 800784c:	d122      	bne.n	8007894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b10      	cmp	r3, #16
 800785a:	d11b      	bne.n	8007894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0210 	mvn.w	r2, #16
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2208      	movs	r2, #8
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa65 	bl	8007d4a <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa57 	bl	8007d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa68 	bl	8007d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10e      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0201 	mvn.w	r2, #1
 80078b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fb fccc 	bl	8003258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d10e      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d107      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fea4 	bl	8008634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d10e      	bne.n	800791a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007906:	2b80      	cmp	r3, #128	; 0x80
 8007908:	d107      	bne.n	800791a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fe97 	bl	8008648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	d10e      	bne.n	8007946 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d107      	bne.n	8007946 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800793e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa16 	bl	8007d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b20      	cmp	r3, #32
 8007952:	d10e      	bne.n	8007972 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b20      	cmp	r3, #32
 8007960:	d107      	bne.n	8007972 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f06f 0220 	mvn.w	r2, #32
 800796a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fe57 	bl	8008620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007996:	2302      	movs	r3, #2
 8007998:	e0ff      	b.n	8007b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b14      	cmp	r3, #20
 80079a6:	f200 80f0 	bhi.w	8007b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007b8b 	.word	0x08007b8b
 80079b8:	08007b8b 	.word	0x08007b8b
 80079bc:	08007b8b 	.word	0x08007b8b
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007b8b 	.word	0x08007b8b
 80079c8:	08007b8b 	.word	0x08007b8b
 80079cc:	08007b8b 	.word	0x08007b8b
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	08007b8b 	.word	0x08007b8b
 80079d8:	08007b8b 	.word	0x08007b8b
 80079dc:	08007b8b 	.word	0x08007b8b
 80079e0:	08007ac7 	.word	0x08007ac7
 80079e4:	08007b8b 	.word	0x08007b8b
 80079e8:	08007b8b 	.word	0x08007b8b
 80079ec:	08007b8b 	.word	0x08007b8b
 80079f0:	08007b09 	.word	0x08007b09
 80079f4:	08007b8b 	.word	0x08007b8b
 80079f8:	08007b8b 	.word	0x08007b8b
 80079fc:	08007b8b 	.word	0x08007b8b
 8007a00:	08007b49 	.word	0x08007b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fa34 	bl	8007e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0204 	bic.w	r2, r2, #4
 8007a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6999      	ldr	r1, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
      break;
 8007a42:	e0a5      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fa9a 	bl	8007f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	619a      	str	r2, [r3, #24]
      break;
 8007a84:	e084      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 faf9 	bl	8008084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0204 	bic.w	r2, r2, #4
 8007ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69d9      	ldr	r1, [r3, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	61da      	str	r2, [r3, #28]
      break;
 8007ac4:	e064      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fb57 	bl	8008180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69d9      	ldr	r1, [r3, #28]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	021a      	lsls	r2, r3, #8
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	61da      	str	r2, [r3, #28]
      break;
 8007b06:	e043      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fb9a 	bl	8008248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0204 	bic.w	r2, r2, #4
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b46:	e023      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fbd8 	bl	8008304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	021a      	lsls	r2, r3, #8
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b88:	e002      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e0b6      	b.n	8007d2e <HAL_TIM_ConfigClockSource+0x18a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfc:	d03e      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0xd8>
 8007bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c02:	f200 8087 	bhi.w	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0a:	f000 8086 	beq.w	8007d1a <HAL_TIM_ConfigClockSource+0x176>
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c12:	d87f      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c14:	2b70      	cmp	r3, #112	; 0x70
 8007c16:	d01a      	beq.n	8007c4e <HAL_TIM_ConfigClockSource+0xaa>
 8007c18:	2b70      	cmp	r3, #112	; 0x70
 8007c1a:	d87b      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c1c:	2b60      	cmp	r3, #96	; 0x60
 8007c1e:	d050      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x11e>
 8007c20:	2b60      	cmp	r3, #96	; 0x60
 8007c22:	d877      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c24:	2b50      	cmp	r3, #80	; 0x50
 8007c26:	d03c      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0xfe>
 8007c28:	2b50      	cmp	r3, #80	; 0x50
 8007c2a:	d873      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d058      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x13e>
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	d86f      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c34:	2b30      	cmp	r3, #48	; 0x30
 8007c36:	d064      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x15e>
 8007c38:	2b30      	cmp	r3, #48	; 0x30
 8007c3a:	d86b      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	d060      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x15e>
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d867      	bhi.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d05c      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x15e>
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d05a      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x15e>
 8007c4c:	e062      	b.n	8007d14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c5e:	f000 fc2b 	bl	80084b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	609a      	str	r2, [r3, #8]
      break;
 8007c7a:	e04f      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	f000 fc14 	bl	80084b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c9e:	609a      	str	r2, [r3, #8]
      break;
 8007ca0:	e03c      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f000 fb88 	bl	80083c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2150      	movs	r1, #80	; 0x50
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fbe1 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007cc0:	e02c      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f000 fba7 	bl	8008422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2160      	movs	r1, #96	; 0x60
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fbd1 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007ce0:	e01c      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f000 fb68 	bl	80083c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2140      	movs	r1, #64	; 0x40
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fbc1 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007d00:	e00c      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f000 fbb8 	bl	8008482 <TIM_ITRx_SetConfig>
      break;
 8007d12:	e003      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
      break;
 8007d18:	e000      	b.n	8007d1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a32      	ldr	r2, [pc, #200]	; (8007e64 <TIM_Base_SetConfig+0xdc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x28>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x28>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a2f      	ldr	r2, [pc, #188]	; (8007e68 <TIM_Base_SetConfig+0xe0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a27      	ldr	r2, [pc, #156]	; (8007e64 <TIM_Base_SetConfig+0xdc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <TIM_Base_SetConfig+0x6a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d00f      	beq.n	8007df2 <TIM_Base_SetConfig+0x6a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a24      	ldr	r2, [pc, #144]	; (8007e68 <TIM_Base_SetConfig+0xe0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_Base_SetConfig+0x6a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <TIM_Base_SetConfig+0xe4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_Base_SetConfig+0x6a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <TIM_Base_SetConfig+0xe8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_Base_SetConfig+0x6a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <TIM_Base_SetConfig+0xec>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d108      	bne.n	8007e04 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a0e      	ldr	r2, [pc, #56]	; (8007e64 <TIM_Base_SetConfig+0xdc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00b      	beq.n	8007e48 <TIM_Base_SetConfig+0xc0>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a0e      	ldr	r2, [pc, #56]	; (8007e6c <TIM_Base_SetConfig+0xe4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d007      	beq.n	8007e48 <TIM_Base_SetConfig+0xc0>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a0d      	ldr	r2, [pc, #52]	; (8007e70 <TIM_Base_SetConfig+0xe8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_Base_SetConfig+0xc0>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a0c      	ldr	r2, [pc, #48]	; (8007e74 <TIM_Base_SetConfig+0xec>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d103      	bne.n	8007e50 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	615a      	str	r2, [r3, #20]
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800

08007e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f023 0302 	bic.w	r3, r3, #2
 8007ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a28      	ldr	r2, [pc, #160]	; (8007f74 <TIM_OC1_SetConfig+0xfc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_OC1_SetConfig+0x78>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a27      	ldr	r2, [pc, #156]	; (8007f78 <TIM_OC1_SetConfig+0x100>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_OC1_SetConfig+0x78>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a26      	ldr	r2, [pc, #152]	; (8007f7c <TIM_OC1_SetConfig+0x104>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_OC1_SetConfig+0x78>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a25      	ldr	r2, [pc, #148]	; (8007f80 <TIM_OC1_SetConfig+0x108>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10c      	bne.n	8007f0a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f023 0308 	bic.w	r3, r3, #8
 8007ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f023 0304 	bic.w	r3, r3, #4
 8007f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <TIM_OC1_SetConfig+0xfc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00b      	beq.n	8007f2a <TIM_OC1_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a18      	ldr	r2, [pc, #96]	; (8007f78 <TIM_OC1_SetConfig+0x100>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d007      	beq.n	8007f2a <TIM_OC1_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <TIM_OC1_SetConfig+0x104>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_OC1_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <TIM_OC1_SetConfig+0x108>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d111      	bne.n	8007f4e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	621a      	str	r2, [r3, #32]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	40012c00 	.word	0x40012c00
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40014400 	.word	0x40014400
 8007f80:	40014800 	.word	0x40014800

08007f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0210 	bic.w	r2, r3, #16
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0320 	bic.w	r3, r3, #32
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a24      	ldr	r2, [pc, #144]	; (8008074 <TIM_OC2_SetConfig+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d10d      	bne.n	8008004 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <TIM_OC2_SetConfig+0xf0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00b      	beq.n	8008024 <TIM_OC2_SetConfig+0xa0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <TIM_OC2_SetConfig+0xf4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d007      	beq.n	8008024 <TIM_OC2_SetConfig+0xa0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a19      	ldr	r2, [pc, #100]	; (800807c <TIM_OC2_SetConfig+0xf8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <TIM_OC2_SetConfig+0xa0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a18      	ldr	r2, [pc, #96]	; (8008080 <TIM_OC2_SetConfig+0xfc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d113      	bne.n	800804c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800802a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008032:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800

08008084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a23      	ldr	r2, [pc, #140]	; (8008170 <TIM_OC3_SetConfig+0xec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d10d      	bne.n	8008102 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008100:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <TIM_OC3_SetConfig+0xec>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00b      	beq.n	8008122 <TIM_OC3_SetConfig+0x9e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a19      	ldr	r2, [pc, #100]	; (8008174 <TIM_OC3_SetConfig+0xf0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d007      	beq.n	8008122 <TIM_OC3_SetConfig+0x9e>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a18      	ldr	r2, [pc, #96]	; (8008178 <TIM_OC3_SetConfig+0xf4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d003      	beq.n	8008122 <TIM_OC3_SetConfig+0x9e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a17      	ldr	r2, [pc, #92]	; (800817c <TIM_OC3_SetConfig+0xf8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d113      	bne.n	800814a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800

08008180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	031b      	lsls	r3, r3, #12
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a16      	ldr	r2, [pc, #88]	; (8008238 <TIM_OC4_SetConfig+0xb8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC4_SetConfig+0x7c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a15      	ldr	r2, [pc, #84]	; (800823c <TIM_OC4_SetConfig+0xbc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC4_SetConfig+0x7c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a14      	ldr	r2, [pc, #80]	; (8008240 <TIM_OC4_SetConfig+0xc0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC4_SetConfig+0x7c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a13      	ldr	r2, [pc, #76]	; (8008244 <TIM_OC4_SetConfig+0xc4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d109      	bne.n	8008210 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	019b      	lsls	r3, r3, #6
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40014000 	.word	0x40014000
 8008240:	40014400 	.word	0x40014400
 8008244:	40014800 	.word	0x40014800

08008248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800828c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a15      	ldr	r2, [pc, #84]	; (80082f4 <TIM_OC5_SetConfig+0xac>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_OC5_SetConfig+0x72>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <TIM_OC5_SetConfig+0xb0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_OC5_SetConfig+0x72>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a13      	ldr	r2, [pc, #76]	; (80082fc <TIM_OC5_SetConfig+0xb4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC5_SetConfig+0x72>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a12      	ldr	r2, [pc, #72]	; (8008300 <TIM_OC5_SetConfig+0xb8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d109      	bne.n	80082ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	621a      	str	r2, [r3, #32]
}
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40014000 	.word	0x40014000
 80082fc:	40014400 	.word	0x40014400
 8008300:	40014800 	.word	0x40014800

08008304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800834a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	051b      	lsls	r3, r3, #20
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <TIM_OC6_SetConfig+0xb0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00b      	beq.n	8008378 <TIM_OC6_SetConfig+0x74>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <TIM_OC6_SetConfig+0xb4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <TIM_OC6_SetConfig+0x74>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a14      	ldr	r2, [pc, #80]	; (80083bc <TIM_OC6_SetConfig+0xb8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_OC6_SetConfig+0x74>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <TIM_OC6_SetConfig+0xbc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d109      	bne.n	800838c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40012c00 	.word	0x40012c00
 80083b8:	40014000 	.word	0x40014000
 80083bc:	40014400 	.word	0x40014400
 80083c0:	40014800 	.word	0x40014800

080083c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	f023 0201 	bic.w	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f023 030a 	bic.w	r3, r3, #10
 8008400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f023 0210 	bic.w	r2, r3, #16
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	031b      	lsls	r3, r3, #12
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800845e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	f043 0307 	orr.w	r3, r3, #7
 80084a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	431a      	orrs	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4313      	orrs	r3, r2
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2201      	movs	r2, #1
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	43db      	mvns	r3, r3
 800851a:	401a      	ands	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1a      	ldr	r2, [r3, #32]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008558:	2302      	movs	r3, #2
 800855a:	e054      	b.n	8008606 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a24      	ldr	r2, [pc, #144]	; (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d108      	bne.n	8008598 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800858c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d00e      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c4:	d009      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a13      	ldr	r2, [pc, #76]	; (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d004      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10c      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40012c00 	.word	0x40012c00
 8008618:	40000400 	.word	0x40000400
 800861c:	40014000 	.word	0x40014000

08008620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <bytestowrite>:

uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	460a      	mov	r2, r1
 8008666:	80fb      	strh	r3, [r7, #6]
 8008668:	4613      	mov	r3, r2
 800866a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	88bb      	ldrh	r3, [r7, #4]
 8008670:	4413      	add	r3, r2
 8008672:	2b3f      	cmp	r3, #63	; 0x3f
 8008674:	dc01      	bgt.n	800867a <bytestowrite+0x1e>
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	e003      	b.n	8008682 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800867a:	88bb      	ldrh	r3, [r7, #4]
 800867c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008680:	b29b      	uxth	r3, r3
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af04      	add	r7, sp, #16
 8008696:	60ba      	str	r2, [r7, #8]
 8008698:	461a      	mov	r2, r3
 800869a:	4603      	mov	r3, r0
 800869c:	81fb      	strh	r3, [r7, #14]
 800869e:	460b      	mov	r3, r1
 80086a0:	81bb      	strh	r3, [r7, #12]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80086a6:	2306      	movs	r3, #6
 80086a8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	89bb      	ldrh	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da00      	bge.n	80086ba <EEPROM_Write+0x2a>
 80086b8:	333f      	adds	r3, #63	; 0x3f
 80086ba:	119b      	asrs	r3, r3, #6
 80086bc:	b29a      	uxth	r2, r3
 80086be:	89fb      	ldrh	r3, [r7, #14]
 80086c0:	4413      	add	r3, r2
 80086c2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80086c4:	8b7a      	ldrh	r2, [r7, #26]
 80086c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3301      	adds	r3, #1
 80086ce:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80086d4:	2300      	movs	r3, #0
 80086d6:	623b      	str	r3, [r7, #32]
 80086d8:	e034      	b.n	8008744 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80086da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	b21a      	sxth	r2, r3
 80086e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80086ee:	89ba      	ldrh	r2, [r7, #12]
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff ffb1 	bl	800865c <bytestowrite>
 80086fa:	4603      	mov	r3, r0
 80086fc:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80086fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	4413      	add	r3, r2
 8008704:	8af9      	ldrh	r1, [r7, #22]
 8008706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800870a:	9202      	str	r2, [sp, #8]
 800870c:	8aba      	ldrh	r2, [r7, #20]
 800870e:	9201      	str	r2, [sp, #4]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	2302      	movs	r3, #2
 8008714:	460a      	mov	r2, r1
 8008716:	21a0      	movs	r1, #160	; 0xa0
 8008718:	480f      	ldr	r0, [pc, #60]	; (8008758 <EEPROM_Write+0xc8>)
 800871a:	f7fc fa77 	bl	8004c0c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800871e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008720:	3301      	adds	r3, #1
 8008722:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8008724:	2300      	movs	r3, #0
 8008726:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	8abb      	ldrh	r3, [r7, #20]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8008730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008732:	8abb      	ldrh	r3, [r7, #20]
 8008734:	4413      	add	r3, r2
 8008736:	84bb      	strh	r3, [r7, #36]	; 0x24

		//osDelay (5);  // Write cycle delay (5ms)
		HAL_Delay(5);
 8008738:	2005      	movs	r0, #5
 800873a:	f7fb f9cb 	bl	8003ad4 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	3301      	adds	r3, #1
 8008742:	623b      	str	r3, [r7, #32]
 8008744:	8b3b      	ldrh	r3, [r7, #24]
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	429a      	cmp	r2, r3
 800874a:	dbc6      	blt.n	80086da <EEPROM_Write+0x4a>
	}
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	3728      	adds	r7, #40	; 0x28
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200007c4 	.word	0x200007c4

0800875c <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08e      	sub	sp, #56	; 0x38
 8008760:	af04      	add	r7, sp, #16
 8008762:	60ba      	str	r2, [r7, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	4603      	mov	r3, r0
 8008768:	81fb      	strh	r3, [r7, #14]
 800876a:	460b      	mov	r3, r1
 800876c:	81bb      	strh	r3, [r7, #12]
 800876e:	4613      	mov	r3, r2
 8008770:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8008772:	2306      	movs	r3, #6
 8008774:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8008776:	89fb      	ldrh	r3, [r7, #14]
 8008778:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800877a:	88fa      	ldrh	r2, [r7, #6]
 800877c:	89bb      	ldrh	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	2b00      	cmp	r3, #0
 8008782:	da00      	bge.n	8008786 <EEPROM_Read+0x2a>
 8008784:	333f      	adds	r3, #63	; 0x3f
 8008786:	119b      	asrs	r3, r3, #6
 8008788:	b29a      	uxth	r2, r3
 800878a:	89fb      	ldrh	r3, [r7, #14]
 800878c:	4413      	add	r3, r2
 800878e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8008790:	8b7a      	ldrh	r2, [r7, #26]
 8008792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	b29b      	uxth	r3, r3
 8008798:	3301      	adds	r3, #1
 800879a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800879c:	2300      	movs	r3, #0
 800879e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80087a0:	2300      	movs	r3, #0
 80087a2:	623b      	str	r3, [r7, #32]
 80087a4:	e031      	b.n	800880a <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80087a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	fa02 f303 	lsl.w	r3, r2, r3
 80087ae:	b21a      	sxth	r2, r3
 80087b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	b21b      	sxth	r3, r3
 80087b8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80087ba:	89ba      	ldrh	r2, [r7, #12]
 80087bc:	88fb      	ldrh	r3, [r7, #6]
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff ff4b 	bl	800865c <bytestowrite>
 80087c6:	4603      	mov	r3, r0
 80087c8:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80087ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	4413      	add	r3, r2
 80087d0:	8af9      	ldrh	r1, [r7, #22]
 80087d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087d6:	9202      	str	r2, [sp, #8]
 80087d8:	8aba      	ldrh	r2, [r7, #20]
 80087da:	9201      	str	r2, [sp, #4]
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2302      	movs	r3, #2
 80087e0:	460a      	mov	r2, r1
 80087e2:	21a0      	movs	r1, #160	; 0xa0
 80087e4:	480d      	ldr	r0, [pc, #52]	; (800881c <EEPROM_Read+0xc0>)
 80087e6:	f7fc fb25 	bl	8004e34 <HAL_I2C_Mem_Read>
		startPage += 1;
 80087ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ec:	3301      	adds	r3, #1
 80087ee:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	8abb      	ldrh	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80087fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087fe:	8abb      	ldrh	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	3301      	adds	r3, #1
 8008808:	623b      	str	r3, [r7, #32]
 800880a:	8b3b      	ldrh	r3, [r7, #24]
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	429a      	cmp	r2, r3
 8008810:	dbc9      	blt.n	80087a6 <EEPROM_Read+0x4a>
	}
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	3728      	adds	r7, #40	; 0x28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	200007c4 	.word	0x200007c4

08008820 <LCD_Delay_us>:
#define LCD_1LINE               0x00
#define LCD_5x10DOTS            0x04
#define LCD_5x8DOTS             0x00
//############################################################################################
void  LCD_Delay_us(uint16_t  us)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	80fb      	strh	r3, [r7, #6]
  uint32_t  Div = (SysTick->LOAD+1)/1000;
 800882a:	4b19      	ldr	r3, [pc, #100]	; (8008890 <LCD_Delay_us+0x70>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	3301      	adds	r3, #1
 8008830:	4a18      	ldr	r2, [pc, #96]	; (8008894 <LCD_Delay_us+0x74>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	60fb      	str	r3, [r7, #12]
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
 800883a:	f7fb f93f 	bl	8003abc <HAL_GetTick>
 800883e:	4603      	mov	r3, r0
 8008840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008844:	fb03 f202 	mul.w	r2, r3, r2
 8008848:	4b11      	ldr	r3, [pc, #68]	; (8008890 <LCD_Delay_us+0x70>)
 800884a:	6899      	ldr	r1, [r3, #8]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008858:	60bb      	str	r3, [r7, #8]
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));  
 800885a:	bf00      	nop
 800885c:	f7fb f92e 	bl	8003abc <HAL_GetTick>
 8008860:	4603      	mov	r3, r0
 8008862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008866:	fb03 f202 	mul.w	r2, r3, r2
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <LCD_Delay_us+0x70>)
 800886c:	6899      	ldr	r1, [r3, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	fbb1 f3f3 	udiv	r3, r1, r3
 8008874:	1ad2      	subs	r2, r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	429a      	cmp	r2, r3
 8008882:	d3eb      	bcc.n	800885c <LCD_Delay_us+0x3c>
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	e000e010 	.word	0xe000e010
 8008894:	10624dd3 	.word	0x10624dd3

08008898 <LCD_Delay_ms>:
//############################################################################################
void  LCD_Delay_ms(uint8_t  ms)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  //#if _LCD_USE_FREERTOS==1
  //osDelay(ms);
  //#else
  HAL_Delay(ms);
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fb f915 	bl	8003ad4 <HAL_Delay>
  //#endif
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <LCD_Init>:
//############################################################################################
void LCD_Init(void)
{	
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80088ba:	2301      	movs	r3, #1
 80088bc:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80088be:	2303      	movs	r3, #3
 80088c0:	613b      	str	r3, [r7, #16]
  gpio.Pull = GPIO_NOPULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  
  gpio.Pin = _LCD_RS_PIN;
 80088c6:	2380      	movs	r3, #128	; 0x80
 80088c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_RS_PORT,&gpio);
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	4619      	mov	r1, r3
 80088ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088d2:	f7fb ff81 	bl	80047d8 <HAL_GPIO_Init>
  gpio.Pin = _LCD_E_PIN;
 80088d6:	2304      	movs	r3, #4
 80088d8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_E_PORT,&gpio);
 80088da:	1d3b      	adds	r3, r7, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088e2:	f7fb ff79 	bl	80047d8 <HAL_GPIO_Init>
//   gpio.Pin = _LCD_RW_PIN;
//   HAL_GPIO_Init(_LCD_RW_PORT,&gpio);
  gpio.Pin = _LCD_D4_PIN;
 80088e6:	2301      	movs	r3, #1
 80088e8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_D4_PORT,&gpio);
 80088ea:	1d3b      	adds	r3, r7, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4835      	ldr	r0, [pc, #212]	; (80089c4 <LCD_Init+0x110>)
 80088f0:	f7fb ff72 	bl	80047d8 <HAL_GPIO_Init>
  gpio.Pin = _LCD_D5_PIN;
 80088f4:	2302      	movs	r3, #2
 80088f6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_D5_PORT,&gpio);
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4831      	ldr	r0, [pc, #196]	; (80089c4 <LCD_Init+0x110>)
 80088fe:	f7fb ff6b 	bl	80047d8 <HAL_GPIO_Init>
  gpio.Pin = _LCD_D6_PIN;
 8008902:	2304      	movs	r3, #4
 8008904:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_D6_PORT,&gpio);
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	4619      	mov	r1, r3
 800890a:	482e      	ldr	r0, [pc, #184]	; (80089c4 <LCD_Init+0x110>)
 800890c:	f7fb ff64 	bl	80047d8 <HAL_GPIO_Init>
  gpio.Pin = _LCD_D7_PIN;
 8008910:	2308      	movs	r3, #8
 8008912:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_LCD_D7_PORT,&gpio);
 8008914:	1d3b      	adds	r3, r7, #4
 8008916:	4619      	mov	r1, r3
 8008918:	482a      	ldr	r0, [pc, #168]	; (80089c4 <LCD_Init+0x110>)
 800891a:	f7fb ff5d 	bl	80047d8 <HAL_GPIO_Init>
  
  //LCD_setpin_out();

	while(HAL_GetTick()<200)
 800891e:	e002      	b.n	8008926 <LCD_Init+0x72>
    LCD_Delay_ms(1);
 8008920:	2001      	movs	r0, #1
 8008922:	f7ff ffb9 	bl	8008898 <LCD_Delay_ms>
	while(HAL_GetTick()<200)
 8008926:	f7fb f8c9 	bl	8003abc <HAL_GetTick>
 800892a:	4603      	mov	r3, r0
 800892c:	2bc7      	cmp	r3, #199	; 0xc7
 800892e:	d9f7      	bls.n	8008920 <LCD_Init+0x6c>
	/* Set cursor pointer to beginning for LCD */
	LCD_Opts.currentX = 0;
 8008930:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <LCD_Init+0x114>)
 8008932:	2200      	movs	r2, #0
 8008934:	70da      	strb	r2, [r3, #3]
	LCD_Opts.currentY = 0;
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <LCD_Init+0x114>)
 8008938:	2200      	movs	r2, #0
 800893a:	711a      	strb	r2, [r3, #4]
	LCD_Opts.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 800893c:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <LCD_Init+0x114>)
 800893e:	2200      	movs	r2, #0
 8008940:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		LCD_Opts.DisplayFunction |= LCD_2LINE;
 8008942:	4b21      	ldr	r3, [pc, #132]	; (80089c8 <LCD_Init+0x114>)
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	f043 0308 	orr.w	r3, r3, #8
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b1e      	ldr	r3, [pc, #120]	; (80089c8 <LCD_Init+0x114>)
 800894e:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LCD_Cmd4bit(0x03);
 8008950:	2003      	movs	r0, #3
 8008952:	f000 f919 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Delay_ms(5);
 8008956:	2005      	movs	r0, #5
 8008958:	f7ff ff9e 	bl	8008898 <LCD_Delay_ms>
	/* Second try */
	LCD_Cmd4bit(0x03);
 800895c:	2003      	movs	r0, #3
 800895e:	f000 f913 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Delay_ms(5);
 8008962:	2005      	movs	r0, #5
 8008964:	f7ff ff98 	bl	8008898 <LCD_Delay_ms>
	/* Third goo! */
	LCD_Cmd4bit(0x03);
 8008968:	2003      	movs	r0, #3
 800896a:	f000 f90d 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Delay_ms(5);
 800896e:	2005      	movs	r0, #5
 8008970:	f7ff ff92 	bl	8008898 <LCD_Delay_ms>
	/* Set 4-bit interface */
	LCD_Cmd4bit(0x02);
 8008974:	2002      	movs	r0, #2
 8008976:	f000 f907 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Delay_ms(5);
 800897a:	2005      	movs	r0, #5
 800897c:	f7ff ff8c 	bl	8008898 <LCD_Delay_ms>
	/* Set # lines, font size, etc. */
	LCD_Cmd(LCD_FUNCTIONSET | LCD_Opts.DisplayFunction);
 8008980:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <LCD_Init+0x114>)
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	f043 0320 	orr.w	r3, r3, #32
 8008988:	b2db      	uxtb	r3, r3
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f8c3 	bl	8008b16 <LCD_Cmd>
	/* Turn the display on with no cursor or blinking default */
	LCD_Opts.DisplayControl = LCD_DISPLAYON;
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <LCD_Init+0x114>)
 8008992:	2204      	movs	r2, #4
 8008994:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn();
 8008996:	f000 f87f 	bl	8008a98 <LCD_DisplayOn>
	LCD_Clear();
 800899a:	f000 f817 	bl	80089cc <LCD_Clear>
	/* Default font directions */
	LCD_Opts.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800899e:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <LCD_Init+0x114>)
 80089a0:	2202      	movs	r2, #2
 80089a2:	709a      	strb	r2, [r3, #2]
	LCD_Cmd(LCD_ENTRYMODESET | LCD_Opts.DisplayMode);
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <LCD_Init+0x114>)
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	f043 0304 	orr.w	r3, r3, #4
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f8b1 	bl	8008b16 <LCD_Cmd>
	LCD_Delay_ms(5);
 80089b4:	2005      	movs	r0, #5
 80089b6:	f7ff ff6f 	bl	8008898 <LCD_Delay_ms>
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	48000800 	.word	0x48000800
 80089c8:	20000ae8 	.word	0x20000ae8

080089cc <LCD_Clear>:
//############################################################################################
void LCD_Clear(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	LCD_Cmd(LCD_CLEARDISPLAY);
 80089d0:	2001      	movs	r0, #1
 80089d2:	f000 f8a0 	bl	8008b16 <LCD_Cmd>
	LCD_Delay_ms(5);
 80089d6:	2005      	movs	r0, #5
 80089d8:	f7ff ff5e 	bl	8008898 <LCD_Delay_ms>
}
 80089dc:	bf00      	nop
 80089de:	bd80      	pop	{r7, pc}

080089e0 <LCD_Puts>:
//############################################################################################
void LCD_Puts(uint8_t x, uint8_t y, char const *str)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	603a      	str	r2, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	460b      	mov	r3, r1
 80089ee:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet(x, y);
 80089f0:	79ba      	ldrb	r2, [r7, #6]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 f908 	bl	8008c0c <LCD_CursorSet>
	while (*str)
 80089fc:	e040      	b.n	8008a80 <LCD_Puts+0xa0>
  {
		if (LCD_Opts.currentX >= _LCD_COLS)
 80089fe:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <LCD_Puts+0xb4>)
 8008a00:	78db      	ldrb	r3, [r3, #3]
 8008a02:	2b13      	cmp	r3, #19
 8008a04:	d910      	bls.n	8008a28 <LCD_Puts+0x48>
    {
			LCD_Opts.currentX = 0;
 8008a06:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <LCD_Puts+0xb4>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	70da      	strb	r2, [r3, #3]
			LCD_Opts.currentY++;
 8008a0c:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <LCD_Puts+0xb4>)
 8008a0e:	791b      	ldrb	r3, [r3, #4]
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	4b1f      	ldr	r3, [pc, #124]	; (8008a94 <LCD_Puts+0xb4>)
 8008a16:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8008a18:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <LCD_Puts+0xb4>)
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	; (8008a94 <LCD_Puts+0xb4>)
 8008a1e:	7912      	ldrb	r2, [r2, #4]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f8f2 	bl	8008c0c <LCD_CursorSet>
		}
		if (*str == '\n')
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b0a      	cmp	r3, #10
 8008a2e:	d10e      	bne.n	8008a4e <LCD_Puts+0x6e>
    {
			LCD_Opts.currentY++;
 8008a30:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <LCD_Puts+0xb4>)
 8008a32:	791b      	ldrb	r3, [r3, #4]
 8008a34:	3301      	adds	r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <LCD_Puts+0xb4>)
 8008a3a:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8008a3c:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <LCD_Puts+0xb4>)
 8008a3e:	78db      	ldrb	r3, [r3, #3]
 8008a40:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <LCD_Puts+0xb4>)
 8008a42:	7912      	ldrb	r2, [r2, #4]
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f8e0 	bl	8008c0c <LCD_CursorSet>
 8008a4c:	e015      	b.n	8008a7a <LCD_Puts+0x9a>
		}
    else if (*str == '\r')
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b0d      	cmp	r3, #13
 8008a54:	d106      	bne.n	8008a64 <LCD_Puts+0x84>
    {
			LCD_CursorSet(0, LCD_Opts.currentY);
 8008a56:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <LCD_Puts+0xb4>)
 8008a58:	791b      	ldrb	r3, [r3, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	f000 f8d5 	bl	8008c0c <LCD_CursorSet>
 8008a62:	e00a      	b.n	8008a7a <LCD_Puts+0x9a>
		}
    else
    {
			LCD_Data(*str);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f870 	bl	8008b4e <LCD_Data>
			LCD_Opts.currentX++;
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <LCD_Puts+0xb4>)
 8008a70:	78db      	ldrb	r3, [r3, #3]
 8008a72:	3301      	adds	r3, #1
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <LCD_Puts+0xb4>)
 8008a78:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	603b      	str	r3, [r7, #0]
	while (*str)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1ba      	bne.n	80089fe <LCD_Puts+0x1e>
	}
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000ae8 	.word	0x20000ae8

08008a98 <LCD_DisplayOn>:
//############################################################################################
void LCD_DisplayOn(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
	LCD_Opts.DisplayControl |= LCD_DISPLAYON;
 8008a9c:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <LCD_DisplayOn+0x28>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f043 0304 	orr.w	r3, r3, #4
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <LCD_DisplayOn+0x28>)
 8008aa8:	701a      	strb	r2, [r3, #0]
	LCD_Cmd(LCD_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <LCD_DisplayOn+0x28>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f043 0308 	orr.w	r3, r3, #8
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f82e 	bl	8008b16 <LCD_Cmd>
}
 8008aba:	bf00      	nop
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000ae8 	.word	0x20000ae8

08008ac4 <LCD_CreateChar>:
{
	LCD_Cmd(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
//############################################################################################
void LCD_CreateChar(uint8_t location, uint8_t const *data)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	/* We have 8 locations available for custom characters */
	location &= 0x07;
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	71fb      	strb	r3, [r7, #7]
	LCD_Cmd(LCD_SETCGRAMADDR | (location << 3));
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f815 	bl	8008b16 <LCD_Cmd>
	
	for (i = 0; i < 8; i++) {
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
 8008af0:	e009      	b.n	8008b06 <LCD_CreateChar+0x42>
		LCD_Data(data[i]);
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	4413      	add	r3, r2
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f827 	bl	8008b4e <LCD_Data>
	for (i = 0; i < 8; i++) {
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	3301      	adds	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	2b07      	cmp	r3, #7
 8008b0a:	d9f2      	bls.n	8008af2 <LCD_CreateChar+0x2e>
	}
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <LCD_Cmd>:
	LCD_CursorSet(x, y);
	LCD_Data(location);
}
//############################################################################################
/*static*/ void LCD_Cmd(uint8_t cmd)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	71fb      	strb	r3, [r7, #7]
	LCD_RS_LOW;
 8008b20:	2200      	movs	r2, #0
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b28:	f7fb ffc8 	bl	8004abc <HAL_GPIO_WritePin>
	LCD_Cmd4bit(cmd >> 4);
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f828 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Cmd4bit(cmd & 0x0F);
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f821 	bl	8008b88 <LCD_Cmd4bit>
}
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <LCD_Data>:
//############################################################################################
/*static*/ void LCD_Data(uint8_t data)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	71fb      	strb	r3, [r7, #7]
	LCD_RS_HIGH;
 8008b58:	2201      	movs	r2, #1
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b60:	f7fb ffac 	bl	8004abc <HAL_GPIO_WritePin>
	LCD_Cmd4bit(data >> 4);
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	091b      	lsrs	r3, r3, #4
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f80c 	bl	8008b88 <LCD_Cmd4bit>
	LCD_Cmd4bit(data & 0x0F);
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f805 	bl	8008b88 <LCD_Cmd4bit>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <LCD_Cmd4bit>:
  gpio.Pin = _LCD_D7_PIN;
  HAL_GPIO_Init(_LCD_D7_PORT,&gpio);
}*/
//############################################################################################
/*static*/ void LCD_Cmd4bit(uint8_t cmd)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(_LCD_D7_PORT, _LCD_D7_PIN, (GPIO_PinState)(cmd & 0x08));
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2108      	movs	r1, #8
 8008b9e:	481a      	ldr	r0, [pc, #104]	; (8008c08 <LCD_Cmd4bit+0x80>)
 8008ba0:	f7fb ff8c 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D6_PORT, _LCD_D6_PIN, (GPIO_PinState)(cmd & 0x04));
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	2104      	movs	r1, #4
 8008bb0:	4815      	ldr	r0, [pc, #84]	; (8008c08 <LCD_Cmd4bit+0x80>)
 8008bb2:	f7fb ff83 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D5_PORT, _LCD_D5_PIN, (GPIO_PinState)(cmd & 0x02));
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	4811      	ldr	r0, [pc, #68]	; (8008c08 <LCD_Cmd4bit+0x80>)
 8008bc4:	f7fb ff7a 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D4_PORT, _LCD_D4_PIN, (GPIO_PinState)(cmd & 0x01));
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	480c      	ldr	r0, [pc, #48]	; (8008c08 <LCD_Cmd4bit+0x80>)
 8008bd6:	f7fb ff71 	bl	8004abc <HAL_GPIO_WritePin>
	LCD_E_BLINK;
 8008bda:	2201      	movs	r2, #1
 8008bdc:	2104      	movs	r1, #4
 8008bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008be2:	f7fb ff6b 	bl	8004abc <HAL_GPIO_WritePin>
 8008be6:	2032      	movs	r0, #50	; 0x32
 8008be8:	f7ff fe1a 	bl	8008820 <LCD_Delay_us>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2104      	movs	r1, #4
 8008bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008bf4:	f7fb ff62 	bl	8004abc <HAL_GPIO_WritePin>
 8008bf8:	2032      	movs	r0, #50	; 0x32
 8008bfa:	f7ff fe11 	bl	8008820 <LCD_Delay_us>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	48000800 	.word	0x48000800

08008c0c <LCD_CursorSet>:
//############################################################################################
/*static*/ void LCD_CursorSet(uint8_t col, uint8_t row)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	460a      	mov	r2, r1
 8008c16:	71fb      	strb	r3, [r7, #7]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <LCD_CursorSet+0x54>)
 8008c1e:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 8008c20:	79bb      	ldrb	r3, [r7, #6]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d901      	bls.n	8008c2a <LCD_CursorSet+0x1e>
		row = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	71bb      	strb	r3, [r7, #6]
	LCD_Opts.currentX = col;
 8008c2a:	4a0e      	ldr	r2, [pc, #56]	; (8008c64 <LCD_CursorSet+0x58>)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	70d3      	strb	r3, [r2, #3]
	LCD_Opts.currentY = row;
 8008c30:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <LCD_CursorSet+0x58>)
 8008c32:	79bb      	ldrb	r3, [r7, #6]
 8008c34:	7113      	strb	r3, [r2, #4]
	LCD_Cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8008c36:	79bb      	ldrb	r3, [r7, #6]
 8008c38:	3310      	adds	r3, #16
 8008c3a:	443b      	add	r3, r7
 8008c3c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	4413      	add	r3, r2
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ff60 	bl	8008b16 <LCD_Cmd>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	54144000 	.word	0x54144000
 8008c64:	20000ae8 	.word	0x20000ae8

08008c68 <__assert_func>:
 8008c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <__assert_func+0x2c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4605      	mov	r5, r0
 8008c74:	68d8      	ldr	r0, [r3, #12]
 8008c76:	b14c      	cbz	r4, 8008c8c <__assert_func+0x24>
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <__assert_func+0x30>)
 8008c7a:	9100      	str	r1, [sp, #0]
 8008c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c80:	4906      	ldr	r1, [pc, #24]	; (8008c9c <__assert_func+0x34>)
 8008c82:	462b      	mov	r3, r5
 8008c84:	f000 ff28 	bl	8009ad8 <fiprintf>
 8008c88:	f001 f84e 	bl	8009d28 <abort>
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <__assert_func+0x38>)
 8008c8e:	461c      	mov	r4, r3
 8008c90:	e7f3      	b.n	8008c7a <__assert_func+0x12>
 8008c92:	bf00      	nop
 8008c94:	20000070 	.word	0x20000070
 8008c98:	0800dbcc 	.word	0x0800dbcc
 8008c9c:	0800dbd9 	.word	0x0800dbd9
 8008ca0:	0800dc07 	.word	0x0800dc07

08008ca4 <__cvt>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	ec55 4b10 	vmov	r4, r5, d0
 8008cac:	2d00      	cmp	r5, #0
 8008cae:	460e      	mov	r6, r1
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	bfbb      	ittet	lt
 8008cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cba:	461d      	movlt	r5, r3
 8008cbc:	2300      	movge	r3, #0
 8008cbe:	232d      	movlt	r3, #45	; 0x2d
 8008cc0:	700b      	strb	r3, [r1, #0]
 8008cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cc8:	4691      	mov	r9, r2
 8008cca:	f023 0820 	bic.w	r8, r3, #32
 8008cce:	bfbc      	itt	lt
 8008cd0:	4622      	movlt	r2, r4
 8008cd2:	4614      	movlt	r4, r2
 8008cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cd8:	d005      	beq.n	8008ce6 <__cvt+0x42>
 8008cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cde:	d100      	bne.n	8008ce2 <__cvt+0x3e>
 8008ce0:	3601      	adds	r6, #1
 8008ce2:	2102      	movs	r1, #2
 8008ce4:	e000      	b.n	8008ce8 <__cvt+0x44>
 8008ce6:	2103      	movs	r1, #3
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	ab02      	add	r3, sp, #8
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	ec45 4b10 	vmov	d0, r4, r5
 8008cf4:	4653      	mov	r3, sl
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	f001 f8a6 	bl	8009e48 <_dtoa_r>
 8008cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d00:	4607      	mov	r7, r0
 8008d02:	d102      	bne.n	8008d0a <__cvt+0x66>
 8008d04:	f019 0f01 	tst.w	r9, #1
 8008d08:	d022      	beq.n	8008d50 <__cvt+0xac>
 8008d0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d0e:	eb07 0906 	add.w	r9, r7, r6
 8008d12:	d110      	bne.n	8008d36 <__cvt+0x92>
 8008d14:	783b      	ldrb	r3, [r7, #0]
 8008d16:	2b30      	cmp	r3, #48	; 0x30
 8008d18:	d10a      	bne.n	8008d30 <__cvt+0x8c>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d26:	b918      	cbnz	r0, 8008d30 <__cvt+0x8c>
 8008d28:	f1c6 0601 	rsb	r6, r6, #1
 8008d2c:	f8ca 6000 	str.w	r6, [sl]
 8008d30:	f8da 3000 	ldr.w	r3, [sl]
 8008d34:	4499      	add	r9, r3
 8008d36:	2200      	movs	r2, #0
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d42:	b108      	cbz	r0, 8008d48 <__cvt+0xa4>
 8008d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d48:	2230      	movs	r2, #48	; 0x30
 8008d4a:	9b03      	ldr	r3, [sp, #12]
 8008d4c:	454b      	cmp	r3, r9
 8008d4e:	d307      	bcc.n	8008d60 <__cvt+0xbc>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d54:	1bdb      	subs	r3, r3, r7
 8008d56:	4638      	mov	r0, r7
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	b004      	add	sp, #16
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	1c59      	adds	r1, r3, #1
 8008d62:	9103      	str	r1, [sp, #12]
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e7f0      	b.n	8008d4a <__cvt+0xa6>

08008d68 <__exponent>:
 8008d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	bfb8      	it	lt
 8008d70:	4249      	neglt	r1, r1
 8008d72:	f803 2b02 	strb.w	r2, [r3], #2
 8008d76:	bfb4      	ite	lt
 8008d78:	222d      	movlt	r2, #45	; 0x2d
 8008d7a:	222b      	movge	r2, #43	; 0x2b
 8008d7c:	2909      	cmp	r1, #9
 8008d7e:	7042      	strb	r2, [r0, #1]
 8008d80:	dd2a      	ble.n	8008dd8 <__exponent+0x70>
 8008d82:	f10d 0207 	add.w	r2, sp, #7
 8008d86:	4617      	mov	r7, r2
 8008d88:	260a      	movs	r6, #10
 8008d8a:	4694      	mov	ip, r2
 8008d8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d90:	fb06 1415 	mls	r4, r6, r5, r1
 8008d94:	3430      	adds	r4, #48	; 0x30
 8008d96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	2c63      	cmp	r4, #99	; 0x63
 8008d9e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008da2:	4629      	mov	r1, r5
 8008da4:	dcf1      	bgt.n	8008d8a <__exponent+0x22>
 8008da6:	3130      	adds	r1, #48	; 0x30
 8008da8:	f1ac 0402 	sub.w	r4, ip, #2
 8008dac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008db0:	1c41      	adds	r1, r0, #1
 8008db2:	4622      	mov	r2, r4
 8008db4:	42ba      	cmp	r2, r7
 8008db6:	d30a      	bcc.n	8008dce <__exponent+0x66>
 8008db8:	f10d 0209 	add.w	r2, sp, #9
 8008dbc:	eba2 020c 	sub.w	r2, r2, ip
 8008dc0:	42bc      	cmp	r4, r7
 8008dc2:	bf88      	it	hi
 8008dc4:	2200      	movhi	r2, #0
 8008dc6:	4413      	add	r3, r2
 8008dc8:	1a18      	subs	r0, r3, r0
 8008dca:	b003      	add	sp, #12
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dce:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008dd2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008dd6:	e7ed      	b.n	8008db4 <__exponent+0x4c>
 8008dd8:	2330      	movs	r3, #48	; 0x30
 8008dda:	3130      	adds	r1, #48	; 0x30
 8008ddc:	7083      	strb	r3, [r0, #2]
 8008dde:	70c1      	strb	r1, [r0, #3]
 8008de0:	1d03      	adds	r3, r0, #4
 8008de2:	e7f1      	b.n	8008dc8 <__exponent+0x60>

08008de4 <_printf_float>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	ed2d 8b02 	vpush	{d8}
 8008dec:	b08d      	sub	sp, #52	; 0x34
 8008dee:	460c      	mov	r4, r1
 8008df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008df4:	4616      	mov	r6, r2
 8008df6:	461f      	mov	r7, r3
 8008df8:	4605      	mov	r5, r0
 8008dfa:	f000 ff09 	bl	8009c10 <_localeconv_r>
 8008dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8008e02:	4650      	mov	r0, sl
 8008e04:	f7f7 fa34 	bl	8000270 <strlen>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	f8d8 3000 	ldr.w	r3, [r8]
 8008e14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e18:	3307      	adds	r3, #7
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	f103 0208 	add.w	r2, r3, #8
 8008e22:	f8c8 2000 	str.w	r2, [r8]
 8008e26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e2e:	9307      	str	r3, [sp, #28]
 8008e30:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e34:	ee08 0a10 	vmov	s16, r0
 8008e38:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e40:	4b9e      	ldr	r3, [pc, #632]	; (80090bc <_printf_float+0x2d8>)
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	f7f7 fe71 	bl	8000b2c <__aeabi_dcmpun>
 8008e4a:	bb88      	cbnz	r0, 8008eb0 <_printf_float+0xcc>
 8008e4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e50:	4b9a      	ldr	r3, [pc, #616]	; (80090bc <_printf_float+0x2d8>)
 8008e52:	f04f 32ff 	mov.w	r2, #4294967295
 8008e56:	f7f7 fe4b 	bl	8000af0 <__aeabi_dcmple>
 8008e5a:	bb48      	cbnz	r0, 8008eb0 <_printf_float+0xcc>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	b110      	cbz	r0, 8008e70 <_printf_float+0x8c>
 8008e6a:	232d      	movs	r3, #45	; 0x2d
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e70:	4a93      	ldr	r2, [pc, #588]	; (80090c0 <_printf_float+0x2dc>)
 8008e72:	4b94      	ldr	r3, [pc, #592]	; (80090c4 <_printf_float+0x2e0>)
 8008e74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e78:	bf94      	ite	ls
 8008e7a:	4690      	movls	r8, r2
 8008e7c:	4698      	movhi	r8, r3
 8008e7e:	2303      	movs	r3, #3
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	9b05      	ldr	r3, [sp, #20]
 8008e84:	f023 0304 	bic.w	r3, r3, #4
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	f04f 0900 	mov.w	r9, #0
 8008e8e:	9700      	str	r7, [sp, #0]
 8008e90:	4633      	mov	r3, r6
 8008e92:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e94:	4621      	mov	r1, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f9da 	bl	8009250 <_printf_common>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f040 8090 	bne.w	8008fc2 <_printf_float+0x1de>
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	b00d      	add	sp, #52	; 0x34
 8008ea8:	ecbd 8b02 	vpop	{d8}
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fe38 	bl	8000b2c <__aeabi_dcmpun>
 8008ebc:	b140      	cbz	r0, 8008ed0 <_printf_float+0xec>
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bfbc      	itt	lt
 8008ec4:	232d      	movlt	r3, #45	; 0x2d
 8008ec6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008eca:	4a7f      	ldr	r2, [pc, #508]	; (80090c8 <_printf_float+0x2e4>)
 8008ecc:	4b7f      	ldr	r3, [pc, #508]	; (80090cc <_printf_float+0x2e8>)
 8008ece:	e7d1      	b.n	8008e74 <_printf_float+0x90>
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ed6:	9206      	str	r2, [sp, #24]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	d13f      	bne.n	8008f5c <_printf_float+0x178>
 8008edc:	2306      	movs	r3, #6
 8008ede:	6063      	str	r3, [r4, #4]
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	6861      	ldr	r1, [r4, #4]
 8008ee4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	ab0a      	add	r3, sp, #40	; 0x28
 8008eee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ef2:	ab09      	add	r3, sp, #36	; 0x24
 8008ef4:	ec49 8b10 	vmov	d0, r8, r9
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	6022      	str	r2, [r4, #0]
 8008efc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f00:	4628      	mov	r0, r5
 8008f02:	f7ff fecf 	bl	8008ca4 <__cvt>
 8008f06:	9b06      	ldr	r3, [sp, #24]
 8008f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0a:	2b47      	cmp	r3, #71	; 0x47
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	d108      	bne.n	8008f22 <_printf_float+0x13e>
 8008f10:	1cc8      	adds	r0, r1, #3
 8008f12:	db02      	blt.n	8008f1a <_printf_float+0x136>
 8008f14:	6863      	ldr	r3, [r4, #4]
 8008f16:	4299      	cmp	r1, r3
 8008f18:	dd41      	ble.n	8008f9e <_printf_float+0x1ba>
 8008f1a:	f1ab 0302 	sub.w	r3, fp, #2
 8008f1e:	fa5f fb83 	uxtb.w	fp, r3
 8008f22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f26:	d820      	bhi.n	8008f6a <_printf_float+0x186>
 8008f28:	3901      	subs	r1, #1
 8008f2a:	465a      	mov	r2, fp
 8008f2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f30:	9109      	str	r1, [sp, #36]	; 0x24
 8008f32:	f7ff ff19 	bl	8008d68 <__exponent>
 8008f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f38:	1813      	adds	r3, r2, r0
 8008f3a:	2a01      	cmp	r2, #1
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	dc02      	bgt.n	8008f48 <_printf_float+0x164>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	07d2      	lsls	r2, r2, #31
 8008f46:	d501      	bpl.n	8008f4c <_printf_float+0x168>
 8008f48:	3301      	adds	r3, #1
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d09c      	beq.n	8008e8e <_printf_float+0xaa>
 8008f54:	232d      	movs	r3, #45	; 0x2d
 8008f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5a:	e798      	b.n	8008e8e <_printf_float+0xaa>
 8008f5c:	9a06      	ldr	r2, [sp, #24]
 8008f5e:	2a47      	cmp	r2, #71	; 0x47
 8008f60:	d1be      	bne.n	8008ee0 <_printf_float+0xfc>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1bc      	bne.n	8008ee0 <_printf_float+0xfc>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e7b9      	b.n	8008ede <_printf_float+0xfa>
 8008f6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f6e:	d118      	bne.n	8008fa2 <_printf_float+0x1be>
 8008f70:	2900      	cmp	r1, #0
 8008f72:	6863      	ldr	r3, [r4, #4]
 8008f74:	dd0b      	ble.n	8008f8e <_printf_float+0x1aa>
 8008f76:	6121      	str	r1, [r4, #16]
 8008f78:	b913      	cbnz	r3, 8008f80 <_printf_float+0x19c>
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	07d0      	lsls	r0, r2, #31
 8008f7e:	d502      	bpl.n	8008f86 <_printf_float+0x1a2>
 8008f80:	3301      	adds	r3, #1
 8008f82:	440b      	add	r3, r1
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f88:	f04f 0900 	mov.w	r9, #0
 8008f8c:	e7de      	b.n	8008f4c <_printf_float+0x168>
 8008f8e:	b913      	cbnz	r3, 8008f96 <_printf_float+0x1b2>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	07d2      	lsls	r2, r2, #31
 8008f94:	d501      	bpl.n	8008f9a <_printf_float+0x1b6>
 8008f96:	3302      	adds	r3, #2
 8008f98:	e7f4      	b.n	8008f84 <_printf_float+0x1a0>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e7f2      	b.n	8008f84 <_printf_float+0x1a0>
 8008f9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	db05      	blt.n	8008fb4 <_printf_float+0x1d0>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	6121      	str	r1, [r4, #16]
 8008fac:	07d8      	lsls	r0, r3, #31
 8008fae:	d5ea      	bpl.n	8008f86 <_printf_float+0x1a2>
 8008fb0:	1c4b      	adds	r3, r1, #1
 8008fb2:	e7e7      	b.n	8008f84 <_printf_float+0x1a0>
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	bfd4      	ite	le
 8008fb8:	f1c1 0202 	rsble	r2, r1, #2
 8008fbc:	2201      	movgt	r2, #1
 8008fbe:	4413      	add	r3, r2
 8008fc0:	e7e0      	b.n	8008f84 <_printf_float+0x1a0>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	055a      	lsls	r2, r3, #21
 8008fc6:	d407      	bmi.n	8008fd8 <_printf_float+0x1f4>
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	4642      	mov	r2, r8
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d12c      	bne.n	8009030 <_printf_float+0x24c>
 8008fd6:	e764      	b.n	8008ea2 <_printf_float+0xbe>
 8008fd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008fdc:	f240 80e0 	bls.w	80091a0 <_printf_float+0x3bc>
 8008fe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f7f7 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d034      	beq.n	800905a <_printf_float+0x276>
 8008ff0:	4a37      	ldr	r2, [pc, #220]	; (80090d0 <_printf_float+0x2ec>)
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f43f af51 	beq.w	8008ea2 <_printf_float+0xbe>
 8009000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009004:	429a      	cmp	r2, r3
 8009006:	db02      	blt.n	800900e <_printf_float+0x22a>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	07d8      	lsls	r0, r3, #31
 800900c:	d510      	bpl.n	8009030 <_printf_float+0x24c>
 800900e:	ee18 3a10 	vmov	r3, s16
 8009012:	4652      	mov	r2, sl
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f af41 	beq.w	8008ea2 <_printf_float+0xbe>
 8009020:	f04f 0800 	mov.w	r8, #0
 8009024:	f104 091a 	add.w	r9, r4, #26
 8009028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800902a:	3b01      	subs	r3, #1
 800902c:	4543      	cmp	r3, r8
 800902e:	dc09      	bgt.n	8009044 <_printf_float+0x260>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	f100 8107 	bmi.w	8009246 <_printf_float+0x462>
 8009038:	68e0      	ldr	r0, [r4, #12]
 800903a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800903c:	4298      	cmp	r0, r3
 800903e:	bfb8      	it	lt
 8009040:	4618      	movlt	r0, r3
 8009042:	e730      	b.n	8008ea6 <_printf_float+0xc2>
 8009044:	2301      	movs	r3, #1
 8009046:	464a      	mov	r2, r9
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af27 	beq.w	8008ea2 <_printf_float+0xbe>
 8009054:	f108 0801 	add.w	r8, r8, #1
 8009058:	e7e6      	b.n	8009028 <_printf_float+0x244>
 800905a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc39      	bgt.n	80090d4 <_printf_float+0x2f0>
 8009060:	4a1b      	ldr	r2, [pc, #108]	; (80090d0 <_printf_float+0x2ec>)
 8009062:	2301      	movs	r3, #1
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	f43f af19 	beq.w	8008ea2 <_printf_float+0xbe>
 8009070:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009074:	4313      	orrs	r3, r2
 8009076:	d102      	bne.n	800907e <_printf_float+0x29a>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	07d9      	lsls	r1, r3, #31
 800907c:	d5d8      	bpl.n	8009030 <_printf_float+0x24c>
 800907e:	ee18 3a10 	vmov	r3, s16
 8009082:	4652      	mov	r2, sl
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af09 	beq.w	8008ea2 <_printf_float+0xbe>
 8009090:	f04f 0900 	mov.w	r9, #0
 8009094:	f104 0a1a 	add.w	sl, r4, #26
 8009098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909a:	425b      	negs	r3, r3
 800909c:	454b      	cmp	r3, r9
 800909e:	dc01      	bgt.n	80090a4 <_printf_float+0x2c0>
 80090a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a2:	e792      	b.n	8008fca <_printf_float+0x1e6>
 80090a4:	2301      	movs	r3, #1
 80090a6:	4652      	mov	r2, sl
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f aef7 	beq.w	8008ea2 <_printf_float+0xbe>
 80090b4:	f109 0901 	add.w	r9, r9, #1
 80090b8:	e7ee      	b.n	8009098 <_printf_float+0x2b4>
 80090ba:	bf00      	nop
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	0800dc08 	.word	0x0800dc08
 80090c4:	0800dc0c 	.word	0x0800dc0c
 80090c8:	0800dc10 	.word	0x0800dc10
 80090cc:	0800dc14 	.word	0x0800dc14
 80090d0:	0800dc18 	.word	0x0800dc18
 80090d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090d8:	429a      	cmp	r2, r3
 80090da:	bfa8      	it	ge
 80090dc:	461a      	movge	r2, r3
 80090de:	2a00      	cmp	r2, #0
 80090e0:	4691      	mov	r9, r2
 80090e2:	dc37      	bgt.n	8009154 <_printf_float+0x370>
 80090e4:	f04f 0b00 	mov.w	fp, #0
 80090e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ec:	f104 021a 	add.w	r2, r4, #26
 80090f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	eba3 0309 	sub.w	r3, r3, r9
 80090f8:	455b      	cmp	r3, fp
 80090fa:	dc33      	bgt.n	8009164 <_printf_float+0x380>
 80090fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009100:	429a      	cmp	r2, r3
 8009102:	db3b      	blt.n	800917c <_printf_float+0x398>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07da      	lsls	r2, r3, #31
 8009108:	d438      	bmi.n	800917c <_printf_float+0x398>
 800910a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800910e:	eba2 0903 	sub.w	r9, r2, r3
 8009112:	9b05      	ldr	r3, [sp, #20]
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	4591      	cmp	r9, r2
 8009118:	bfa8      	it	ge
 800911a:	4691      	movge	r9, r2
 800911c:	f1b9 0f00 	cmp.w	r9, #0
 8009120:	dc35      	bgt.n	800918e <_printf_float+0x3aa>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800912a:	f104 0a1a 	add.w	sl, r4, #26
 800912e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	eba3 0309 	sub.w	r3, r3, r9
 8009138:	4543      	cmp	r3, r8
 800913a:	f77f af79 	ble.w	8009030 <_printf_float+0x24c>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f aeaa 	beq.w	8008ea2 <_printf_float+0xbe>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	e7ec      	b.n	800912e <_printf_float+0x34a>
 8009154:	4613      	mov	r3, r2
 8009156:	4631      	mov	r1, r6
 8009158:	4642      	mov	r2, r8
 800915a:	4628      	mov	r0, r5
 800915c:	47b8      	blx	r7
 800915e:	3001      	adds	r0, #1
 8009160:	d1c0      	bne.n	80090e4 <_printf_float+0x300>
 8009162:	e69e      	b.n	8008ea2 <_printf_float+0xbe>
 8009164:	2301      	movs	r3, #1
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	9205      	str	r2, [sp, #20]
 800916c:	47b8      	blx	r7
 800916e:	3001      	adds	r0, #1
 8009170:	f43f ae97 	beq.w	8008ea2 <_printf_float+0xbe>
 8009174:	9a05      	ldr	r2, [sp, #20]
 8009176:	f10b 0b01 	add.w	fp, fp, #1
 800917a:	e7b9      	b.n	80090f0 <_printf_float+0x30c>
 800917c:	ee18 3a10 	vmov	r3, s16
 8009180:	4652      	mov	r2, sl
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	d1be      	bne.n	800910a <_printf_float+0x326>
 800918c:	e689      	b.n	8008ea2 <_printf_float+0xbe>
 800918e:	9a05      	ldr	r2, [sp, #20]
 8009190:	464b      	mov	r3, r9
 8009192:	4442      	add	r2, r8
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	d1c1      	bne.n	8009122 <_printf_float+0x33e>
 800919e:	e680      	b.n	8008ea2 <_printf_float+0xbe>
 80091a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	dc01      	bgt.n	80091aa <_printf_float+0x3c6>
 80091a6:	07db      	lsls	r3, r3, #31
 80091a8:	d53a      	bpl.n	8009220 <_printf_float+0x43c>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4642      	mov	r2, r8
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f ae74 	beq.w	8008ea2 <_printf_float+0xbe>
 80091ba:	ee18 3a10 	vmov	r3, s16
 80091be:	4652      	mov	r2, sl
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f ae6b 	beq.w	8008ea2 <_printf_float+0xbe>
 80091cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80091d8:	f7f7 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80091dc:	b9d8      	cbnz	r0, 8009216 <_printf_float+0x432>
 80091de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091e2:	f108 0201 	add.w	r2, r8, #1
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	d10e      	bne.n	800920e <_printf_float+0x42a>
 80091f0:	e657      	b.n	8008ea2 <_printf_float+0xbe>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4652      	mov	r2, sl
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae50 	beq.w	8008ea2 <_printf_float+0xbe>
 8009202:	f108 0801 	add.w	r8, r8, #1
 8009206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009208:	3b01      	subs	r3, #1
 800920a:	4543      	cmp	r3, r8
 800920c:	dcf1      	bgt.n	80091f2 <_printf_float+0x40e>
 800920e:	464b      	mov	r3, r9
 8009210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009214:	e6da      	b.n	8008fcc <_printf_float+0x1e8>
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	f104 0a1a 	add.w	sl, r4, #26
 800921e:	e7f2      	b.n	8009206 <_printf_float+0x422>
 8009220:	2301      	movs	r3, #1
 8009222:	4642      	mov	r2, r8
 8009224:	e7df      	b.n	80091e6 <_printf_float+0x402>
 8009226:	2301      	movs	r3, #1
 8009228:	464a      	mov	r2, r9
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	f43f ae36 	beq.w	8008ea2 <_printf_float+0xbe>
 8009236:	f108 0801 	add.w	r8, r8, #1
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	4543      	cmp	r3, r8
 8009242:	dcf0      	bgt.n	8009226 <_printf_float+0x442>
 8009244:	e6f8      	b.n	8009038 <_printf_float+0x254>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	f104 0919 	add.w	r9, r4, #25
 800924e:	e7f4      	b.n	800923a <_printf_float+0x456>

08009250 <_printf_common>:
 8009250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	4616      	mov	r6, r2
 8009256:	4699      	mov	r9, r3
 8009258:	688a      	ldr	r2, [r1, #8]
 800925a:	690b      	ldr	r3, [r1, #16]
 800925c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009260:	4293      	cmp	r3, r2
 8009262:	bfb8      	it	lt
 8009264:	4613      	movlt	r3, r2
 8009266:	6033      	str	r3, [r6, #0]
 8009268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800926c:	4607      	mov	r7, r0
 800926e:	460c      	mov	r4, r1
 8009270:	b10a      	cbz	r2, 8009276 <_printf_common+0x26>
 8009272:	3301      	adds	r3, #1
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	0699      	lsls	r1, r3, #26
 800927a:	bf42      	ittt	mi
 800927c:	6833      	ldrmi	r3, [r6, #0]
 800927e:	3302      	addmi	r3, #2
 8009280:	6033      	strmi	r3, [r6, #0]
 8009282:	6825      	ldr	r5, [r4, #0]
 8009284:	f015 0506 	ands.w	r5, r5, #6
 8009288:	d106      	bne.n	8009298 <_printf_common+0x48>
 800928a:	f104 0a19 	add.w	sl, r4, #25
 800928e:	68e3      	ldr	r3, [r4, #12]
 8009290:	6832      	ldr	r2, [r6, #0]
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	42ab      	cmp	r3, r5
 8009296:	dc26      	bgt.n	80092e6 <_printf_common+0x96>
 8009298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800929c:	1e13      	subs	r3, r2, #0
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	bf18      	it	ne
 80092a2:	2301      	movne	r3, #1
 80092a4:	0692      	lsls	r2, r2, #26
 80092a6:	d42b      	bmi.n	8009300 <_printf_common+0xb0>
 80092a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092ac:	4649      	mov	r1, r9
 80092ae:	4638      	mov	r0, r7
 80092b0:	47c0      	blx	r8
 80092b2:	3001      	adds	r0, #1
 80092b4:	d01e      	beq.n	80092f4 <_printf_common+0xa4>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	f003 0306 	and.w	r3, r3, #6
 80092be:	2b04      	cmp	r3, #4
 80092c0:	bf02      	ittt	eq
 80092c2:	68e5      	ldreq	r5, [r4, #12]
 80092c4:	6833      	ldreq	r3, [r6, #0]
 80092c6:	1aed      	subeq	r5, r5, r3
 80092c8:	68a3      	ldr	r3, [r4, #8]
 80092ca:	bf0c      	ite	eq
 80092cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d0:	2500      	movne	r5, #0
 80092d2:	4293      	cmp	r3, r2
 80092d4:	bfc4      	itt	gt
 80092d6:	1a9b      	subgt	r3, r3, r2
 80092d8:	18ed      	addgt	r5, r5, r3
 80092da:	2600      	movs	r6, #0
 80092dc:	341a      	adds	r4, #26
 80092de:	42b5      	cmp	r5, r6
 80092e0:	d11a      	bne.n	8009318 <_printf_common+0xc8>
 80092e2:	2000      	movs	r0, #0
 80092e4:	e008      	b.n	80092f8 <_printf_common+0xa8>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4652      	mov	r2, sl
 80092ea:	4649      	mov	r1, r9
 80092ec:	4638      	mov	r0, r7
 80092ee:	47c0      	blx	r8
 80092f0:	3001      	adds	r0, #1
 80092f2:	d103      	bne.n	80092fc <_printf_common+0xac>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fc:	3501      	adds	r5, #1
 80092fe:	e7c6      	b.n	800928e <_printf_common+0x3e>
 8009300:	18e1      	adds	r1, r4, r3
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	2030      	movs	r0, #48	; 0x30
 8009306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800930a:	4422      	add	r2, r4
 800930c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009314:	3302      	adds	r3, #2
 8009316:	e7c7      	b.n	80092a8 <_printf_common+0x58>
 8009318:	2301      	movs	r3, #1
 800931a:	4622      	mov	r2, r4
 800931c:	4649      	mov	r1, r9
 800931e:	4638      	mov	r0, r7
 8009320:	47c0      	blx	r8
 8009322:	3001      	adds	r0, #1
 8009324:	d0e6      	beq.n	80092f4 <_printf_common+0xa4>
 8009326:	3601      	adds	r6, #1
 8009328:	e7d9      	b.n	80092de <_printf_common+0x8e>
	...

0800932c <_printf_i>:
 800932c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	7e0f      	ldrb	r7, [r1, #24]
 8009332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009334:	2f78      	cmp	r7, #120	; 0x78
 8009336:	4691      	mov	r9, r2
 8009338:	4680      	mov	r8, r0
 800933a:	460c      	mov	r4, r1
 800933c:	469a      	mov	sl, r3
 800933e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009342:	d807      	bhi.n	8009354 <_printf_i+0x28>
 8009344:	2f62      	cmp	r7, #98	; 0x62
 8009346:	d80a      	bhi.n	800935e <_printf_i+0x32>
 8009348:	2f00      	cmp	r7, #0
 800934a:	f000 80d4 	beq.w	80094f6 <_printf_i+0x1ca>
 800934e:	2f58      	cmp	r7, #88	; 0x58
 8009350:	f000 80c0 	beq.w	80094d4 <_printf_i+0x1a8>
 8009354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800935c:	e03a      	b.n	80093d4 <_printf_i+0xa8>
 800935e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009362:	2b15      	cmp	r3, #21
 8009364:	d8f6      	bhi.n	8009354 <_printf_i+0x28>
 8009366:	a101      	add	r1, pc, #4	; (adr r1, 800936c <_printf_i+0x40>)
 8009368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800936c:	080093c5 	.word	0x080093c5
 8009370:	080093d9 	.word	0x080093d9
 8009374:	08009355 	.word	0x08009355
 8009378:	08009355 	.word	0x08009355
 800937c:	08009355 	.word	0x08009355
 8009380:	08009355 	.word	0x08009355
 8009384:	080093d9 	.word	0x080093d9
 8009388:	08009355 	.word	0x08009355
 800938c:	08009355 	.word	0x08009355
 8009390:	08009355 	.word	0x08009355
 8009394:	08009355 	.word	0x08009355
 8009398:	080094dd 	.word	0x080094dd
 800939c:	08009405 	.word	0x08009405
 80093a0:	08009497 	.word	0x08009497
 80093a4:	08009355 	.word	0x08009355
 80093a8:	08009355 	.word	0x08009355
 80093ac:	080094ff 	.word	0x080094ff
 80093b0:	08009355 	.word	0x08009355
 80093b4:	08009405 	.word	0x08009405
 80093b8:	08009355 	.word	0x08009355
 80093bc:	08009355 	.word	0x08009355
 80093c0:	0800949f 	.word	0x0800949f
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	602a      	str	r2, [r5, #0]
 80093cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093d4:	2301      	movs	r3, #1
 80093d6:	e09f      	b.n	8009518 <_printf_i+0x1ec>
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	0607      	lsls	r7, r0, #24
 80093de:	f103 0104 	add.w	r1, r3, #4
 80093e2:	6029      	str	r1, [r5, #0]
 80093e4:	d501      	bpl.n	80093ea <_printf_i+0xbe>
 80093e6:	681e      	ldr	r6, [r3, #0]
 80093e8:	e003      	b.n	80093f2 <_printf_i+0xc6>
 80093ea:	0646      	lsls	r6, r0, #25
 80093ec:	d5fb      	bpl.n	80093e6 <_printf_i+0xba>
 80093ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	da03      	bge.n	80093fe <_printf_i+0xd2>
 80093f6:	232d      	movs	r3, #45	; 0x2d
 80093f8:	4276      	negs	r6, r6
 80093fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fe:	485a      	ldr	r0, [pc, #360]	; (8009568 <_printf_i+0x23c>)
 8009400:	230a      	movs	r3, #10
 8009402:	e012      	b.n	800942a <_printf_i+0xfe>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	6820      	ldr	r0, [r4, #0]
 8009408:	1d19      	adds	r1, r3, #4
 800940a:	6029      	str	r1, [r5, #0]
 800940c:	0605      	lsls	r5, r0, #24
 800940e:	d501      	bpl.n	8009414 <_printf_i+0xe8>
 8009410:	681e      	ldr	r6, [r3, #0]
 8009412:	e002      	b.n	800941a <_printf_i+0xee>
 8009414:	0641      	lsls	r1, r0, #25
 8009416:	d5fb      	bpl.n	8009410 <_printf_i+0xe4>
 8009418:	881e      	ldrh	r6, [r3, #0]
 800941a:	4853      	ldr	r0, [pc, #332]	; (8009568 <_printf_i+0x23c>)
 800941c:	2f6f      	cmp	r7, #111	; 0x6f
 800941e:	bf0c      	ite	eq
 8009420:	2308      	moveq	r3, #8
 8009422:	230a      	movne	r3, #10
 8009424:	2100      	movs	r1, #0
 8009426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800942a:	6865      	ldr	r5, [r4, #4]
 800942c:	60a5      	str	r5, [r4, #8]
 800942e:	2d00      	cmp	r5, #0
 8009430:	bfa2      	ittt	ge
 8009432:	6821      	ldrge	r1, [r4, #0]
 8009434:	f021 0104 	bicge.w	r1, r1, #4
 8009438:	6021      	strge	r1, [r4, #0]
 800943a:	b90e      	cbnz	r6, 8009440 <_printf_i+0x114>
 800943c:	2d00      	cmp	r5, #0
 800943e:	d04b      	beq.n	80094d8 <_printf_i+0x1ac>
 8009440:	4615      	mov	r5, r2
 8009442:	fbb6 f1f3 	udiv	r1, r6, r3
 8009446:	fb03 6711 	mls	r7, r3, r1, r6
 800944a:	5dc7      	ldrb	r7, [r0, r7]
 800944c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009450:	4637      	mov	r7, r6
 8009452:	42bb      	cmp	r3, r7
 8009454:	460e      	mov	r6, r1
 8009456:	d9f4      	bls.n	8009442 <_printf_i+0x116>
 8009458:	2b08      	cmp	r3, #8
 800945a:	d10b      	bne.n	8009474 <_printf_i+0x148>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	07de      	lsls	r6, r3, #31
 8009460:	d508      	bpl.n	8009474 <_printf_i+0x148>
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	6861      	ldr	r1, [r4, #4]
 8009466:	4299      	cmp	r1, r3
 8009468:	bfde      	ittt	le
 800946a:	2330      	movle	r3, #48	; 0x30
 800946c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009470:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009474:	1b52      	subs	r2, r2, r5
 8009476:	6122      	str	r2, [r4, #16]
 8009478:	f8cd a000 	str.w	sl, [sp]
 800947c:	464b      	mov	r3, r9
 800947e:	aa03      	add	r2, sp, #12
 8009480:	4621      	mov	r1, r4
 8009482:	4640      	mov	r0, r8
 8009484:	f7ff fee4 	bl	8009250 <_printf_common>
 8009488:	3001      	adds	r0, #1
 800948a:	d14a      	bne.n	8009522 <_printf_i+0x1f6>
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	b004      	add	sp, #16
 8009492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	f043 0320 	orr.w	r3, r3, #32
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	4833      	ldr	r0, [pc, #204]	; (800956c <_printf_i+0x240>)
 80094a0:	2778      	movs	r7, #120	; 0x78
 80094a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	6829      	ldr	r1, [r5, #0]
 80094aa:	061f      	lsls	r7, r3, #24
 80094ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80094b0:	d402      	bmi.n	80094b8 <_printf_i+0x18c>
 80094b2:	065f      	lsls	r7, r3, #25
 80094b4:	bf48      	it	mi
 80094b6:	b2b6      	uxthmi	r6, r6
 80094b8:	07df      	lsls	r7, r3, #31
 80094ba:	bf48      	it	mi
 80094bc:	f043 0320 	orrmi.w	r3, r3, #32
 80094c0:	6029      	str	r1, [r5, #0]
 80094c2:	bf48      	it	mi
 80094c4:	6023      	strmi	r3, [r4, #0]
 80094c6:	b91e      	cbnz	r6, 80094d0 <_printf_i+0x1a4>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	f023 0320 	bic.w	r3, r3, #32
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	2310      	movs	r3, #16
 80094d2:	e7a7      	b.n	8009424 <_printf_i+0xf8>
 80094d4:	4824      	ldr	r0, [pc, #144]	; (8009568 <_printf_i+0x23c>)
 80094d6:	e7e4      	b.n	80094a2 <_printf_i+0x176>
 80094d8:	4615      	mov	r5, r2
 80094da:	e7bd      	b.n	8009458 <_printf_i+0x12c>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	6826      	ldr	r6, [r4, #0]
 80094e0:	6961      	ldr	r1, [r4, #20]
 80094e2:	1d18      	adds	r0, r3, #4
 80094e4:	6028      	str	r0, [r5, #0]
 80094e6:	0635      	lsls	r5, r6, #24
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	d501      	bpl.n	80094f0 <_printf_i+0x1c4>
 80094ec:	6019      	str	r1, [r3, #0]
 80094ee:	e002      	b.n	80094f6 <_printf_i+0x1ca>
 80094f0:	0670      	lsls	r0, r6, #25
 80094f2:	d5fb      	bpl.n	80094ec <_printf_i+0x1c0>
 80094f4:	8019      	strh	r1, [r3, #0]
 80094f6:	2300      	movs	r3, #0
 80094f8:	6123      	str	r3, [r4, #16]
 80094fa:	4615      	mov	r5, r2
 80094fc:	e7bc      	b.n	8009478 <_printf_i+0x14c>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	1d1a      	adds	r2, r3, #4
 8009502:	602a      	str	r2, [r5, #0]
 8009504:	681d      	ldr	r5, [r3, #0]
 8009506:	6862      	ldr	r2, [r4, #4]
 8009508:	2100      	movs	r1, #0
 800950a:	4628      	mov	r0, r5
 800950c:	f7f6 fe60 	bl	80001d0 <memchr>
 8009510:	b108      	cbz	r0, 8009516 <_printf_i+0x1ea>
 8009512:	1b40      	subs	r0, r0, r5
 8009514:	6060      	str	r0, [r4, #4]
 8009516:	6863      	ldr	r3, [r4, #4]
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	2300      	movs	r3, #0
 800951c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009520:	e7aa      	b.n	8009478 <_printf_i+0x14c>
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	462a      	mov	r2, r5
 8009526:	4649      	mov	r1, r9
 8009528:	4640      	mov	r0, r8
 800952a:	47d0      	blx	sl
 800952c:	3001      	adds	r0, #1
 800952e:	d0ad      	beq.n	800948c <_printf_i+0x160>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	079b      	lsls	r3, r3, #30
 8009534:	d413      	bmi.n	800955e <_printf_i+0x232>
 8009536:	68e0      	ldr	r0, [r4, #12]
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	4298      	cmp	r0, r3
 800953c:	bfb8      	it	lt
 800953e:	4618      	movlt	r0, r3
 8009540:	e7a6      	b.n	8009490 <_printf_i+0x164>
 8009542:	2301      	movs	r3, #1
 8009544:	4632      	mov	r2, r6
 8009546:	4649      	mov	r1, r9
 8009548:	4640      	mov	r0, r8
 800954a:	47d0      	blx	sl
 800954c:	3001      	adds	r0, #1
 800954e:	d09d      	beq.n	800948c <_printf_i+0x160>
 8009550:	3501      	adds	r5, #1
 8009552:	68e3      	ldr	r3, [r4, #12]
 8009554:	9903      	ldr	r1, [sp, #12]
 8009556:	1a5b      	subs	r3, r3, r1
 8009558:	42ab      	cmp	r3, r5
 800955a:	dcf2      	bgt.n	8009542 <_printf_i+0x216>
 800955c:	e7eb      	b.n	8009536 <_printf_i+0x20a>
 800955e:	2500      	movs	r5, #0
 8009560:	f104 0619 	add.w	r6, r4, #25
 8009564:	e7f5      	b.n	8009552 <_printf_i+0x226>
 8009566:	bf00      	nop
 8009568:	0800dc1a 	.word	0x0800dc1a
 800956c:	0800dc2b 	.word	0x0800dc2b

08009570 <_scanf_float>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	b087      	sub	sp, #28
 8009576:	4617      	mov	r7, r2
 8009578:	9303      	str	r3, [sp, #12]
 800957a:	688b      	ldr	r3, [r1, #8]
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009582:	bf83      	ittte	hi
 8009584:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009588:	195b      	addhi	r3, r3, r5
 800958a:	9302      	strhi	r3, [sp, #8]
 800958c:	2300      	movls	r3, #0
 800958e:	bf86      	itte	hi
 8009590:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009594:	608b      	strhi	r3, [r1, #8]
 8009596:	9302      	strls	r3, [sp, #8]
 8009598:	680b      	ldr	r3, [r1, #0]
 800959a:	468b      	mov	fp, r1
 800959c:	2500      	movs	r5, #0
 800959e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80095a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095aa:	4680      	mov	r8, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	465e      	mov	r6, fp
 80095b0:	46aa      	mov	sl, r5
 80095b2:	46a9      	mov	r9, r5
 80095b4:	9501      	str	r5, [sp, #4]
 80095b6:	68a2      	ldr	r2, [r4, #8]
 80095b8:	b152      	cbz	r2, 80095d0 <_scanf_float+0x60>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b4e      	cmp	r3, #78	; 0x4e
 80095c0:	d864      	bhi.n	800968c <_scanf_float+0x11c>
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d83c      	bhi.n	8009640 <_scanf_float+0xd0>
 80095c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095ca:	b2c8      	uxtb	r0, r1
 80095cc:	280e      	cmp	r0, #14
 80095ce:	d93a      	bls.n	8009646 <_scanf_float+0xd6>
 80095d0:	f1b9 0f00 	cmp.w	r9, #0
 80095d4:	d003      	beq.n	80095de <_scanf_float+0x6e>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095e2:	f1ba 0f01 	cmp.w	sl, #1
 80095e6:	f200 8113 	bhi.w	8009810 <_scanf_float+0x2a0>
 80095ea:	455e      	cmp	r6, fp
 80095ec:	f200 8105 	bhi.w	80097fa <_scanf_float+0x28a>
 80095f0:	2501      	movs	r5, #1
 80095f2:	4628      	mov	r0, r5
 80095f4:	b007      	add	sp, #28
 80095f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80095fe:	2a0d      	cmp	r2, #13
 8009600:	d8e6      	bhi.n	80095d0 <_scanf_float+0x60>
 8009602:	a101      	add	r1, pc, #4	; (adr r1, 8009608 <_scanf_float+0x98>)
 8009604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009608:	08009747 	.word	0x08009747
 800960c:	080095d1 	.word	0x080095d1
 8009610:	080095d1 	.word	0x080095d1
 8009614:	080095d1 	.word	0x080095d1
 8009618:	080097a7 	.word	0x080097a7
 800961c:	0800977f 	.word	0x0800977f
 8009620:	080095d1 	.word	0x080095d1
 8009624:	080095d1 	.word	0x080095d1
 8009628:	08009755 	.word	0x08009755
 800962c:	080095d1 	.word	0x080095d1
 8009630:	080095d1 	.word	0x080095d1
 8009634:	080095d1 	.word	0x080095d1
 8009638:	080095d1 	.word	0x080095d1
 800963c:	0800970d 	.word	0x0800970d
 8009640:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009644:	e7db      	b.n	80095fe <_scanf_float+0x8e>
 8009646:	290e      	cmp	r1, #14
 8009648:	d8c2      	bhi.n	80095d0 <_scanf_float+0x60>
 800964a:	a001      	add	r0, pc, #4	; (adr r0, 8009650 <_scanf_float+0xe0>)
 800964c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009650:	080096ff 	.word	0x080096ff
 8009654:	080095d1 	.word	0x080095d1
 8009658:	080096ff 	.word	0x080096ff
 800965c:	08009793 	.word	0x08009793
 8009660:	080095d1 	.word	0x080095d1
 8009664:	080096ad 	.word	0x080096ad
 8009668:	080096e9 	.word	0x080096e9
 800966c:	080096e9 	.word	0x080096e9
 8009670:	080096e9 	.word	0x080096e9
 8009674:	080096e9 	.word	0x080096e9
 8009678:	080096e9 	.word	0x080096e9
 800967c:	080096e9 	.word	0x080096e9
 8009680:	080096e9 	.word	0x080096e9
 8009684:	080096e9 	.word	0x080096e9
 8009688:	080096e9 	.word	0x080096e9
 800968c:	2b6e      	cmp	r3, #110	; 0x6e
 800968e:	d809      	bhi.n	80096a4 <_scanf_float+0x134>
 8009690:	2b60      	cmp	r3, #96	; 0x60
 8009692:	d8b2      	bhi.n	80095fa <_scanf_float+0x8a>
 8009694:	2b54      	cmp	r3, #84	; 0x54
 8009696:	d077      	beq.n	8009788 <_scanf_float+0x218>
 8009698:	2b59      	cmp	r3, #89	; 0x59
 800969a:	d199      	bne.n	80095d0 <_scanf_float+0x60>
 800969c:	2d07      	cmp	r5, #7
 800969e:	d197      	bne.n	80095d0 <_scanf_float+0x60>
 80096a0:	2508      	movs	r5, #8
 80096a2:	e029      	b.n	80096f8 <_scanf_float+0x188>
 80096a4:	2b74      	cmp	r3, #116	; 0x74
 80096a6:	d06f      	beq.n	8009788 <_scanf_float+0x218>
 80096a8:	2b79      	cmp	r3, #121	; 0x79
 80096aa:	e7f6      	b.n	800969a <_scanf_float+0x12a>
 80096ac:	6821      	ldr	r1, [r4, #0]
 80096ae:	05c8      	lsls	r0, r1, #23
 80096b0:	d51a      	bpl.n	80096e8 <_scanf_float+0x178>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096b8:	6021      	str	r1, [r4, #0]
 80096ba:	f109 0901 	add.w	r9, r9, #1
 80096be:	b11b      	cbz	r3, 80096c8 <_scanf_float+0x158>
 80096c0:	3b01      	subs	r3, #1
 80096c2:	3201      	adds	r2, #1
 80096c4:	9302      	str	r3, [sp, #8]
 80096c6:	60a2      	str	r2, [r4, #8]
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	60a3      	str	r3, [r4, #8]
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	3301      	adds	r3, #1
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	f340 8084 	ble.w	80097e8 <_scanf_float+0x278>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	3301      	adds	r3, #1
 80096e4:	603b      	str	r3, [r7, #0]
 80096e6:	e766      	b.n	80095b6 <_scanf_float+0x46>
 80096e8:	eb1a 0f05 	cmn.w	sl, r5
 80096ec:	f47f af70 	bne.w	80095d0 <_scanf_float+0x60>
 80096f0:	6822      	ldr	r2, [r4, #0]
 80096f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80096f6:	6022      	str	r2, [r4, #0]
 80096f8:	f806 3b01 	strb.w	r3, [r6], #1
 80096fc:	e7e4      	b.n	80096c8 <_scanf_float+0x158>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	0610      	lsls	r0, r2, #24
 8009702:	f57f af65 	bpl.w	80095d0 <_scanf_float+0x60>
 8009706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800970a:	e7f4      	b.n	80096f6 <_scanf_float+0x186>
 800970c:	f1ba 0f00 	cmp.w	sl, #0
 8009710:	d10e      	bne.n	8009730 <_scanf_float+0x1c0>
 8009712:	f1b9 0f00 	cmp.w	r9, #0
 8009716:	d10e      	bne.n	8009736 <_scanf_float+0x1c6>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800971e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009722:	d108      	bne.n	8009736 <_scanf_float+0x1c6>
 8009724:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	f04f 0a01 	mov.w	sl, #1
 800972e:	e7e3      	b.n	80096f8 <_scanf_float+0x188>
 8009730:	f1ba 0f02 	cmp.w	sl, #2
 8009734:	d055      	beq.n	80097e2 <_scanf_float+0x272>
 8009736:	2d01      	cmp	r5, #1
 8009738:	d002      	beq.n	8009740 <_scanf_float+0x1d0>
 800973a:	2d04      	cmp	r5, #4
 800973c:	f47f af48 	bne.w	80095d0 <_scanf_float+0x60>
 8009740:	3501      	adds	r5, #1
 8009742:	b2ed      	uxtb	r5, r5
 8009744:	e7d8      	b.n	80096f8 <_scanf_float+0x188>
 8009746:	f1ba 0f01 	cmp.w	sl, #1
 800974a:	f47f af41 	bne.w	80095d0 <_scanf_float+0x60>
 800974e:	f04f 0a02 	mov.w	sl, #2
 8009752:	e7d1      	b.n	80096f8 <_scanf_float+0x188>
 8009754:	b97d      	cbnz	r5, 8009776 <_scanf_float+0x206>
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	f47f af3c 	bne.w	80095d6 <_scanf_float+0x66>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009764:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009768:	f47f af39 	bne.w	80095de <_scanf_float+0x6e>
 800976c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	2501      	movs	r5, #1
 8009774:	e7c0      	b.n	80096f8 <_scanf_float+0x188>
 8009776:	2d03      	cmp	r5, #3
 8009778:	d0e2      	beq.n	8009740 <_scanf_float+0x1d0>
 800977a:	2d05      	cmp	r5, #5
 800977c:	e7de      	b.n	800973c <_scanf_float+0x1cc>
 800977e:	2d02      	cmp	r5, #2
 8009780:	f47f af26 	bne.w	80095d0 <_scanf_float+0x60>
 8009784:	2503      	movs	r5, #3
 8009786:	e7b7      	b.n	80096f8 <_scanf_float+0x188>
 8009788:	2d06      	cmp	r5, #6
 800978a:	f47f af21 	bne.w	80095d0 <_scanf_float+0x60>
 800978e:	2507      	movs	r5, #7
 8009790:	e7b2      	b.n	80096f8 <_scanf_float+0x188>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	0591      	lsls	r1, r2, #22
 8009796:	f57f af1b 	bpl.w	80095d0 <_scanf_float+0x60>
 800979a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800979e:	6022      	str	r2, [r4, #0]
 80097a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80097a4:	e7a8      	b.n	80096f8 <_scanf_float+0x188>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80097ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097b0:	d006      	beq.n	80097c0 <_scanf_float+0x250>
 80097b2:	0550      	lsls	r0, r2, #21
 80097b4:	f57f af0c 	bpl.w	80095d0 <_scanf_float+0x60>
 80097b8:	f1b9 0f00 	cmp.w	r9, #0
 80097bc:	f43f af0f 	beq.w	80095de <_scanf_float+0x6e>
 80097c0:	0591      	lsls	r1, r2, #22
 80097c2:	bf58      	it	pl
 80097c4:	9901      	ldrpl	r1, [sp, #4]
 80097c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097ca:	bf58      	it	pl
 80097cc:	eba9 0101 	subpl.w	r1, r9, r1
 80097d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097d4:	bf58      	it	pl
 80097d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097da:	6022      	str	r2, [r4, #0]
 80097dc:	f04f 0900 	mov.w	r9, #0
 80097e0:	e78a      	b.n	80096f8 <_scanf_float+0x188>
 80097e2:	f04f 0a03 	mov.w	sl, #3
 80097e6:	e787      	b.n	80096f8 <_scanf_float+0x188>
 80097e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80097ec:	4639      	mov	r1, r7
 80097ee:	4640      	mov	r0, r8
 80097f0:	4798      	blx	r3
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f43f aedf 	beq.w	80095b6 <_scanf_float+0x46>
 80097f8:	e6ea      	b.n	80095d0 <_scanf_float+0x60>
 80097fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009802:	463a      	mov	r2, r7
 8009804:	4640      	mov	r0, r8
 8009806:	4798      	blx	r3
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	3b01      	subs	r3, #1
 800980c:	6123      	str	r3, [r4, #16]
 800980e:	e6ec      	b.n	80095ea <_scanf_float+0x7a>
 8009810:	1e6b      	subs	r3, r5, #1
 8009812:	2b06      	cmp	r3, #6
 8009814:	d825      	bhi.n	8009862 <_scanf_float+0x2f2>
 8009816:	2d02      	cmp	r5, #2
 8009818:	d836      	bhi.n	8009888 <_scanf_float+0x318>
 800981a:	455e      	cmp	r6, fp
 800981c:	f67f aee8 	bls.w	80095f0 <_scanf_float+0x80>
 8009820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009824:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009828:	463a      	mov	r2, r7
 800982a:	4640      	mov	r0, r8
 800982c:	4798      	blx	r3
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	3b01      	subs	r3, #1
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	e7f1      	b.n	800981a <_scanf_float+0x2aa>
 8009836:	9802      	ldr	r0, [sp, #8]
 8009838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800983c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009840:	9002      	str	r0, [sp, #8]
 8009842:	463a      	mov	r2, r7
 8009844:	4640      	mov	r0, r8
 8009846:	4798      	blx	r3
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	3b01      	subs	r3, #1
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009852:	fa5f fa8a 	uxtb.w	sl, sl
 8009856:	f1ba 0f02 	cmp.w	sl, #2
 800985a:	d1ec      	bne.n	8009836 <_scanf_float+0x2c6>
 800985c:	3d03      	subs	r5, #3
 800985e:	b2ed      	uxtb	r5, r5
 8009860:	1b76      	subs	r6, r6, r5
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	05da      	lsls	r2, r3, #23
 8009866:	d52f      	bpl.n	80098c8 <_scanf_float+0x358>
 8009868:	055b      	lsls	r3, r3, #21
 800986a:	d510      	bpl.n	800988e <_scanf_float+0x31e>
 800986c:	455e      	cmp	r6, fp
 800986e:	f67f aebf 	bls.w	80095f0 <_scanf_float+0x80>
 8009872:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800987a:	463a      	mov	r2, r7
 800987c:	4640      	mov	r0, r8
 800987e:	4798      	blx	r3
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	3b01      	subs	r3, #1
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	e7f1      	b.n	800986c <_scanf_float+0x2fc>
 8009888:	46aa      	mov	sl, r5
 800988a:	9602      	str	r6, [sp, #8]
 800988c:	e7df      	b.n	800984e <_scanf_float+0x2de>
 800988e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	2965      	cmp	r1, #101	; 0x65
 8009896:	f103 33ff 	add.w	r3, r3, #4294967295
 800989a:	f106 35ff 	add.w	r5, r6, #4294967295
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	d00c      	beq.n	80098bc <_scanf_float+0x34c>
 80098a2:	2945      	cmp	r1, #69	; 0x45
 80098a4:	d00a      	beq.n	80098bc <_scanf_float+0x34c>
 80098a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098aa:	463a      	mov	r2, r7
 80098ac:	4640      	mov	r0, r8
 80098ae:	4798      	blx	r3
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	1eb5      	subs	r5, r6, #2
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098c0:	463a      	mov	r2, r7
 80098c2:	4640      	mov	r0, r8
 80098c4:	4798      	blx	r3
 80098c6:	462e      	mov	r6, r5
 80098c8:	6825      	ldr	r5, [r4, #0]
 80098ca:	f015 0510 	ands.w	r5, r5, #16
 80098ce:	d158      	bne.n	8009982 <_scanf_float+0x412>
 80098d0:	7035      	strb	r5, [r6, #0]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098dc:	d11c      	bne.n	8009918 <_scanf_float+0x3a8>
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	454b      	cmp	r3, r9
 80098e2:	eba3 0209 	sub.w	r2, r3, r9
 80098e6:	d124      	bne.n	8009932 <_scanf_float+0x3c2>
 80098e8:	2200      	movs	r2, #0
 80098ea:	4659      	mov	r1, fp
 80098ec:	4640      	mov	r0, r8
 80098ee:	f002 fc57 	bl	800c1a0 <_strtod_r>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	6821      	ldr	r1, [r4, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f011 0f02 	tst.w	r1, #2
 80098fc:	ec57 6b10 	vmov	r6, r7, d0
 8009900:	f103 0204 	add.w	r2, r3, #4
 8009904:	d020      	beq.n	8009948 <_scanf_float+0x3d8>
 8009906:	9903      	ldr	r1, [sp, #12]
 8009908:	600a      	str	r2, [r1, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	e9c3 6700 	strd	r6, r7, [r3]
 8009910:	68e3      	ldr	r3, [r4, #12]
 8009912:	3301      	adds	r3, #1
 8009914:	60e3      	str	r3, [r4, #12]
 8009916:	e66c      	b.n	80095f2 <_scanf_float+0x82>
 8009918:	9b04      	ldr	r3, [sp, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0e4      	beq.n	80098e8 <_scanf_float+0x378>
 800991e:	9905      	ldr	r1, [sp, #20]
 8009920:	230a      	movs	r3, #10
 8009922:	462a      	mov	r2, r5
 8009924:	3101      	adds	r1, #1
 8009926:	4640      	mov	r0, r8
 8009928:	f002 fcc2 	bl	800c2b0 <_strtol_r>
 800992c:	9b04      	ldr	r3, [sp, #16]
 800992e:	9e05      	ldr	r6, [sp, #20]
 8009930:	1ac2      	subs	r2, r0, r3
 8009932:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009936:	429e      	cmp	r6, r3
 8009938:	bf28      	it	cs
 800993a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800993e:	4912      	ldr	r1, [pc, #72]	; (8009988 <_scanf_float+0x418>)
 8009940:	4630      	mov	r0, r6
 8009942:	f000 f8f9 	bl	8009b38 <siprintf>
 8009946:	e7cf      	b.n	80098e8 <_scanf_float+0x378>
 8009948:	f011 0f04 	tst.w	r1, #4
 800994c:	9903      	ldr	r1, [sp, #12]
 800994e:	600a      	str	r2, [r1, #0]
 8009950:	d1db      	bne.n	800990a <_scanf_float+0x39a>
 8009952:	f8d3 8000 	ldr.w	r8, [r3]
 8009956:	ee10 2a10 	vmov	r2, s0
 800995a:	ee10 0a10 	vmov	r0, s0
 800995e:	463b      	mov	r3, r7
 8009960:	4639      	mov	r1, r7
 8009962:	f7f7 f8e3 	bl	8000b2c <__aeabi_dcmpun>
 8009966:	b128      	cbz	r0, 8009974 <_scanf_float+0x404>
 8009968:	4808      	ldr	r0, [pc, #32]	; (800998c <_scanf_float+0x41c>)
 800996a:	f000 f9d7 	bl	8009d1c <nanf>
 800996e:	ed88 0a00 	vstr	s0, [r8]
 8009972:	e7cd      	b.n	8009910 <_scanf_float+0x3a0>
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f7 f936 	bl	8000be8 <__aeabi_d2f>
 800997c:	f8c8 0000 	str.w	r0, [r8]
 8009980:	e7c6      	b.n	8009910 <_scanf_float+0x3a0>
 8009982:	2500      	movs	r5, #0
 8009984:	e635      	b.n	80095f2 <_scanf_float+0x82>
 8009986:	bf00      	nop
 8009988:	0800dc3c 	.word	0x0800dc3c
 800998c:	0800dc07 	.word	0x0800dc07

08009990 <std>:
 8009990:	2300      	movs	r3, #0
 8009992:	b510      	push	{r4, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	e9c0 3300 	strd	r3, r3, [r0]
 800999a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800999e:	6083      	str	r3, [r0, #8]
 80099a0:	8181      	strh	r1, [r0, #12]
 80099a2:	6643      	str	r3, [r0, #100]	; 0x64
 80099a4:	81c2      	strh	r2, [r0, #14]
 80099a6:	6183      	str	r3, [r0, #24]
 80099a8:	4619      	mov	r1, r3
 80099aa:	2208      	movs	r2, #8
 80099ac:	305c      	adds	r0, #92	; 0x5c
 80099ae:	f000 f926 	bl	8009bfe <memset>
 80099b2:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <std+0x58>)
 80099b4:	6263      	str	r3, [r4, #36]	; 0x24
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <std+0x5c>)
 80099b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ba:	4b0d      	ldr	r3, [pc, #52]	; (80099f0 <std+0x60>)
 80099bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <std+0x64>)
 80099c0:	6323      	str	r3, [r4, #48]	; 0x30
 80099c2:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <std+0x68>)
 80099c4:	6224      	str	r4, [r4, #32]
 80099c6:	429c      	cmp	r4, r3
 80099c8:	d006      	beq.n	80099d8 <std+0x48>
 80099ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099ce:	4294      	cmp	r4, r2
 80099d0:	d002      	beq.n	80099d8 <std+0x48>
 80099d2:	33d0      	adds	r3, #208	; 0xd0
 80099d4:	429c      	cmp	r4, r3
 80099d6:	d105      	bne.n	80099e4 <std+0x54>
 80099d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e0:	f000 b98a 	b.w	8009cf8 <__retarget_lock_init_recursive>
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	bf00      	nop
 80099e8:	08009b79 	.word	0x08009b79
 80099ec:	08009b9b 	.word	0x08009b9b
 80099f0:	08009bd3 	.word	0x08009bd3
 80099f4:	08009bf7 	.word	0x08009bf7
 80099f8:	20000af0 	.word	0x20000af0

080099fc <stdio_exit_handler>:
 80099fc:	4a02      	ldr	r2, [pc, #8]	; (8009a08 <stdio_exit_handler+0xc>)
 80099fe:	4903      	ldr	r1, [pc, #12]	; (8009a0c <stdio_exit_handler+0x10>)
 8009a00:	4803      	ldr	r0, [pc, #12]	; (8009a10 <stdio_exit_handler+0x14>)
 8009a02:	f000 b87b 	b.w	8009afc <_fwalk_sglue>
 8009a06:	bf00      	nop
 8009a08:	20000018 	.word	0x20000018
 8009a0c:	0800c8f9 	.word	0x0800c8f9
 8009a10:	20000024 	.word	0x20000024

08009a14 <cleanup_stdio>:
 8009a14:	6841      	ldr	r1, [r0, #4]
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <cleanup_stdio+0x34>)
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	d001      	beq.n	8009a24 <cleanup_stdio+0x10>
 8009a20:	f002 ff6a 	bl	800c8f8 <_fflush_r>
 8009a24:	68a1      	ldr	r1, [r4, #8]
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <cleanup_stdio+0x38>)
 8009a28:	4299      	cmp	r1, r3
 8009a2a:	d002      	beq.n	8009a32 <cleanup_stdio+0x1e>
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f002 ff63 	bl	800c8f8 <_fflush_r>
 8009a32:	68e1      	ldr	r1, [r4, #12]
 8009a34:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <cleanup_stdio+0x3c>)
 8009a36:	4299      	cmp	r1, r3
 8009a38:	d004      	beq.n	8009a44 <cleanup_stdio+0x30>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a40:	f002 bf5a 	b.w	800c8f8 <_fflush_r>
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	bf00      	nop
 8009a48:	20000af0 	.word	0x20000af0
 8009a4c:	20000b58 	.word	0x20000b58
 8009a50:	20000bc0 	.word	0x20000bc0

08009a54 <global_stdio_init.part.0>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	4b0b      	ldr	r3, [pc, #44]	; (8009a84 <global_stdio_init.part.0+0x30>)
 8009a58:	4c0b      	ldr	r4, [pc, #44]	; (8009a88 <global_stdio_init.part.0+0x34>)
 8009a5a:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <global_stdio_init.part.0+0x38>)
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	2200      	movs	r2, #0
 8009a62:	2104      	movs	r1, #4
 8009a64:	f7ff ff94 	bl	8009990 <std>
 8009a68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	2109      	movs	r1, #9
 8009a70:	f7ff ff8e 	bl	8009990 <std>
 8009a74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a78:	2202      	movs	r2, #2
 8009a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a7e:	2112      	movs	r1, #18
 8009a80:	f7ff bf86 	b.w	8009990 <std>
 8009a84:	20000c28 	.word	0x20000c28
 8009a88:	20000af0 	.word	0x20000af0
 8009a8c:	080099fd 	.word	0x080099fd

08009a90 <__sfp_lock_acquire>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__sfp_lock_acquire+0x8>)
 8009a92:	f000 b932 	b.w	8009cfa <__retarget_lock_acquire_recursive>
 8009a96:	bf00      	nop
 8009a98:	20000c31 	.word	0x20000c31

08009a9c <__sfp_lock_release>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <__sfp_lock_release+0x8>)
 8009a9e:	f000 b92d 	b.w	8009cfc <__retarget_lock_release_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	20000c31 	.word	0x20000c31

08009aa8 <__sinit>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	4604      	mov	r4, r0
 8009aac:	f7ff fff0 	bl	8009a90 <__sfp_lock_acquire>
 8009ab0:	6a23      	ldr	r3, [r4, #32]
 8009ab2:	b11b      	cbz	r3, 8009abc <__sinit+0x14>
 8009ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab8:	f7ff bff0 	b.w	8009a9c <__sfp_lock_release>
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <__sinit+0x28>)
 8009abe:	6223      	str	r3, [r4, #32]
 8009ac0:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <__sinit+0x2c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f5      	bne.n	8009ab4 <__sinit+0xc>
 8009ac8:	f7ff ffc4 	bl	8009a54 <global_stdio_init.part.0>
 8009acc:	e7f2      	b.n	8009ab4 <__sinit+0xc>
 8009ace:	bf00      	nop
 8009ad0:	08009a15 	.word	0x08009a15
 8009ad4:	20000c28 	.word	0x20000c28

08009ad8 <fiprintf>:
 8009ad8:	b40e      	push	{r1, r2, r3}
 8009ada:	b503      	push	{r0, r1, lr}
 8009adc:	4601      	mov	r1, r0
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	4805      	ldr	r0, [pc, #20]	; (8009af8 <fiprintf+0x20>)
 8009ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	f002 fd65 	bl	800c5b8 <_vfiprintf_r>
 8009aee:	b002      	add	sp, #8
 8009af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af4:	b003      	add	sp, #12
 8009af6:	4770      	bx	lr
 8009af8:	20000070 	.word	0x20000070

08009afc <_fwalk_sglue>:
 8009afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b00:	4607      	mov	r7, r0
 8009b02:	4688      	mov	r8, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	2600      	movs	r6, #0
 8009b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b10:	d505      	bpl.n	8009b1e <_fwalk_sglue+0x22>
 8009b12:	6824      	ldr	r4, [r4, #0]
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	d1f7      	bne.n	8009b08 <_fwalk_sglue+0xc>
 8009b18:	4630      	mov	r0, r6
 8009b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d907      	bls.n	8009b34 <_fwalk_sglue+0x38>
 8009b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	d003      	beq.n	8009b34 <_fwalk_sglue+0x38>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	47c0      	blx	r8
 8009b32:	4306      	orrs	r6, r0
 8009b34:	3568      	adds	r5, #104	; 0x68
 8009b36:	e7e9      	b.n	8009b0c <_fwalk_sglue+0x10>

08009b38 <siprintf>:
 8009b38:	b40e      	push	{r1, r2, r3}
 8009b3a:	b500      	push	{lr}
 8009b3c:	b09c      	sub	sp, #112	; 0x70
 8009b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b40:	9002      	str	r0, [sp, #8]
 8009b42:	9006      	str	r0, [sp, #24]
 8009b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <siprintf+0x38>)
 8009b4a:	9107      	str	r1, [sp, #28]
 8009b4c:	9104      	str	r1, [sp, #16]
 8009b4e:	4909      	ldr	r1, [pc, #36]	; (8009b74 <siprintf+0x3c>)
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	9105      	str	r1, [sp, #20]
 8009b56:	6800      	ldr	r0, [r0, #0]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	a902      	add	r1, sp, #8
 8009b5c:	f002 fc04 	bl	800c368 <_svfiprintf_r>
 8009b60:	9b02      	ldr	r3, [sp, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	b01c      	add	sp, #112	; 0x70
 8009b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b6c:	b003      	add	sp, #12
 8009b6e:	4770      	bx	lr
 8009b70:	20000070 	.word	0x20000070
 8009b74:	ffff0208 	.word	0xffff0208

08009b78 <__sread>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	f000 f86c 	bl	8009c5c <_read_r>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	bfab      	itete	ge
 8009b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b8c:	181b      	addge	r3, r3, r0
 8009b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b92:	bfac      	ite	ge
 8009b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b96:	81a3      	strhlt	r3, [r4, #12]
 8009b98:	bd10      	pop	{r4, pc}

08009b9a <__swrite>:
 8009b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	898b      	ldrh	r3, [r1, #12]
 8009ba2:	05db      	lsls	r3, r3, #23
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	4616      	mov	r6, r2
 8009baa:	d505      	bpl.n	8009bb8 <__swrite+0x1e>
 8009bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f000 f840 	bl	8009c38 <_lseek_r>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	4628      	mov	r0, r5
 8009bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bce:	f000 b857 	b.w	8009c80 <_write_r>

08009bd2 <__sseek>:
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 f82d 	bl	8009c38 <_lseek_r>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	bf15      	itete	ne
 8009be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bee:	81a3      	strheq	r3, [r4, #12]
 8009bf0:	bf18      	it	ne
 8009bf2:	81a3      	strhne	r3, [r4, #12]
 8009bf4:	bd10      	pop	{r4, pc}

08009bf6 <__sclose>:
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 b80d 	b.w	8009c18 <_close_r>

08009bfe <memset>:
 8009bfe:	4402      	add	r2, r0
 8009c00:	4603      	mov	r3, r0
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d100      	bne.n	8009c08 <memset+0xa>
 8009c06:	4770      	bx	lr
 8009c08:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0c:	e7f9      	b.n	8009c02 <memset+0x4>
	...

08009c10 <_localeconv_r>:
 8009c10:	4800      	ldr	r0, [pc, #0]	; (8009c14 <_localeconv_r+0x4>)
 8009c12:	4770      	bx	lr
 8009c14:	20000164 	.word	0x20000164

08009c18 <_close_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d06      	ldr	r5, [pc, #24]	; (8009c34 <_close_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	f7f9 fe79 	bl	800391a <_close>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_close_r+0x1a>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_close_r+0x1a>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20000c2c 	.word	0x20000c2c

08009c38 <_lseek_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d07      	ldr	r5, [pc, #28]	; (8009c58 <_lseek_r+0x20>)
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	4608      	mov	r0, r1
 8009c40:	4611      	mov	r1, r2
 8009c42:	2200      	movs	r2, #0
 8009c44:	602a      	str	r2, [r5, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f7f9 fe8e 	bl	8003968 <_lseek>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_lseek_r+0x1e>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_lseek_r+0x1e>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	20000c2c 	.word	0x20000c2c

08009c5c <_read_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	; (8009c7c <_read_r+0x20>)
 8009c60:	4604      	mov	r4, r0
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	602a      	str	r2, [r5, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f7f9 fe1c 	bl	80038a8 <_read>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_read_r+0x1e>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_read_r+0x1e>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20000c2c 	.word	0x20000c2c

08009c80 <_write_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_write_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f9 fe27 	bl	80038e2 <_write>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_write_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_write_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000c2c 	.word	0x20000c2c

08009ca4 <__errno>:
 8009ca4:	4b01      	ldr	r3, [pc, #4]	; (8009cac <__errno+0x8>)
 8009ca6:	6818      	ldr	r0, [r3, #0]
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000070 	.word	0x20000070

08009cb0 <__libc_init_array>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	4d0d      	ldr	r5, [pc, #52]	; (8009ce8 <__libc_init_array+0x38>)
 8009cb4:	4c0d      	ldr	r4, [pc, #52]	; (8009cec <__libc_init_array+0x3c>)
 8009cb6:	1b64      	subs	r4, r4, r5
 8009cb8:	10a4      	asrs	r4, r4, #2
 8009cba:	2600      	movs	r6, #0
 8009cbc:	42a6      	cmp	r6, r4
 8009cbe:	d109      	bne.n	8009cd4 <__libc_init_array+0x24>
 8009cc0:	4d0b      	ldr	r5, [pc, #44]	; (8009cf0 <__libc_init_array+0x40>)
 8009cc2:	4c0c      	ldr	r4, [pc, #48]	; (8009cf4 <__libc_init_array+0x44>)
 8009cc4:	f003 fc14 	bl	800d4f0 <_init>
 8009cc8:	1b64      	subs	r4, r4, r5
 8009cca:	10a4      	asrs	r4, r4, #2
 8009ccc:	2600      	movs	r6, #0
 8009cce:	42a6      	cmp	r6, r4
 8009cd0:	d105      	bne.n	8009cde <__libc_init_array+0x2e>
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd8:	4798      	blx	r3
 8009cda:	3601      	adds	r6, #1
 8009cdc:	e7ee      	b.n	8009cbc <__libc_init_array+0xc>
 8009cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce2:	4798      	blx	r3
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	e7f2      	b.n	8009cce <__libc_init_array+0x1e>
 8009ce8:	0800dff4 	.word	0x0800dff4
 8009cec:	0800dff4 	.word	0x0800dff4
 8009cf0:	0800dff4 	.word	0x0800dff4
 8009cf4:	0800dff8 	.word	0x0800dff8

08009cf8 <__retarget_lock_init_recursive>:
 8009cf8:	4770      	bx	lr

08009cfa <__retarget_lock_acquire_recursive>:
 8009cfa:	4770      	bx	lr

08009cfc <__retarget_lock_release_recursive>:
 8009cfc:	4770      	bx	lr

08009cfe <memcpy>:
 8009cfe:	440a      	add	r2, r1
 8009d00:	4291      	cmp	r1, r2
 8009d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d06:	d100      	bne.n	8009d0a <memcpy+0xc>
 8009d08:	4770      	bx	lr
 8009d0a:	b510      	push	{r4, lr}
 8009d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d14:	4291      	cmp	r1, r2
 8009d16:	d1f9      	bne.n	8009d0c <memcpy+0xe>
 8009d18:	bd10      	pop	{r4, pc}
	...

08009d1c <nanf>:
 8009d1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d24 <nanf+0x8>
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	7fc00000 	.word	0x7fc00000

08009d28 <abort>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	2006      	movs	r0, #6
 8009d2c:	f002 fef6 	bl	800cb1c <raise>
 8009d30:	2001      	movs	r0, #1
 8009d32:	f7f9 fdaf 	bl	8003894 <_exit>

08009d36 <quorem>:
 8009d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3a:	6903      	ldr	r3, [r0, #16]
 8009d3c:	690c      	ldr	r4, [r1, #16]
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	4607      	mov	r7, r0
 8009d42:	db7e      	blt.n	8009e42 <quorem+0x10c>
 8009d44:	3c01      	subs	r4, #1
 8009d46:	f101 0814 	add.w	r8, r1, #20
 8009d4a:	f100 0514 	add.w	r5, r0, #20
 8009d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d6c:	d331      	bcc.n	8009dd2 <quorem+0x9c>
 8009d6e:	f04f 0e00 	mov.w	lr, #0
 8009d72:	4640      	mov	r0, r8
 8009d74:	46ac      	mov	ip, r5
 8009d76:	46f2      	mov	sl, lr
 8009d78:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d7c:	b293      	uxth	r3, r2
 8009d7e:	fb06 e303 	mla	r3, r6, r3, lr
 8009d82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d86:	0c1a      	lsrs	r2, r3, #16
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8009d8e:	f8dc a000 	ldr.w	sl, [ip]
 8009d92:	fa13 f38a 	uxtah	r3, r3, sl
 8009d96:	fb06 220e 	mla	r2, r6, lr, r2
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009da2:	b292      	uxth	r2, r2
 8009da4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dac:	f8bd 3000 	ldrh.w	r3, [sp]
 8009db0:	4581      	cmp	r9, r0
 8009db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db6:	f84c 3b04 	str.w	r3, [ip], #4
 8009dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dbe:	d2db      	bcs.n	8009d78 <quorem+0x42>
 8009dc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dc4:	b92b      	cbnz	r3, 8009dd2 <quorem+0x9c>
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	429d      	cmp	r5, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	d32c      	bcc.n	8009e2a <quorem+0xf4>
 8009dd0:	613c      	str	r4, [r7, #16]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	f001 f9f0 	bl	800b1b8 <__mcmp>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	db22      	blt.n	8009e22 <quorem+0xec>
 8009ddc:	3601      	adds	r6, #1
 8009dde:	4629      	mov	r1, r5
 8009de0:	2000      	movs	r0, #0
 8009de2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009de6:	f8d1 c000 	ldr.w	ip, [r1]
 8009dea:	b293      	uxth	r3, r2
 8009dec:	1ac3      	subs	r3, r0, r3
 8009dee:	0c12      	lsrs	r2, r2, #16
 8009df0:	fa13 f38c 	uxtah	r3, r3, ip
 8009df4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e02:	45c1      	cmp	r9, r8
 8009e04:	f841 3b04 	str.w	r3, [r1], #4
 8009e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e0c:	d2e9      	bcs.n	8009de2 <quorem+0xac>
 8009e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e16:	b922      	cbnz	r2, 8009e22 <quorem+0xec>
 8009e18:	3b04      	subs	r3, #4
 8009e1a:	429d      	cmp	r5, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	d30a      	bcc.n	8009e36 <quorem+0x100>
 8009e20:	613c      	str	r4, [r7, #16]
 8009e22:	4630      	mov	r0, r6
 8009e24:	b003      	add	sp, #12
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	3b04      	subs	r3, #4
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d1ce      	bne.n	8009dd0 <quorem+0x9a>
 8009e32:	3c01      	subs	r4, #1
 8009e34:	e7c9      	b.n	8009dca <quorem+0x94>
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	3b04      	subs	r3, #4
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	d1f0      	bne.n	8009e20 <quorem+0xea>
 8009e3e:	3c01      	subs	r4, #1
 8009e40:	e7eb      	b.n	8009e1a <quorem+0xe4>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e7ee      	b.n	8009e24 <quorem+0xee>
	...

08009e48 <_dtoa_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	ed2d 8b04 	vpush	{d8-d9}
 8009e50:	69c5      	ldr	r5, [r0, #28]
 8009e52:	b093      	sub	sp, #76	; 0x4c
 8009e54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e58:	ec57 6b10 	vmov	r6, r7, d0
 8009e5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e60:	9107      	str	r1, [sp, #28]
 8009e62:	4604      	mov	r4, r0
 8009e64:	920a      	str	r2, [sp, #40]	; 0x28
 8009e66:	930d      	str	r3, [sp, #52]	; 0x34
 8009e68:	b975      	cbnz	r5, 8009e88 <_dtoa_r+0x40>
 8009e6a:	2010      	movs	r0, #16
 8009e6c:	f000 fe2a 	bl	800aac4 <malloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	61e0      	str	r0, [r4, #28]
 8009e74:	b920      	cbnz	r0, 8009e80 <_dtoa_r+0x38>
 8009e76:	4bae      	ldr	r3, [pc, #696]	; (800a130 <_dtoa_r+0x2e8>)
 8009e78:	21ef      	movs	r1, #239	; 0xef
 8009e7a:	48ae      	ldr	r0, [pc, #696]	; (800a134 <_dtoa_r+0x2ec>)
 8009e7c:	f7fe fef4 	bl	8008c68 <__assert_func>
 8009e80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e84:	6005      	str	r5, [r0, #0]
 8009e86:	60c5      	str	r5, [r0, #12]
 8009e88:	69e3      	ldr	r3, [r4, #28]
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	b151      	cbz	r1, 8009ea4 <_dtoa_r+0x5c>
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	604a      	str	r2, [r1, #4]
 8009e92:	2301      	movs	r3, #1
 8009e94:	4093      	lsls	r3, r2
 8009e96:	608b      	str	r3, [r1, #8]
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 ff07 	bl	800acac <_Bfree>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	1e3b      	subs	r3, r7, #0
 8009ea6:	bfbb      	ittet	lt
 8009ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eac:	9303      	strlt	r3, [sp, #12]
 8009eae:	2300      	movge	r3, #0
 8009eb0:	2201      	movlt	r2, #1
 8009eb2:	bfac      	ite	ge
 8009eb4:	f8c8 3000 	strge.w	r3, [r8]
 8009eb8:	f8c8 2000 	strlt.w	r2, [r8]
 8009ebc:	4b9e      	ldr	r3, [pc, #632]	; (800a138 <_dtoa_r+0x2f0>)
 8009ebe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ec2:	ea33 0308 	bics.w	r3, r3, r8
 8009ec6:	d11b      	bne.n	8009f00 <_dtoa_r+0xb8>
 8009ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009ed4:	4333      	orrs	r3, r6
 8009ed6:	f000 8593 	beq.w	800aa00 <_dtoa_r+0xbb8>
 8009eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009edc:	b963      	cbnz	r3, 8009ef8 <_dtoa_r+0xb0>
 8009ede:	4b97      	ldr	r3, [pc, #604]	; (800a13c <_dtoa_r+0x2f4>)
 8009ee0:	e027      	b.n	8009f32 <_dtoa_r+0xea>
 8009ee2:	4b97      	ldr	r3, [pc, #604]	; (800a140 <_dtoa_r+0x2f8>)
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	9800      	ldr	r0, [sp, #0]
 8009eee:	b013      	add	sp, #76	; 0x4c
 8009ef0:	ecbd 8b04 	vpop	{d8-d9}
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	4b90      	ldr	r3, [pc, #576]	; (800a13c <_dtoa_r+0x2f4>)
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	3303      	adds	r3, #3
 8009efe:	e7f3      	b.n	8009ee8 <_dtoa_r+0xa0>
 8009f00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f04:	2200      	movs	r2, #0
 8009f06:	ec51 0b17 	vmov	r0, r1, d7
 8009f0a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f0e:	eef0 8a67 	vmov.f32	s17, s15
 8009f12:	2300      	movs	r3, #0
 8009f14:	f7f6 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f18:	4681      	mov	r9, r0
 8009f1a:	b160      	cbz	r0, 8009f36 <_dtoa_r+0xee>
 8009f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f1e:	2301      	movs	r3, #1
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 8568 	beq.w	800a9fa <_dtoa_r+0xbb2>
 8009f2a:	4b86      	ldr	r3, [pc, #536]	; (800a144 <_dtoa_r+0x2fc>)
 8009f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	e7da      	b.n	8009eec <_dtoa_r+0xa4>
 8009f36:	aa10      	add	r2, sp, #64	; 0x40
 8009f38:	a911      	add	r1, sp, #68	; 0x44
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f40:	eef0 0a68 	vmov.f32	s1, s17
 8009f44:	f001 fa4e 	bl	800b3e4 <__d2b>
 8009f48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	d07f      	beq.n	800a052 <_dtoa_r+0x20a>
 8009f52:	ee18 3a90 	vmov	r3, s17
 8009f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f5e:	ec51 0b18 	vmov	r0, r1, d8
 8009f62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f6e:	4619      	mov	r1, r3
 8009f70:	2200      	movs	r2, #0
 8009f72:	4b75      	ldr	r3, [pc, #468]	; (800a148 <_dtoa_r+0x300>)
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	a367      	add	r3, pc, #412	; (adr r3, 800a118 <_dtoa_r+0x2d0>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f7f6 fb3b 	bl	80005f8 <__aeabi_dmul>
 8009f82:	a367      	add	r3, pc, #412	; (adr r3, 800a120 <_dtoa_r+0x2d8>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 f980 	bl	800028c <__adddf3>
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	4628      	mov	r0, r5
 8009f90:	460f      	mov	r7, r1
 8009f92:	f7f6 fac7 	bl	8000524 <__aeabi_i2d>
 8009f96:	a364      	add	r3, pc, #400	; (adr r3, 800a128 <_dtoa_r+0x2e0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	f7f6 f970 	bl	800028c <__adddf3>
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	f7f6 fdd2 	bl	8000b58 <__aeabi_d2iz>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4683      	mov	fp, r0
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	f7f6 fd8d 	bl	8000adc <__aeabi_dcmplt>
 8009fc2:	b148      	cbz	r0, 8009fd8 <_dtoa_r+0x190>
 8009fc4:	4658      	mov	r0, fp
 8009fc6:	f7f6 faad 	bl	8000524 <__aeabi_i2d>
 8009fca:	4632      	mov	r2, r6
 8009fcc:	463b      	mov	r3, r7
 8009fce:	f7f6 fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fd2:	b908      	cbnz	r0, 8009fd8 <_dtoa_r+0x190>
 8009fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fd8:	f1bb 0f16 	cmp.w	fp, #22
 8009fdc:	d857      	bhi.n	800a08e <_dtoa_r+0x246>
 8009fde:	4b5b      	ldr	r3, [pc, #364]	; (800a14c <_dtoa_r+0x304>)
 8009fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	ec51 0b18 	vmov	r0, r1, d8
 8009fec:	f7f6 fd76 	bl	8000adc <__aeabi_dcmplt>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d04e      	beq.n	800a092 <_dtoa_r+0x24a>
 8009ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ffe:	1b5b      	subs	r3, r3, r5
 800a000:	1e5a      	subs	r2, r3, #1
 800a002:	bf45      	ittet	mi
 800a004:	f1c3 0301 	rsbmi	r3, r3, #1
 800a008:	9305      	strmi	r3, [sp, #20]
 800a00a:	2300      	movpl	r3, #0
 800a00c:	2300      	movmi	r3, #0
 800a00e:	9206      	str	r2, [sp, #24]
 800a010:	bf54      	ite	pl
 800a012:	9305      	strpl	r3, [sp, #20]
 800a014:	9306      	strmi	r3, [sp, #24]
 800a016:	f1bb 0f00 	cmp.w	fp, #0
 800a01a:	db3c      	blt.n	800a096 <_dtoa_r+0x24e>
 800a01c:	9b06      	ldr	r3, [sp, #24]
 800a01e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a022:	445b      	add	r3, fp
 800a024:	9306      	str	r3, [sp, #24]
 800a026:	2300      	movs	r3, #0
 800a028:	9308      	str	r3, [sp, #32]
 800a02a:	9b07      	ldr	r3, [sp, #28]
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d868      	bhi.n	800a102 <_dtoa_r+0x2ba>
 800a030:	2b05      	cmp	r3, #5
 800a032:	bfc4      	itt	gt
 800a034:	3b04      	subgt	r3, #4
 800a036:	9307      	strgt	r3, [sp, #28]
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	f1a3 0302 	sub.w	r3, r3, #2
 800a03e:	bfcc      	ite	gt
 800a040:	2500      	movgt	r5, #0
 800a042:	2501      	movle	r5, #1
 800a044:	2b03      	cmp	r3, #3
 800a046:	f200 8085 	bhi.w	800a154 <_dtoa_r+0x30c>
 800a04a:	e8df f003 	tbb	[pc, r3]
 800a04e:	3b2e      	.short	0x3b2e
 800a050:	5839      	.short	0x5839
 800a052:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a056:	441d      	add	r5, r3
 800a058:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	bfc1      	itttt	gt
 800a060:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a064:	fa08 f803 	lslgt.w	r8, r8, r3
 800a068:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a06c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a070:	bfd6      	itet	le
 800a072:	f1c3 0320 	rsble	r3, r3, #32
 800a076:	ea48 0003 	orrgt.w	r0, r8, r3
 800a07a:	fa06 f003 	lslle.w	r0, r6, r3
 800a07e:	f7f6 fa41 	bl	8000504 <__aeabi_ui2d>
 800a082:	2201      	movs	r2, #1
 800a084:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a088:	3d01      	subs	r5, #1
 800a08a:	920e      	str	r2, [sp, #56]	; 0x38
 800a08c:	e76f      	b.n	8009f6e <_dtoa_r+0x126>
 800a08e:	2301      	movs	r3, #1
 800a090:	e7b3      	b.n	8009ffa <_dtoa_r+0x1b2>
 800a092:	900c      	str	r0, [sp, #48]	; 0x30
 800a094:	e7b2      	b.n	8009ffc <_dtoa_r+0x1b4>
 800a096:	9b05      	ldr	r3, [sp, #20]
 800a098:	eba3 030b 	sub.w	r3, r3, fp
 800a09c:	9305      	str	r3, [sp, #20]
 800a09e:	f1cb 0300 	rsb	r3, fp, #0
 800a0a2:	9308      	str	r3, [sp, #32]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a8:	e7bf      	b.n	800a02a <_dtoa_r+0x1e2>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc52      	bgt.n	800a15a <_dtoa_r+0x312>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a0be:	e00b      	b.n	800a0d8 <_dtoa_r+0x290>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e7f3      	b.n	800a0ac <_dtoa_r+0x264>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ca:	445b      	add	r3, fp
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	bfb8      	it	lt
 800a0d6:	2301      	movlt	r3, #1
 800a0d8:	69e0      	ldr	r0, [r4, #28]
 800a0da:	2100      	movs	r1, #0
 800a0dc:	2204      	movs	r2, #4
 800a0de:	f102 0614 	add.w	r6, r2, #20
 800a0e2:	429e      	cmp	r6, r3
 800a0e4:	d93d      	bls.n	800a162 <_dtoa_r+0x31a>
 800a0e6:	6041      	str	r1, [r0, #4]
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fd9f 	bl	800ac2c <_Balloc>
 800a0ee:	9000      	str	r0, [sp, #0]
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d139      	bne.n	800a168 <_dtoa_r+0x320>
 800a0f4:	4b16      	ldr	r3, [pc, #88]	; (800a150 <_dtoa_r+0x308>)
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a0fc:	e6bd      	b.n	8009e7a <_dtoa_r+0x32>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7e1      	b.n	800a0c6 <_dtoa_r+0x27e>
 800a102:	2501      	movs	r5, #1
 800a104:	2300      	movs	r3, #0
 800a106:	9307      	str	r3, [sp, #28]
 800a108:	9509      	str	r5, [sp, #36]	; 0x24
 800a10a:	f04f 33ff 	mov.w	r3, #4294967295
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	2200      	movs	r2, #0
 800a114:	2312      	movs	r3, #18
 800a116:	e7d1      	b.n	800a0bc <_dtoa_r+0x274>
 800a118:	636f4361 	.word	0x636f4361
 800a11c:	3fd287a7 	.word	0x3fd287a7
 800a120:	8b60c8b3 	.word	0x8b60c8b3
 800a124:	3fc68a28 	.word	0x3fc68a28
 800a128:	509f79fb 	.word	0x509f79fb
 800a12c:	3fd34413 	.word	0x3fd34413
 800a130:	0800dc4e 	.word	0x0800dc4e
 800a134:	0800dc65 	.word	0x0800dc65
 800a138:	7ff00000 	.word	0x7ff00000
 800a13c:	0800dc4a 	.word	0x0800dc4a
 800a140:	0800dc41 	.word	0x0800dc41
 800a144:	0800dc19 	.word	0x0800dc19
 800a148:	3ff80000 	.word	0x3ff80000
 800a14c:	0800dd50 	.word	0x0800dd50
 800a150:	0800dcbd 	.word	0x0800dcbd
 800a154:	2301      	movs	r3, #1
 800a156:	9309      	str	r3, [sp, #36]	; 0x24
 800a158:	e7d7      	b.n	800a10a <_dtoa_r+0x2c2>
 800a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	9304      	str	r3, [sp, #16]
 800a160:	e7ba      	b.n	800a0d8 <_dtoa_r+0x290>
 800a162:	3101      	adds	r1, #1
 800a164:	0052      	lsls	r2, r2, #1
 800a166:	e7ba      	b.n	800a0de <_dtoa_r+0x296>
 800a168:	69e3      	ldr	r3, [r4, #28]
 800a16a:	9a00      	ldr	r2, [sp, #0]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	2b0e      	cmp	r3, #14
 800a172:	f200 80a8 	bhi.w	800a2c6 <_dtoa_r+0x47e>
 800a176:	2d00      	cmp	r5, #0
 800a178:	f000 80a5 	beq.w	800a2c6 <_dtoa_r+0x47e>
 800a17c:	f1bb 0f00 	cmp.w	fp, #0
 800a180:	dd38      	ble.n	800a1f4 <_dtoa_r+0x3ac>
 800a182:	4bc0      	ldr	r3, [pc, #768]	; (800a484 <_dtoa_r+0x63c>)
 800a184:	f00b 020f 	and.w	r2, fp, #15
 800a188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a18c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a190:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a194:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a198:	d019      	beq.n	800a1ce <_dtoa_r+0x386>
 800a19a:	4bbb      	ldr	r3, [pc, #748]	; (800a488 <_dtoa_r+0x640>)
 800a19c:	ec51 0b18 	vmov	r0, r1, d8
 800a1a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1a4:	f7f6 fb52 	bl	800084c <__aeabi_ddiv>
 800a1a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ac:	f008 080f 	and.w	r8, r8, #15
 800a1b0:	2503      	movs	r5, #3
 800a1b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a488 <_dtoa_r+0x640>
 800a1b6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ba:	d10a      	bne.n	800a1d2 <_dtoa_r+0x38a>
 800a1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	f7f6 fb42 	bl	800084c <__aeabi_ddiv>
 800a1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1cc:	e02b      	b.n	800a226 <_dtoa_r+0x3de>
 800a1ce:	2502      	movs	r5, #2
 800a1d0:	e7ef      	b.n	800a1b2 <_dtoa_r+0x36a>
 800a1d2:	f018 0f01 	tst.w	r8, #1
 800a1d6:	d008      	beq.n	800a1ea <_dtoa_r+0x3a2>
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460f      	mov	r7, r1
 800a1ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1ee:	f109 0908 	add.w	r9, r9, #8
 800a1f2:	e7e0      	b.n	800a1b6 <_dtoa_r+0x36e>
 800a1f4:	f000 809f 	beq.w	800a336 <_dtoa_r+0x4ee>
 800a1f8:	f1cb 0600 	rsb	r6, fp, #0
 800a1fc:	4ba1      	ldr	r3, [pc, #644]	; (800a484 <_dtoa_r+0x63c>)
 800a1fe:	4fa2      	ldr	r7, [pc, #648]	; (800a488 <_dtoa_r+0x640>)
 800a200:	f006 020f 	and.w	r2, r6, #15
 800a204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	ec51 0b18 	vmov	r0, r1, d8
 800a210:	f7f6 f9f2 	bl	80005f8 <__aeabi_dmul>
 800a214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a218:	1136      	asrs	r6, r6, #4
 800a21a:	2300      	movs	r3, #0
 800a21c:	2502      	movs	r5, #2
 800a21e:	2e00      	cmp	r6, #0
 800a220:	d17e      	bne.n	800a320 <_dtoa_r+0x4d8>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1d0      	bne.n	800a1c8 <_dtoa_r+0x380>
 800a226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a228:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 8084 	beq.w	800a33a <_dtoa_r+0x4f2>
 800a232:	4b96      	ldr	r3, [pc, #600]	; (800a48c <_dtoa_r+0x644>)
 800a234:	2200      	movs	r2, #0
 800a236:	4640      	mov	r0, r8
 800a238:	4649      	mov	r1, r9
 800a23a:	f7f6 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d07b      	beq.n	800a33a <_dtoa_r+0x4f2>
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d078      	beq.n	800a33a <_dtoa_r+0x4f2>
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd39      	ble.n	800a2c2 <_dtoa_r+0x47a>
 800a24e:	4b90      	ldr	r3, [pc, #576]	; (800a490 <_dtoa_r+0x648>)
 800a250:	2200      	movs	r2, #0
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	9e01      	ldr	r6, [sp, #4]
 800a260:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a264:	3501      	adds	r5, #1
 800a266:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a26a:	4628      	mov	r0, r5
 800a26c:	f7f6 f95a 	bl	8000524 <__aeabi_i2d>
 800a270:	4642      	mov	r2, r8
 800a272:	464b      	mov	r3, r9
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	4b86      	ldr	r3, [pc, #536]	; (800a494 <_dtoa_r+0x64c>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	f7f6 f806 	bl	800028c <__adddf3>
 800a280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	2e00      	cmp	r6, #0
 800a28c:	d158      	bne.n	800a340 <_dtoa_r+0x4f8>
 800a28e:	4b82      	ldr	r3, [pc, #520]	; (800a498 <_dtoa_r+0x650>)
 800a290:	2200      	movs	r2, #0
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f5 fff7 	bl	8000288 <__aeabi_dsub>
 800a29a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a29e:	4680      	mov	r8, r0
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	f7f6 fc39 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f040 8296 	bne.w	800a7d8 <_dtoa_r+0x990>
 800a2ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7f6 fc10 	bl	8000adc <__aeabi_dcmplt>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f040 8289 	bne.w	800a7d4 <_dtoa_r+0x98c>
 800a2c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f2c0 814e 	blt.w	800a56a <_dtoa_r+0x722>
 800a2ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a2d2:	f300 814a 	bgt.w	800a56a <_dtoa_r+0x722>
 800a2d6:	4b6b      	ldr	r3, [pc, #428]	; (800a484 <_dtoa_r+0x63c>)
 800a2d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f280 80dc 	bge.w	800a4a0 <_dtoa_r+0x658>
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f300 80d8 	bgt.w	800a4a0 <_dtoa_r+0x658>
 800a2f0:	f040 826f 	bne.w	800a7d2 <_dtoa_r+0x98a>
 800a2f4:	4b68      	ldr	r3, [pc, #416]	; (800a498 <_dtoa_r+0x650>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a304:	f7f6 fbfe 	bl	8000b04 <__aeabi_dcmpge>
 800a308:	9e04      	ldr	r6, [sp, #16]
 800a30a:	4637      	mov	r7, r6
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f040 8245 	bne.w	800a79c <_dtoa_r+0x954>
 800a312:	9d00      	ldr	r5, [sp, #0]
 800a314:	2331      	movs	r3, #49	; 0x31
 800a316:	f805 3b01 	strb.w	r3, [r5], #1
 800a31a:	f10b 0b01 	add.w	fp, fp, #1
 800a31e:	e241      	b.n	800a7a4 <_dtoa_r+0x95c>
 800a320:	07f2      	lsls	r2, r6, #31
 800a322:	d505      	bpl.n	800a330 <_dtoa_r+0x4e8>
 800a324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	3501      	adds	r5, #1
 800a32e:	2301      	movs	r3, #1
 800a330:	1076      	asrs	r6, r6, #1
 800a332:	3708      	adds	r7, #8
 800a334:	e773      	b.n	800a21e <_dtoa_r+0x3d6>
 800a336:	2502      	movs	r5, #2
 800a338:	e775      	b.n	800a226 <_dtoa_r+0x3de>
 800a33a:	9e04      	ldr	r6, [sp, #16]
 800a33c:	465f      	mov	r7, fp
 800a33e:	e792      	b.n	800a266 <_dtoa_r+0x41e>
 800a340:	9900      	ldr	r1, [sp, #0]
 800a342:	4b50      	ldr	r3, [pc, #320]	; (800a484 <_dtoa_r+0x63c>)
 800a344:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a348:	4431      	add	r1, r6
 800a34a:	9102      	str	r1, [sp, #8]
 800a34c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a34e:	eeb0 9a47 	vmov.f32	s18, s14
 800a352:	eef0 9a67 	vmov.f32	s19, s15
 800a356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a35a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a35e:	2900      	cmp	r1, #0
 800a360:	d044      	beq.n	800a3ec <_dtoa_r+0x5a4>
 800a362:	494e      	ldr	r1, [pc, #312]	; (800a49c <_dtoa_r+0x654>)
 800a364:	2000      	movs	r0, #0
 800a366:	f7f6 fa71 	bl	800084c <__aeabi_ddiv>
 800a36a:	ec53 2b19 	vmov	r2, r3, d9
 800a36e:	f7f5 ff8b 	bl	8000288 <__aeabi_dsub>
 800a372:	9d00      	ldr	r5, [sp, #0]
 800a374:	ec41 0b19 	vmov	d9, r0, r1
 800a378:	4649      	mov	r1, r9
 800a37a:	4640      	mov	r0, r8
 800a37c:	f7f6 fbec 	bl	8000b58 <__aeabi_d2iz>
 800a380:	4606      	mov	r6, r0
 800a382:	f7f6 f8cf 	bl	8000524 <__aeabi_i2d>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4640      	mov	r0, r8
 800a38c:	4649      	mov	r1, r9
 800a38e:	f7f5 ff7b 	bl	8000288 <__aeabi_dsub>
 800a392:	3630      	adds	r6, #48	; 0x30
 800a394:	f805 6b01 	strb.w	r6, [r5], #1
 800a398:	ec53 2b19 	vmov	r2, r3, d9
 800a39c:	4680      	mov	r8, r0
 800a39e:	4689      	mov	r9, r1
 800a3a0:	f7f6 fb9c 	bl	8000adc <__aeabi_dcmplt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d164      	bne.n	800a472 <_dtoa_r+0x62a>
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	4937      	ldr	r1, [pc, #220]	; (800a48c <_dtoa_r+0x644>)
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f7f5 ff6a 	bl	8000288 <__aeabi_dsub>
 800a3b4:	ec53 2b19 	vmov	r2, r3, d9
 800a3b8:	f7f6 fb90 	bl	8000adc <__aeabi_dcmplt>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	f040 80b6 	bne.w	800a52e <_dtoa_r+0x6e6>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	429d      	cmp	r5, r3
 800a3c6:	f43f af7c 	beq.w	800a2c2 <_dtoa_r+0x47a>
 800a3ca:	4b31      	ldr	r3, [pc, #196]	; (800a490 <_dtoa_r+0x648>)
 800a3cc:	ec51 0b19 	vmov	r0, r1, d9
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f7f6 f911 	bl	80005f8 <__aeabi_dmul>
 800a3d6:	4b2e      	ldr	r3, [pc, #184]	; (800a490 <_dtoa_r+0x648>)
 800a3d8:	ec41 0b19 	vmov	d9, r0, r1
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4689      	mov	r9, r1
 800a3ea:	e7c5      	b.n	800a378 <_dtoa_r+0x530>
 800a3ec:	ec51 0b17 	vmov	r0, r1, d7
 800a3f0:	f7f6 f902 	bl	80005f8 <__aeabi_dmul>
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	9d00      	ldr	r5, [sp, #0]
 800a3f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3fa:	ec41 0b19 	vmov	d9, r0, r1
 800a3fe:	4649      	mov	r1, r9
 800a400:	4640      	mov	r0, r8
 800a402:	f7f6 fba9 	bl	8000b58 <__aeabi_d2iz>
 800a406:	4606      	mov	r6, r0
 800a408:	f7f6 f88c 	bl	8000524 <__aeabi_i2d>
 800a40c:	3630      	adds	r6, #48	; 0x30
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f5 ff37 	bl	8000288 <__aeabi_dsub>
 800a41a:	f805 6b01 	strb.w	r6, [r5], #1
 800a41e:	9b02      	ldr	r3, [sp, #8]
 800a420:	429d      	cmp	r5, r3
 800a422:	4680      	mov	r8, r0
 800a424:	4689      	mov	r9, r1
 800a426:	f04f 0200 	mov.w	r2, #0
 800a42a:	d124      	bne.n	800a476 <_dtoa_r+0x62e>
 800a42c:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <_dtoa_r+0x654>)
 800a42e:	ec51 0b19 	vmov	r0, r1, d9
 800a432:	f7f5 ff2b 	bl	800028c <__adddf3>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4640      	mov	r0, r8
 800a43c:	4649      	mov	r1, r9
 800a43e:	f7f6 fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 800a442:	2800      	cmp	r0, #0
 800a444:	d173      	bne.n	800a52e <_dtoa_r+0x6e6>
 800a446:	ec53 2b19 	vmov	r2, r3, d9
 800a44a:	4914      	ldr	r1, [pc, #80]	; (800a49c <_dtoa_r+0x654>)
 800a44c:	2000      	movs	r0, #0
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f6 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f af2f 	beq.w	800a2c2 <_dtoa_r+0x47a>
 800a464:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a466:	1e6b      	subs	r3, r5, #1
 800a468:	930f      	str	r3, [sp, #60]	; 0x3c
 800a46a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	d0f8      	beq.n	800a464 <_dtoa_r+0x61c>
 800a472:	46bb      	mov	fp, r7
 800a474:	e04a      	b.n	800a50c <_dtoa_r+0x6c4>
 800a476:	4b06      	ldr	r3, [pc, #24]	; (800a490 <_dtoa_r+0x648>)
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	e7bd      	b.n	800a3fe <_dtoa_r+0x5b6>
 800a482:	bf00      	nop
 800a484:	0800dd50 	.word	0x0800dd50
 800a488:	0800dd28 	.word	0x0800dd28
 800a48c:	3ff00000 	.word	0x3ff00000
 800a490:	40240000 	.word	0x40240000
 800a494:	401c0000 	.word	0x401c0000
 800a498:	40140000 	.word	0x40140000
 800a49c:	3fe00000 	.word	0x3fe00000
 800a4a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4a4:	9d00      	ldr	r5, [sp, #0]
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	f7f6 f9cd 	bl	800084c <__aeabi_ddiv>
 800a4b2:	f7f6 fb51 	bl	8000b58 <__aeabi_d2iz>
 800a4b6:	9001      	str	r0, [sp, #4]
 800a4b8:	f7f6 f834 	bl	8000524 <__aeabi_i2d>
 800a4bc:	4642      	mov	r2, r8
 800a4be:	464b      	mov	r3, r9
 800a4c0:	f7f6 f89a 	bl	80005f8 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 fedc 	bl	8000288 <__aeabi_dsub>
 800a4d0:	9e01      	ldr	r6, [sp, #4]
 800a4d2:	9f04      	ldr	r7, [sp, #16]
 800a4d4:	3630      	adds	r6, #48	; 0x30
 800a4d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a4da:	9e00      	ldr	r6, [sp, #0]
 800a4dc:	1bae      	subs	r6, r5, r6
 800a4de:	42b7      	cmp	r7, r6
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	d134      	bne.n	800a550 <_dtoa_r+0x708>
 800a4e6:	f7f5 fed1 	bl	800028c <__adddf3>
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	f7f6 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 800a4f6:	b9c8      	cbnz	r0, 800a52c <_dtoa_r+0x6e4>
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	464b      	mov	r3, r9
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f6 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a504:	b110      	cbz	r0, 800a50c <_dtoa_r+0x6c4>
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	07db      	lsls	r3, r3, #31
 800a50a:	d40f      	bmi.n	800a52c <_dtoa_r+0x6e4>
 800a50c:	4651      	mov	r1, sl
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 fbcc 	bl	800acac <_Bfree>
 800a514:	2300      	movs	r3, #0
 800a516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a518:	702b      	strb	r3, [r5, #0]
 800a51a:	f10b 0301 	add.w	r3, fp, #1
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a522:	2b00      	cmp	r3, #0
 800a524:	f43f ace2 	beq.w	8009eec <_dtoa_r+0xa4>
 800a528:	601d      	str	r5, [r3, #0]
 800a52a:	e4df      	b.n	8009eec <_dtoa_r+0xa4>
 800a52c:	465f      	mov	r7, fp
 800a52e:	462b      	mov	r3, r5
 800a530:	461d      	mov	r5, r3
 800a532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a536:	2a39      	cmp	r2, #57	; 0x39
 800a538:	d106      	bne.n	800a548 <_dtoa_r+0x700>
 800a53a:	9a00      	ldr	r2, [sp, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d1f7      	bne.n	800a530 <_dtoa_r+0x6e8>
 800a540:	9900      	ldr	r1, [sp, #0]
 800a542:	2230      	movs	r2, #48	; 0x30
 800a544:	3701      	adds	r7, #1
 800a546:	700a      	strb	r2, [r1, #0]
 800a548:	781a      	ldrb	r2, [r3, #0]
 800a54a:	3201      	adds	r2, #1
 800a54c:	701a      	strb	r2, [r3, #0]
 800a54e:	e790      	b.n	800a472 <_dtoa_r+0x62a>
 800a550:	4ba3      	ldr	r3, [pc, #652]	; (800a7e0 <_dtoa_r+0x998>)
 800a552:	2200      	movs	r2, #0
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	2200      	movs	r2, #0
 800a55a:	2300      	movs	r3, #0
 800a55c:	4606      	mov	r6, r0
 800a55e:	460f      	mov	r7, r1
 800a560:	f7f6 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a564:	2800      	cmp	r0, #0
 800a566:	d09e      	beq.n	800a4a6 <_dtoa_r+0x65e>
 800a568:	e7d0      	b.n	800a50c <_dtoa_r+0x6c4>
 800a56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	f000 80ca 	beq.w	800a706 <_dtoa_r+0x8be>
 800a572:	9a07      	ldr	r2, [sp, #28]
 800a574:	2a01      	cmp	r2, #1
 800a576:	f300 80ad 	bgt.w	800a6d4 <_dtoa_r+0x88c>
 800a57a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	f000 80a5 	beq.w	800a6cc <_dtoa_r+0x884>
 800a582:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a586:	9e08      	ldr	r6, [sp, #32]
 800a588:	9d05      	ldr	r5, [sp, #20]
 800a58a:	9a05      	ldr	r2, [sp, #20]
 800a58c:	441a      	add	r2, r3
 800a58e:	9205      	str	r2, [sp, #20]
 800a590:	9a06      	ldr	r2, [sp, #24]
 800a592:	2101      	movs	r1, #1
 800a594:	441a      	add	r2, r3
 800a596:	4620      	mov	r0, r4
 800a598:	9206      	str	r2, [sp, #24]
 800a59a:	f000 fc87 	bl	800aeac <__i2b>
 800a59e:	4607      	mov	r7, r0
 800a5a0:	b165      	cbz	r5, 800a5bc <_dtoa_r+0x774>
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd09      	ble.n	800a5bc <_dtoa_r+0x774>
 800a5a8:	42ab      	cmp	r3, r5
 800a5aa:	9a05      	ldr	r2, [sp, #20]
 800a5ac:	bfa8      	it	ge
 800a5ae:	462b      	movge	r3, r5
 800a5b0:	1ad2      	subs	r2, r2, r3
 800a5b2:	9205      	str	r2, [sp, #20]
 800a5b4:	9a06      	ldr	r2, [sp, #24]
 800a5b6:	1aed      	subs	r5, r5, r3
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	9306      	str	r3, [sp, #24]
 800a5bc:	9b08      	ldr	r3, [sp, #32]
 800a5be:	b1f3      	cbz	r3, 800a5fe <_dtoa_r+0x7b6>
 800a5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80a3 	beq.w	800a70e <_dtoa_r+0x8c6>
 800a5c8:	2e00      	cmp	r6, #0
 800a5ca:	dd10      	ble.n	800a5ee <_dtoa_r+0x7a6>
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	4632      	mov	r2, r6
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fd2b 	bl	800b02c <__pow5mult>
 800a5d6:	4652      	mov	r2, sl
 800a5d8:	4601      	mov	r1, r0
 800a5da:	4607      	mov	r7, r0
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fc7b 	bl	800aed8 <__multiply>
 800a5e2:	4651      	mov	r1, sl
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 fb60 	bl	800acac <_Bfree>
 800a5ec:	46c2      	mov	sl, r8
 800a5ee:	9b08      	ldr	r3, [sp, #32]
 800a5f0:	1b9a      	subs	r2, r3, r6
 800a5f2:	d004      	beq.n	800a5fe <_dtoa_r+0x7b6>
 800a5f4:	4651      	mov	r1, sl
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 fd18 	bl	800b02c <__pow5mult>
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	2101      	movs	r1, #1
 800a600:	4620      	mov	r0, r4
 800a602:	f000 fc53 	bl	800aeac <__i2b>
 800a606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a608:	2b00      	cmp	r3, #0
 800a60a:	4606      	mov	r6, r0
 800a60c:	f340 8081 	ble.w	800a712 <_dtoa_r+0x8ca>
 800a610:	461a      	mov	r2, r3
 800a612:	4601      	mov	r1, r0
 800a614:	4620      	mov	r0, r4
 800a616:	f000 fd09 	bl	800b02c <__pow5mult>
 800a61a:	9b07      	ldr	r3, [sp, #28]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	4606      	mov	r6, r0
 800a620:	dd7a      	ble.n	800a718 <_dtoa_r+0x8d0>
 800a622:	f04f 0800 	mov.w	r8, #0
 800a626:	6933      	ldr	r3, [r6, #16]
 800a628:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a62c:	6918      	ldr	r0, [r3, #16]
 800a62e:	f000 fbef 	bl	800ae10 <__hi0bits>
 800a632:	f1c0 0020 	rsb	r0, r0, #32
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	4418      	add	r0, r3
 800a63a:	f010 001f 	ands.w	r0, r0, #31
 800a63e:	f000 8094 	beq.w	800a76a <_dtoa_r+0x922>
 800a642:	f1c0 0320 	rsb	r3, r0, #32
 800a646:	2b04      	cmp	r3, #4
 800a648:	f340 8085 	ble.w	800a756 <_dtoa_r+0x90e>
 800a64c:	9b05      	ldr	r3, [sp, #20]
 800a64e:	f1c0 001c 	rsb	r0, r0, #28
 800a652:	4403      	add	r3, r0
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	9b06      	ldr	r3, [sp, #24]
 800a658:	4403      	add	r3, r0
 800a65a:	4405      	add	r5, r0
 800a65c:	9306      	str	r3, [sp, #24]
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	dd05      	ble.n	800a670 <_dtoa_r+0x828>
 800a664:	4651      	mov	r1, sl
 800a666:	461a      	mov	r2, r3
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fd39 	bl	800b0e0 <__lshift>
 800a66e:	4682      	mov	sl, r0
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd05      	ble.n	800a682 <_dtoa_r+0x83a>
 800a676:	4631      	mov	r1, r6
 800a678:	461a      	mov	r2, r3
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 fd30 	bl	800b0e0 <__lshift>
 800a680:	4606      	mov	r6, r0
 800a682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a684:	2b00      	cmp	r3, #0
 800a686:	d072      	beq.n	800a76e <_dtoa_r+0x926>
 800a688:	4631      	mov	r1, r6
 800a68a:	4650      	mov	r0, sl
 800a68c:	f000 fd94 	bl	800b1b8 <__mcmp>
 800a690:	2800      	cmp	r0, #0
 800a692:	da6c      	bge.n	800a76e <_dtoa_r+0x926>
 800a694:	2300      	movs	r3, #0
 800a696:	4651      	mov	r1, sl
 800a698:	220a      	movs	r2, #10
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fb28 	bl	800acf0 <__multadd>
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 81b0 	beq.w	800aa0e <_dtoa_r+0xbc6>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	220a      	movs	r2, #10
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 fb1b 	bl	800acf0 <__multadd>
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	4607      	mov	r7, r0
 800a6c0:	f300 8096 	bgt.w	800a7f0 <_dtoa_r+0x9a8>
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	dc59      	bgt.n	800a77e <_dtoa_r+0x936>
 800a6ca:	e091      	b.n	800a7f0 <_dtoa_r+0x9a8>
 800a6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6d2:	e758      	b.n	800a586 <_dtoa_r+0x73e>
 800a6d4:	9b04      	ldr	r3, [sp, #16]
 800a6d6:	1e5e      	subs	r6, r3, #1
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	42b3      	cmp	r3, r6
 800a6dc:	bfbf      	itttt	lt
 800a6de:	9b08      	ldrlt	r3, [sp, #32]
 800a6e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a6e2:	9608      	strlt	r6, [sp, #32]
 800a6e4:	1af3      	sublt	r3, r6, r3
 800a6e6:	bfb4      	ite	lt
 800a6e8:	18d2      	addlt	r2, r2, r3
 800a6ea:	1b9e      	subge	r6, r3, r6
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	bfbc      	itt	lt
 800a6f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a6f2:	2600      	movlt	r6, #0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfb7      	itett	lt
 800a6f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a6fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a700:	1a9d      	sublt	r5, r3, r2
 800a702:	2300      	movlt	r3, #0
 800a704:	e741      	b.n	800a58a <_dtoa_r+0x742>
 800a706:	9e08      	ldr	r6, [sp, #32]
 800a708:	9d05      	ldr	r5, [sp, #20]
 800a70a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a70c:	e748      	b.n	800a5a0 <_dtoa_r+0x758>
 800a70e:	9a08      	ldr	r2, [sp, #32]
 800a710:	e770      	b.n	800a5f4 <_dtoa_r+0x7ac>
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	2b01      	cmp	r3, #1
 800a716:	dc19      	bgt.n	800a74c <_dtoa_r+0x904>
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	b9bb      	cbnz	r3, 800a74c <_dtoa_r+0x904>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a722:	b99b      	cbnz	r3, 800a74c <_dtoa_r+0x904>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a72a:	0d1b      	lsrs	r3, r3, #20
 800a72c:	051b      	lsls	r3, r3, #20
 800a72e:	b183      	cbz	r3, 800a752 <_dtoa_r+0x90a>
 800a730:	9b05      	ldr	r3, [sp, #20]
 800a732:	3301      	adds	r3, #1
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	3301      	adds	r3, #1
 800a73a:	9306      	str	r3, [sp, #24]
 800a73c:	f04f 0801 	mov.w	r8, #1
 800a740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a742:	2b00      	cmp	r3, #0
 800a744:	f47f af6f 	bne.w	800a626 <_dtoa_r+0x7de>
 800a748:	2001      	movs	r0, #1
 800a74a:	e774      	b.n	800a636 <_dtoa_r+0x7ee>
 800a74c:	f04f 0800 	mov.w	r8, #0
 800a750:	e7f6      	b.n	800a740 <_dtoa_r+0x8f8>
 800a752:	4698      	mov	r8, r3
 800a754:	e7f4      	b.n	800a740 <_dtoa_r+0x8f8>
 800a756:	d082      	beq.n	800a65e <_dtoa_r+0x816>
 800a758:	9a05      	ldr	r2, [sp, #20]
 800a75a:	331c      	adds	r3, #28
 800a75c:	441a      	add	r2, r3
 800a75e:	9205      	str	r2, [sp, #20]
 800a760:	9a06      	ldr	r2, [sp, #24]
 800a762:	441a      	add	r2, r3
 800a764:	441d      	add	r5, r3
 800a766:	9206      	str	r2, [sp, #24]
 800a768:	e779      	b.n	800a65e <_dtoa_r+0x816>
 800a76a:	4603      	mov	r3, r0
 800a76c:	e7f4      	b.n	800a758 <_dtoa_r+0x910>
 800a76e:	9b04      	ldr	r3, [sp, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	dc37      	bgt.n	800a7e4 <_dtoa_r+0x99c>
 800a774:	9b07      	ldr	r3, [sp, #28]
 800a776:	2b02      	cmp	r3, #2
 800a778:	dd34      	ble.n	800a7e4 <_dtoa_r+0x99c>
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	b963      	cbnz	r3, 800a79c <_dtoa_r+0x954>
 800a782:	4631      	mov	r1, r6
 800a784:	2205      	movs	r2, #5
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fab2 	bl	800acf0 <__multadd>
 800a78c:	4601      	mov	r1, r0
 800a78e:	4606      	mov	r6, r0
 800a790:	4650      	mov	r0, sl
 800a792:	f000 fd11 	bl	800b1b8 <__mcmp>
 800a796:	2800      	cmp	r0, #0
 800a798:	f73f adbb 	bgt.w	800a312 <_dtoa_r+0x4ca>
 800a79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79e:	9d00      	ldr	r5, [sp, #0]
 800a7a0:	ea6f 0b03 	mvn.w	fp, r3
 800a7a4:	f04f 0800 	mov.w	r8, #0
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fa7e 	bl	800acac <_Bfree>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f43f aeab 	beq.w	800a50c <_dtoa_r+0x6c4>
 800a7b6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ba:	d005      	beq.n	800a7c8 <_dtoa_r+0x980>
 800a7bc:	45b8      	cmp	r8, r7
 800a7be:	d003      	beq.n	800a7c8 <_dtoa_r+0x980>
 800a7c0:	4641      	mov	r1, r8
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fa72 	bl	800acac <_Bfree>
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fa6e 	bl	800acac <_Bfree>
 800a7d0:	e69c      	b.n	800a50c <_dtoa_r+0x6c4>
 800a7d2:	2600      	movs	r6, #0
 800a7d4:	4637      	mov	r7, r6
 800a7d6:	e7e1      	b.n	800a79c <_dtoa_r+0x954>
 800a7d8:	46bb      	mov	fp, r7
 800a7da:	4637      	mov	r7, r6
 800a7dc:	e599      	b.n	800a312 <_dtoa_r+0x4ca>
 800a7de:	bf00      	nop
 800a7e0:	40240000 	.word	0x40240000
 800a7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 80c8 	beq.w	800a97c <_dtoa_r+0xb34>
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	2d00      	cmp	r5, #0
 800a7f2:	dd05      	ble.n	800a800 <_dtoa_r+0x9b8>
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fc71 	bl	800b0e0 <__lshift>
 800a7fe:	4607      	mov	r7, r0
 800a800:	f1b8 0f00 	cmp.w	r8, #0
 800a804:	d05b      	beq.n	800a8be <_dtoa_r+0xa76>
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fa0f 	bl	800ac2c <_Balloc>
 800a80e:	4605      	mov	r5, r0
 800a810:	b928      	cbnz	r0, 800a81e <_dtoa_r+0x9d6>
 800a812:	4b83      	ldr	r3, [pc, #524]	; (800aa20 <_dtoa_r+0xbd8>)
 800a814:	4602      	mov	r2, r0
 800a816:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a81a:	f7ff bb2e 	b.w	8009e7a <_dtoa_r+0x32>
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	3202      	adds	r2, #2
 800a822:	0092      	lsls	r2, r2, #2
 800a824:	f107 010c 	add.w	r1, r7, #12
 800a828:	300c      	adds	r0, #12
 800a82a:	f7ff fa68 	bl	8009cfe <memcpy>
 800a82e:	2201      	movs	r2, #1
 800a830:	4629      	mov	r1, r5
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fc54 	bl	800b0e0 <__lshift>
 800a838:	9b00      	ldr	r3, [sp, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a842:	4413      	add	r3, r2
 800a844:	9308      	str	r3, [sp, #32]
 800a846:	9b02      	ldr	r3, [sp, #8]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	46b8      	mov	r8, r7
 800a84e:	9306      	str	r3, [sp, #24]
 800a850:	4607      	mov	r7, r0
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	4631      	mov	r1, r6
 800a856:	3b01      	subs	r3, #1
 800a858:	4650      	mov	r0, sl
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	f7ff fa6b 	bl	8009d36 <quorem>
 800a860:	4641      	mov	r1, r8
 800a862:	9002      	str	r0, [sp, #8]
 800a864:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a868:	4650      	mov	r0, sl
 800a86a:	f000 fca5 	bl	800b1b8 <__mcmp>
 800a86e:	463a      	mov	r2, r7
 800a870:	9005      	str	r0, [sp, #20]
 800a872:	4631      	mov	r1, r6
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fcbb 	bl	800b1f0 <__mdiff>
 800a87a:	68c2      	ldr	r2, [r0, #12]
 800a87c:	4605      	mov	r5, r0
 800a87e:	bb02      	cbnz	r2, 800a8c2 <_dtoa_r+0xa7a>
 800a880:	4601      	mov	r1, r0
 800a882:	4650      	mov	r0, sl
 800a884:	f000 fc98 	bl	800b1b8 <__mcmp>
 800a888:	4602      	mov	r2, r0
 800a88a:	4629      	mov	r1, r5
 800a88c:	4620      	mov	r0, r4
 800a88e:	9209      	str	r2, [sp, #36]	; 0x24
 800a890:	f000 fa0c 	bl	800acac <_Bfree>
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	9d04      	ldr	r5, [sp, #16]
 800a89a:	ea43 0102 	orr.w	r1, r3, r2
 800a89e:	9b06      	ldr	r3, [sp, #24]
 800a8a0:	4319      	orrs	r1, r3
 800a8a2:	d110      	bne.n	800a8c6 <_dtoa_r+0xa7e>
 800a8a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8a8:	d029      	beq.n	800a8fe <_dtoa_r+0xab6>
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dd02      	ble.n	800a8b6 <_dtoa_r+0xa6e>
 800a8b0:	9b02      	ldr	r3, [sp, #8]
 800a8b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	f883 9000 	strb.w	r9, [r3]
 800a8bc:	e774      	b.n	800a7a8 <_dtoa_r+0x960>
 800a8be:	4638      	mov	r0, r7
 800a8c0:	e7ba      	b.n	800a838 <_dtoa_r+0x9f0>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	e7e1      	b.n	800a88a <_dtoa_r+0xa42>
 800a8c6:	9b05      	ldr	r3, [sp, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	db04      	blt.n	800a8d6 <_dtoa_r+0xa8e>
 800a8cc:	9907      	ldr	r1, [sp, #28]
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	9906      	ldr	r1, [sp, #24]
 800a8d2:	430b      	orrs	r3, r1
 800a8d4:	d120      	bne.n	800a918 <_dtoa_r+0xad0>
 800a8d6:	2a00      	cmp	r2, #0
 800a8d8:	dded      	ble.n	800a8b6 <_dtoa_r+0xa6e>
 800a8da:	4651      	mov	r1, sl
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 fbfe 	bl	800b0e0 <__lshift>
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4682      	mov	sl, r0
 800a8e8:	f000 fc66 	bl	800b1b8 <__mcmp>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	dc03      	bgt.n	800a8f8 <_dtoa_r+0xab0>
 800a8f0:	d1e1      	bne.n	800a8b6 <_dtoa_r+0xa6e>
 800a8f2:	f019 0f01 	tst.w	r9, #1
 800a8f6:	d0de      	beq.n	800a8b6 <_dtoa_r+0xa6e>
 800a8f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8fc:	d1d8      	bne.n	800a8b0 <_dtoa_r+0xa68>
 800a8fe:	9a01      	ldr	r2, [sp, #4]
 800a900:	2339      	movs	r3, #57	; 0x39
 800a902:	7013      	strb	r3, [r2, #0]
 800a904:	462b      	mov	r3, r5
 800a906:	461d      	mov	r5, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a90e:	2a39      	cmp	r2, #57	; 0x39
 800a910:	d06c      	beq.n	800a9ec <_dtoa_r+0xba4>
 800a912:	3201      	adds	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e747      	b.n	800a7a8 <_dtoa_r+0x960>
 800a918:	2a00      	cmp	r2, #0
 800a91a:	dd07      	ble.n	800a92c <_dtoa_r+0xae4>
 800a91c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a920:	d0ed      	beq.n	800a8fe <_dtoa_r+0xab6>
 800a922:	9a01      	ldr	r2, [sp, #4]
 800a924:	f109 0301 	add.w	r3, r9, #1
 800a928:	7013      	strb	r3, [r2, #0]
 800a92a:	e73d      	b.n	800a7a8 <_dtoa_r+0x960>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	9a08      	ldr	r2, [sp, #32]
 800a930:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a934:	4293      	cmp	r3, r2
 800a936:	d043      	beq.n	800a9c0 <_dtoa_r+0xb78>
 800a938:	4651      	mov	r1, sl
 800a93a:	2300      	movs	r3, #0
 800a93c:	220a      	movs	r2, #10
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 f9d6 	bl	800acf0 <__multadd>
 800a944:	45b8      	cmp	r8, r7
 800a946:	4682      	mov	sl, r0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	f04f 020a 	mov.w	r2, #10
 800a950:	4641      	mov	r1, r8
 800a952:	4620      	mov	r0, r4
 800a954:	d107      	bne.n	800a966 <_dtoa_r+0xb1e>
 800a956:	f000 f9cb 	bl	800acf0 <__multadd>
 800a95a:	4680      	mov	r8, r0
 800a95c:	4607      	mov	r7, r0
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	3301      	adds	r3, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	e775      	b.n	800a852 <_dtoa_r+0xa0a>
 800a966:	f000 f9c3 	bl	800acf0 <__multadd>
 800a96a:	4639      	mov	r1, r7
 800a96c:	4680      	mov	r8, r0
 800a96e:	2300      	movs	r3, #0
 800a970:	220a      	movs	r2, #10
 800a972:	4620      	mov	r0, r4
 800a974:	f000 f9bc 	bl	800acf0 <__multadd>
 800a978:	4607      	mov	r7, r0
 800a97a:	e7f0      	b.n	800a95e <_dtoa_r+0xb16>
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	9d00      	ldr	r5, [sp, #0]
 800a982:	4631      	mov	r1, r6
 800a984:	4650      	mov	r0, sl
 800a986:	f7ff f9d6 	bl	8009d36 <quorem>
 800a98a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	f805 9b01 	strb.w	r9, [r5], #1
 800a994:	1aea      	subs	r2, r5, r3
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	4293      	cmp	r3, r2
 800a99a:	dd07      	ble.n	800a9ac <_dtoa_r+0xb64>
 800a99c:	4651      	mov	r1, sl
 800a99e:	2300      	movs	r3, #0
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f9a4 	bl	800acf0 <__multadd>
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	e7ea      	b.n	800a982 <_dtoa_r+0xb3a>
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bfc8      	it	gt
 800a9b2:	461d      	movgt	r5, r3
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	bfd8      	it	le
 800a9b8:	2501      	movle	r5, #1
 800a9ba:	441d      	add	r5, r3
 800a9bc:	f04f 0800 	mov.w	r8, #0
 800a9c0:	4651      	mov	r1, sl
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fb8b 	bl	800b0e0 <__lshift>
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	f000 fbf3 	bl	800b1b8 <__mcmp>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	dc96      	bgt.n	800a904 <_dtoa_r+0xabc>
 800a9d6:	d102      	bne.n	800a9de <_dtoa_r+0xb96>
 800a9d8:	f019 0f01 	tst.w	r9, #1
 800a9dc:	d192      	bne.n	800a904 <_dtoa_r+0xabc>
 800a9de:	462b      	mov	r3, r5
 800a9e0:	461d      	mov	r5, r3
 800a9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9e6:	2a30      	cmp	r2, #48	; 0x30
 800a9e8:	d0fa      	beq.n	800a9e0 <_dtoa_r+0xb98>
 800a9ea:	e6dd      	b.n	800a7a8 <_dtoa_r+0x960>
 800a9ec:	9a00      	ldr	r2, [sp, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d189      	bne.n	800a906 <_dtoa_r+0xabe>
 800a9f2:	f10b 0b01 	add.w	fp, fp, #1
 800a9f6:	2331      	movs	r3, #49	; 0x31
 800a9f8:	e796      	b.n	800a928 <_dtoa_r+0xae0>
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <_dtoa_r+0xbdc>)
 800a9fc:	f7ff ba99 	b.w	8009f32 <_dtoa_r+0xea>
 800aa00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f47f aa6d 	bne.w	8009ee2 <_dtoa_r+0x9a>
 800aa08:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <_dtoa_r+0xbe0>)
 800aa0a:	f7ff ba92 	b.w	8009f32 <_dtoa_r+0xea>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dcb5      	bgt.n	800a980 <_dtoa_r+0xb38>
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	f73f aeb1 	bgt.w	800a77e <_dtoa_r+0x936>
 800aa1c:	e7b0      	b.n	800a980 <_dtoa_r+0xb38>
 800aa1e:	bf00      	nop
 800aa20:	0800dcbd 	.word	0x0800dcbd
 800aa24:	0800dc18 	.word	0x0800dc18
 800aa28:	0800dc41 	.word	0x0800dc41

0800aa2c <_free_r>:
 800aa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	d044      	beq.n	800aabc <_free_r+0x90>
 800aa32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa36:	9001      	str	r0, [sp, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa3e:	bfb8      	it	lt
 800aa40:	18e4      	addlt	r4, r4, r3
 800aa42:	f000 f8e7 	bl	800ac14 <__malloc_lock>
 800aa46:	4a1e      	ldr	r2, [pc, #120]	; (800aac0 <_free_r+0x94>)
 800aa48:	9801      	ldr	r0, [sp, #4]
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	b933      	cbnz	r3, 800aa5c <_free_r+0x30>
 800aa4e:	6063      	str	r3, [r4, #4]
 800aa50:	6014      	str	r4, [r2, #0]
 800aa52:	b003      	add	sp, #12
 800aa54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa58:	f000 b8e2 	b.w	800ac20 <__malloc_unlock>
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d908      	bls.n	800aa72 <_free_r+0x46>
 800aa60:	6825      	ldr	r5, [r4, #0]
 800aa62:	1961      	adds	r1, r4, r5
 800aa64:	428b      	cmp	r3, r1
 800aa66:	bf01      	itttt	eq
 800aa68:	6819      	ldreq	r1, [r3, #0]
 800aa6a:	685b      	ldreq	r3, [r3, #4]
 800aa6c:	1949      	addeq	r1, r1, r5
 800aa6e:	6021      	streq	r1, [r4, #0]
 800aa70:	e7ed      	b.n	800aa4e <_free_r+0x22>
 800aa72:	461a      	mov	r2, r3
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	b10b      	cbz	r3, 800aa7c <_free_r+0x50>
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d9fa      	bls.n	800aa72 <_free_r+0x46>
 800aa7c:	6811      	ldr	r1, [r2, #0]
 800aa7e:	1855      	adds	r5, r2, r1
 800aa80:	42a5      	cmp	r5, r4
 800aa82:	d10b      	bne.n	800aa9c <_free_r+0x70>
 800aa84:	6824      	ldr	r4, [r4, #0]
 800aa86:	4421      	add	r1, r4
 800aa88:	1854      	adds	r4, r2, r1
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	6011      	str	r1, [r2, #0]
 800aa8e:	d1e0      	bne.n	800aa52 <_free_r+0x26>
 800aa90:	681c      	ldr	r4, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	6053      	str	r3, [r2, #4]
 800aa96:	440c      	add	r4, r1
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	e7da      	b.n	800aa52 <_free_r+0x26>
 800aa9c:	d902      	bls.n	800aaa4 <_free_r+0x78>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	e7d6      	b.n	800aa52 <_free_r+0x26>
 800aaa4:	6825      	ldr	r5, [r4, #0]
 800aaa6:	1961      	adds	r1, r4, r5
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf04      	itt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	bf04      	itt	eq
 800aab4:	1949      	addeq	r1, r1, r5
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	6054      	str	r4, [r2, #4]
 800aaba:	e7ca      	b.n	800aa52 <_free_r+0x26>
 800aabc:	b003      	add	sp, #12
 800aabe:	bd30      	pop	{r4, r5, pc}
 800aac0:	20000c34 	.word	0x20000c34

0800aac4 <malloc>:
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <malloc+0xc>)
 800aac6:	4601      	mov	r1, r0
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f000 b823 	b.w	800ab14 <_malloc_r>
 800aace:	bf00      	nop
 800aad0:	20000070 	.word	0x20000070

0800aad4 <sbrk_aligned>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	4e0e      	ldr	r6, [pc, #56]	; (800ab10 <sbrk_aligned+0x3c>)
 800aad8:	460c      	mov	r4, r1
 800aada:	6831      	ldr	r1, [r6, #0]
 800aadc:	4605      	mov	r5, r0
 800aade:	b911      	cbnz	r1, 800aae6 <sbrk_aligned+0x12>
 800aae0:	f002 f838 	bl	800cb54 <_sbrk_r>
 800aae4:	6030      	str	r0, [r6, #0]
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f002 f833 	bl	800cb54 <_sbrk_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d00a      	beq.n	800ab08 <sbrk_aligned+0x34>
 800aaf2:	1cc4      	adds	r4, r0, #3
 800aaf4:	f024 0403 	bic.w	r4, r4, #3
 800aaf8:	42a0      	cmp	r0, r4
 800aafa:	d007      	beq.n	800ab0c <sbrk_aligned+0x38>
 800aafc:	1a21      	subs	r1, r4, r0
 800aafe:	4628      	mov	r0, r5
 800ab00:	f002 f828 	bl	800cb54 <_sbrk_r>
 800ab04:	3001      	adds	r0, #1
 800ab06:	d101      	bne.n	800ab0c <sbrk_aligned+0x38>
 800ab08:	f04f 34ff 	mov.w	r4, #4294967295
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	20000c38 	.word	0x20000c38

0800ab14 <_malloc_r>:
 800ab14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	1ccd      	adds	r5, r1, #3
 800ab1a:	f025 0503 	bic.w	r5, r5, #3
 800ab1e:	3508      	adds	r5, #8
 800ab20:	2d0c      	cmp	r5, #12
 800ab22:	bf38      	it	cc
 800ab24:	250c      	movcc	r5, #12
 800ab26:	2d00      	cmp	r5, #0
 800ab28:	4607      	mov	r7, r0
 800ab2a:	db01      	blt.n	800ab30 <_malloc_r+0x1c>
 800ab2c:	42a9      	cmp	r1, r5
 800ab2e:	d905      	bls.n	800ab3c <_malloc_r+0x28>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	2600      	movs	r6, #0
 800ab36:	4630      	mov	r0, r6
 800ab38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac10 <_malloc_r+0xfc>
 800ab40:	f000 f868 	bl	800ac14 <__malloc_lock>
 800ab44:	f8d8 3000 	ldr.w	r3, [r8]
 800ab48:	461c      	mov	r4, r3
 800ab4a:	bb5c      	cbnz	r4, 800aba4 <_malloc_r+0x90>
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f7ff ffc0 	bl	800aad4 <sbrk_aligned>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	4604      	mov	r4, r0
 800ab58:	d155      	bne.n	800ac06 <_malloc_r+0xf2>
 800ab5a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab5e:	4626      	mov	r6, r4
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	d145      	bne.n	800abf0 <_malloc_r+0xdc>
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	d048      	beq.n	800abfa <_malloc_r+0xe6>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	eb04 0903 	add.w	r9, r4, r3
 800ab72:	f001 ffef 	bl	800cb54 <_sbrk_r>
 800ab76:	4581      	cmp	r9, r0
 800ab78:	d13f      	bne.n	800abfa <_malloc_r+0xe6>
 800ab7a:	6821      	ldr	r1, [r4, #0]
 800ab7c:	1a6d      	subs	r5, r5, r1
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7ff ffa7 	bl	800aad4 <sbrk_aligned>
 800ab86:	3001      	adds	r0, #1
 800ab88:	d037      	beq.n	800abfa <_malloc_r+0xe6>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	442b      	add	r3, r5
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	f8d8 3000 	ldr.w	r3, [r8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d038      	beq.n	800ac0a <_malloc_r+0xf6>
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	42a2      	cmp	r2, r4
 800ab9c:	d12b      	bne.n	800abf6 <_malloc_r+0xe2>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	605a      	str	r2, [r3, #4]
 800aba2:	e00f      	b.n	800abc4 <_malloc_r+0xb0>
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	1b52      	subs	r2, r2, r5
 800aba8:	d41f      	bmi.n	800abea <_malloc_r+0xd6>
 800abaa:	2a0b      	cmp	r2, #11
 800abac:	d917      	bls.n	800abde <_malloc_r+0xca>
 800abae:	1961      	adds	r1, r4, r5
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	6025      	str	r5, [r4, #0]
 800abb4:	bf18      	it	ne
 800abb6:	6059      	strne	r1, [r3, #4]
 800abb8:	6863      	ldr	r3, [r4, #4]
 800abba:	bf08      	it	eq
 800abbc:	f8c8 1000 	streq.w	r1, [r8]
 800abc0:	5162      	str	r2, [r4, r5]
 800abc2:	604b      	str	r3, [r1, #4]
 800abc4:	4638      	mov	r0, r7
 800abc6:	f104 060b 	add.w	r6, r4, #11
 800abca:	f000 f829 	bl	800ac20 <__malloc_unlock>
 800abce:	f026 0607 	bic.w	r6, r6, #7
 800abd2:	1d23      	adds	r3, r4, #4
 800abd4:	1af2      	subs	r2, r6, r3
 800abd6:	d0ae      	beq.n	800ab36 <_malloc_r+0x22>
 800abd8:	1b9b      	subs	r3, r3, r6
 800abda:	50a3      	str	r3, [r4, r2]
 800abdc:	e7ab      	b.n	800ab36 <_malloc_r+0x22>
 800abde:	42a3      	cmp	r3, r4
 800abe0:	6862      	ldr	r2, [r4, #4]
 800abe2:	d1dd      	bne.n	800aba0 <_malloc_r+0x8c>
 800abe4:	f8c8 2000 	str.w	r2, [r8]
 800abe8:	e7ec      	b.n	800abc4 <_malloc_r+0xb0>
 800abea:	4623      	mov	r3, r4
 800abec:	6864      	ldr	r4, [r4, #4]
 800abee:	e7ac      	b.n	800ab4a <_malloc_r+0x36>
 800abf0:	4634      	mov	r4, r6
 800abf2:	6876      	ldr	r6, [r6, #4]
 800abf4:	e7b4      	b.n	800ab60 <_malloc_r+0x4c>
 800abf6:	4613      	mov	r3, r2
 800abf8:	e7cc      	b.n	800ab94 <_malloc_r+0x80>
 800abfa:	230c      	movs	r3, #12
 800abfc:	603b      	str	r3, [r7, #0]
 800abfe:	4638      	mov	r0, r7
 800ac00:	f000 f80e 	bl	800ac20 <__malloc_unlock>
 800ac04:	e797      	b.n	800ab36 <_malloc_r+0x22>
 800ac06:	6025      	str	r5, [r4, #0]
 800ac08:	e7dc      	b.n	800abc4 <_malloc_r+0xb0>
 800ac0a:	605b      	str	r3, [r3, #4]
 800ac0c:	deff      	udf	#255	; 0xff
 800ac0e:	bf00      	nop
 800ac10:	20000c34 	.word	0x20000c34

0800ac14 <__malloc_lock>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__malloc_lock+0x8>)
 800ac16:	f7ff b870 	b.w	8009cfa <__retarget_lock_acquire_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	20000c30 	.word	0x20000c30

0800ac20 <__malloc_unlock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__malloc_unlock+0x8>)
 800ac22:	f7ff b86b 	b.w	8009cfc <__retarget_lock_release_recursive>
 800ac26:	bf00      	nop
 800ac28:	20000c30 	.word	0x20000c30

0800ac2c <_Balloc>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	69c6      	ldr	r6, [r0, #28]
 800ac30:	4604      	mov	r4, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	b976      	cbnz	r6, 800ac54 <_Balloc+0x28>
 800ac36:	2010      	movs	r0, #16
 800ac38:	f7ff ff44 	bl	800aac4 <malloc>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	61e0      	str	r0, [r4, #28]
 800ac40:	b920      	cbnz	r0, 800ac4c <_Balloc+0x20>
 800ac42:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <_Balloc+0x78>)
 800ac44:	4818      	ldr	r0, [pc, #96]	; (800aca8 <_Balloc+0x7c>)
 800ac46:	216b      	movs	r1, #107	; 0x6b
 800ac48:	f7fe f80e 	bl	8008c68 <__assert_func>
 800ac4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac50:	6006      	str	r6, [r0, #0]
 800ac52:	60c6      	str	r6, [r0, #12]
 800ac54:	69e6      	ldr	r6, [r4, #28]
 800ac56:	68f3      	ldr	r3, [r6, #12]
 800ac58:	b183      	cbz	r3, 800ac7c <_Balloc+0x50>
 800ac5a:	69e3      	ldr	r3, [r4, #28]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac62:	b9b8      	cbnz	r0, 800ac94 <_Balloc+0x68>
 800ac64:	2101      	movs	r1, #1
 800ac66:	fa01 f605 	lsl.w	r6, r1, r5
 800ac6a:	1d72      	adds	r2, r6, #5
 800ac6c:	0092      	lsls	r2, r2, #2
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f001 ff8a 	bl	800cb88 <_calloc_r>
 800ac74:	b160      	cbz	r0, 800ac90 <_Balloc+0x64>
 800ac76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac7a:	e00e      	b.n	800ac9a <_Balloc+0x6e>
 800ac7c:	2221      	movs	r2, #33	; 0x21
 800ac7e:	2104      	movs	r1, #4
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 ff81 	bl	800cb88 <_calloc_r>
 800ac86:	69e3      	ldr	r3, [r4, #28]
 800ac88:	60f0      	str	r0, [r6, #12]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e4      	bne.n	800ac5a <_Balloc+0x2e>
 800ac90:	2000      	movs	r0, #0
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	6802      	ldr	r2, [r0, #0]
 800ac96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aca0:	e7f7      	b.n	800ac92 <_Balloc+0x66>
 800aca2:	bf00      	nop
 800aca4:	0800dc4e 	.word	0x0800dc4e
 800aca8:	0800dcce 	.word	0x0800dcce

0800acac <_Bfree>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	69c6      	ldr	r6, [r0, #28]
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	b976      	cbnz	r6, 800acd4 <_Bfree+0x28>
 800acb6:	2010      	movs	r0, #16
 800acb8:	f7ff ff04 	bl	800aac4 <malloc>
 800acbc:	4602      	mov	r2, r0
 800acbe:	61e8      	str	r0, [r5, #28]
 800acc0:	b920      	cbnz	r0, 800accc <_Bfree+0x20>
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <_Bfree+0x3c>)
 800acc4:	4809      	ldr	r0, [pc, #36]	; (800acec <_Bfree+0x40>)
 800acc6:	218f      	movs	r1, #143	; 0x8f
 800acc8:	f7fd ffce 	bl	8008c68 <__assert_func>
 800accc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd0:	6006      	str	r6, [r0, #0]
 800acd2:	60c6      	str	r6, [r0, #12]
 800acd4:	b13c      	cbz	r4, 800ace6 <_Bfree+0x3a>
 800acd6:	69eb      	ldr	r3, [r5, #28]
 800acd8:	6862      	ldr	r2, [r4, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace0:	6021      	str	r1, [r4, #0]
 800ace2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	0800dc4e 	.word	0x0800dc4e
 800acec:	0800dcce 	.word	0x0800dcce

0800acf0 <__multadd>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	690d      	ldr	r5, [r1, #16]
 800acf6:	4607      	mov	r7, r0
 800acf8:	460c      	mov	r4, r1
 800acfa:	461e      	mov	r6, r3
 800acfc:	f101 0c14 	add.w	ip, r1, #20
 800ad00:	2000      	movs	r0, #0
 800ad02:	f8dc 3000 	ldr.w	r3, [ip]
 800ad06:	b299      	uxth	r1, r3
 800ad08:	fb02 6101 	mla	r1, r2, r1, r6
 800ad0c:	0c1e      	lsrs	r6, r3, #16
 800ad0e:	0c0b      	lsrs	r3, r1, #16
 800ad10:	fb02 3306 	mla	r3, r2, r6, r3
 800ad14:	b289      	uxth	r1, r1
 800ad16:	3001      	adds	r0, #1
 800ad18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad1c:	4285      	cmp	r5, r0
 800ad1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad26:	dcec      	bgt.n	800ad02 <__multadd+0x12>
 800ad28:	b30e      	cbz	r6, 800ad6e <__multadd+0x7e>
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	42ab      	cmp	r3, r5
 800ad2e:	dc19      	bgt.n	800ad64 <__multadd+0x74>
 800ad30:	6861      	ldr	r1, [r4, #4]
 800ad32:	4638      	mov	r0, r7
 800ad34:	3101      	adds	r1, #1
 800ad36:	f7ff ff79 	bl	800ac2c <_Balloc>
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	b928      	cbnz	r0, 800ad4a <__multadd+0x5a>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <__multadd+0x84>)
 800ad42:	480d      	ldr	r0, [pc, #52]	; (800ad78 <__multadd+0x88>)
 800ad44:	21ba      	movs	r1, #186	; 0xba
 800ad46:	f7fd ff8f 	bl	8008c68 <__assert_func>
 800ad4a:	6922      	ldr	r2, [r4, #16]
 800ad4c:	3202      	adds	r2, #2
 800ad4e:	f104 010c 	add.w	r1, r4, #12
 800ad52:	0092      	lsls	r2, r2, #2
 800ad54:	300c      	adds	r0, #12
 800ad56:	f7fe ffd2 	bl	8009cfe <memcpy>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ffa5 	bl	800acac <_Bfree>
 800ad62:	4644      	mov	r4, r8
 800ad64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad68:	3501      	adds	r5, #1
 800ad6a:	615e      	str	r6, [r3, #20]
 800ad6c:	6125      	str	r5, [r4, #16]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	0800dcbd 	.word	0x0800dcbd
 800ad78:	0800dcce 	.word	0x0800dcce

0800ad7c <__s2b>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	4615      	mov	r5, r2
 800ad84:	461f      	mov	r7, r3
 800ad86:	2209      	movs	r2, #9
 800ad88:	3308      	adds	r3, #8
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad90:	2100      	movs	r1, #0
 800ad92:	2201      	movs	r2, #1
 800ad94:	429a      	cmp	r2, r3
 800ad96:	db09      	blt.n	800adac <__s2b+0x30>
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f7ff ff47 	bl	800ac2c <_Balloc>
 800ad9e:	b940      	cbnz	r0, 800adb2 <__s2b+0x36>
 800ada0:	4602      	mov	r2, r0
 800ada2:	4b19      	ldr	r3, [pc, #100]	; (800ae08 <__s2b+0x8c>)
 800ada4:	4819      	ldr	r0, [pc, #100]	; (800ae0c <__s2b+0x90>)
 800ada6:	21d3      	movs	r1, #211	; 0xd3
 800ada8:	f7fd ff5e 	bl	8008c68 <__assert_func>
 800adac:	0052      	lsls	r2, r2, #1
 800adae:	3101      	adds	r1, #1
 800adb0:	e7f0      	b.n	800ad94 <__s2b+0x18>
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	6143      	str	r3, [r0, #20]
 800adb6:	2d09      	cmp	r5, #9
 800adb8:	f04f 0301 	mov.w	r3, #1
 800adbc:	6103      	str	r3, [r0, #16]
 800adbe:	dd16      	ble.n	800adee <__s2b+0x72>
 800adc0:	f104 0909 	add.w	r9, r4, #9
 800adc4:	46c8      	mov	r8, r9
 800adc6:	442c      	add	r4, r5
 800adc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adcc:	4601      	mov	r1, r0
 800adce:	3b30      	subs	r3, #48	; 0x30
 800add0:	220a      	movs	r2, #10
 800add2:	4630      	mov	r0, r6
 800add4:	f7ff ff8c 	bl	800acf0 <__multadd>
 800add8:	45a0      	cmp	r8, r4
 800adda:	d1f5      	bne.n	800adc8 <__s2b+0x4c>
 800addc:	f1a5 0408 	sub.w	r4, r5, #8
 800ade0:	444c      	add	r4, r9
 800ade2:	1b2d      	subs	r5, r5, r4
 800ade4:	1963      	adds	r3, r4, r5
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	db04      	blt.n	800adf4 <__s2b+0x78>
 800adea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adee:	340a      	adds	r4, #10
 800adf0:	2509      	movs	r5, #9
 800adf2:	e7f6      	b.n	800ade2 <__s2b+0x66>
 800adf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adf8:	4601      	mov	r1, r0
 800adfa:	3b30      	subs	r3, #48	; 0x30
 800adfc:	220a      	movs	r2, #10
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ff76 	bl	800acf0 <__multadd>
 800ae04:	e7ee      	b.n	800ade4 <__s2b+0x68>
 800ae06:	bf00      	nop
 800ae08:	0800dcbd 	.word	0x0800dcbd
 800ae0c:	0800dcce 	.word	0x0800dcce

0800ae10 <__hi0bits>:
 800ae10:	0c03      	lsrs	r3, r0, #16
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	b9d3      	cbnz	r3, 800ae4c <__hi0bits+0x3c>
 800ae16:	0400      	lsls	r0, r0, #16
 800ae18:	2310      	movs	r3, #16
 800ae1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae1e:	bf04      	itt	eq
 800ae20:	0200      	lsleq	r0, r0, #8
 800ae22:	3308      	addeq	r3, #8
 800ae24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae28:	bf04      	itt	eq
 800ae2a:	0100      	lsleq	r0, r0, #4
 800ae2c:	3304      	addeq	r3, #4
 800ae2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae32:	bf04      	itt	eq
 800ae34:	0080      	lsleq	r0, r0, #2
 800ae36:	3302      	addeq	r3, #2
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	db05      	blt.n	800ae48 <__hi0bits+0x38>
 800ae3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae40:	f103 0301 	add.w	r3, r3, #1
 800ae44:	bf08      	it	eq
 800ae46:	2320      	moveq	r3, #32
 800ae48:	4618      	mov	r0, r3
 800ae4a:	4770      	bx	lr
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e7e4      	b.n	800ae1a <__hi0bits+0xa>

0800ae50 <__lo0bits>:
 800ae50:	6803      	ldr	r3, [r0, #0]
 800ae52:	f013 0207 	ands.w	r2, r3, #7
 800ae56:	d00c      	beq.n	800ae72 <__lo0bits+0x22>
 800ae58:	07d9      	lsls	r1, r3, #31
 800ae5a:	d422      	bmi.n	800aea2 <__lo0bits+0x52>
 800ae5c:	079a      	lsls	r2, r3, #30
 800ae5e:	bf49      	itett	mi
 800ae60:	085b      	lsrmi	r3, r3, #1
 800ae62:	089b      	lsrpl	r3, r3, #2
 800ae64:	6003      	strmi	r3, [r0, #0]
 800ae66:	2201      	movmi	r2, #1
 800ae68:	bf5c      	itt	pl
 800ae6a:	6003      	strpl	r3, [r0, #0]
 800ae6c:	2202      	movpl	r2, #2
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4770      	bx	lr
 800ae72:	b299      	uxth	r1, r3
 800ae74:	b909      	cbnz	r1, 800ae7a <__lo0bits+0x2a>
 800ae76:	0c1b      	lsrs	r3, r3, #16
 800ae78:	2210      	movs	r2, #16
 800ae7a:	b2d9      	uxtb	r1, r3
 800ae7c:	b909      	cbnz	r1, 800ae82 <__lo0bits+0x32>
 800ae7e:	3208      	adds	r2, #8
 800ae80:	0a1b      	lsrs	r3, r3, #8
 800ae82:	0719      	lsls	r1, r3, #28
 800ae84:	bf04      	itt	eq
 800ae86:	091b      	lsreq	r3, r3, #4
 800ae88:	3204      	addeq	r2, #4
 800ae8a:	0799      	lsls	r1, r3, #30
 800ae8c:	bf04      	itt	eq
 800ae8e:	089b      	lsreq	r3, r3, #2
 800ae90:	3202      	addeq	r2, #2
 800ae92:	07d9      	lsls	r1, r3, #31
 800ae94:	d403      	bmi.n	800ae9e <__lo0bits+0x4e>
 800ae96:	085b      	lsrs	r3, r3, #1
 800ae98:	f102 0201 	add.w	r2, r2, #1
 800ae9c:	d003      	beq.n	800aea6 <__lo0bits+0x56>
 800ae9e:	6003      	str	r3, [r0, #0]
 800aea0:	e7e5      	b.n	800ae6e <__lo0bits+0x1e>
 800aea2:	2200      	movs	r2, #0
 800aea4:	e7e3      	b.n	800ae6e <__lo0bits+0x1e>
 800aea6:	2220      	movs	r2, #32
 800aea8:	e7e1      	b.n	800ae6e <__lo0bits+0x1e>
	...

0800aeac <__i2b>:
 800aeac:	b510      	push	{r4, lr}
 800aeae:	460c      	mov	r4, r1
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	f7ff febb 	bl	800ac2c <_Balloc>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	b928      	cbnz	r0, 800aec6 <__i2b+0x1a>
 800aeba:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <__i2b+0x24>)
 800aebc:	4805      	ldr	r0, [pc, #20]	; (800aed4 <__i2b+0x28>)
 800aebe:	f240 1145 	movw	r1, #325	; 0x145
 800aec2:	f7fd fed1 	bl	8008c68 <__assert_func>
 800aec6:	2301      	movs	r3, #1
 800aec8:	6144      	str	r4, [r0, #20]
 800aeca:	6103      	str	r3, [r0, #16]
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop
 800aed0:	0800dcbd 	.word	0x0800dcbd
 800aed4:	0800dcce 	.word	0x0800dcce

0800aed8 <__multiply>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4691      	mov	r9, r2
 800aede:	690a      	ldr	r2, [r1, #16]
 800aee0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	bfb8      	it	lt
 800aee8:	460b      	movlt	r3, r1
 800aeea:	460c      	mov	r4, r1
 800aeec:	bfbc      	itt	lt
 800aeee:	464c      	movlt	r4, r9
 800aef0:	4699      	movlt	r9, r3
 800aef2:	6927      	ldr	r7, [r4, #16]
 800aef4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aef8:	68a3      	ldr	r3, [r4, #8]
 800aefa:	6861      	ldr	r1, [r4, #4]
 800aefc:	eb07 060a 	add.w	r6, r7, sl
 800af00:	42b3      	cmp	r3, r6
 800af02:	b085      	sub	sp, #20
 800af04:	bfb8      	it	lt
 800af06:	3101      	addlt	r1, #1
 800af08:	f7ff fe90 	bl	800ac2c <_Balloc>
 800af0c:	b930      	cbnz	r0, 800af1c <__multiply+0x44>
 800af0e:	4602      	mov	r2, r0
 800af10:	4b44      	ldr	r3, [pc, #272]	; (800b024 <__multiply+0x14c>)
 800af12:	4845      	ldr	r0, [pc, #276]	; (800b028 <__multiply+0x150>)
 800af14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af18:	f7fd fea6 	bl	8008c68 <__assert_func>
 800af1c:	f100 0514 	add.w	r5, r0, #20
 800af20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af24:	462b      	mov	r3, r5
 800af26:	2200      	movs	r2, #0
 800af28:	4543      	cmp	r3, r8
 800af2a:	d321      	bcc.n	800af70 <__multiply+0x98>
 800af2c:	f104 0314 	add.w	r3, r4, #20
 800af30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af34:	f109 0314 	add.w	r3, r9, #20
 800af38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af3c:	9202      	str	r2, [sp, #8]
 800af3e:	1b3a      	subs	r2, r7, r4
 800af40:	3a15      	subs	r2, #21
 800af42:	f022 0203 	bic.w	r2, r2, #3
 800af46:	3204      	adds	r2, #4
 800af48:	f104 0115 	add.w	r1, r4, #21
 800af4c:	428f      	cmp	r7, r1
 800af4e:	bf38      	it	cc
 800af50:	2204      	movcc	r2, #4
 800af52:	9201      	str	r2, [sp, #4]
 800af54:	9a02      	ldr	r2, [sp, #8]
 800af56:	9303      	str	r3, [sp, #12]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d80c      	bhi.n	800af76 <__multiply+0x9e>
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	dd03      	ble.n	800af68 <__multiply+0x90>
 800af60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af64:	2b00      	cmp	r3, #0
 800af66:	d05b      	beq.n	800b020 <__multiply+0x148>
 800af68:	6106      	str	r6, [r0, #16]
 800af6a:	b005      	add	sp, #20
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	f843 2b04 	str.w	r2, [r3], #4
 800af74:	e7d8      	b.n	800af28 <__multiply+0x50>
 800af76:	f8b3 a000 	ldrh.w	sl, [r3]
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	d024      	beq.n	800afca <__multiply+0xf2>
 800af80:	f104 0e14 	add.w	lr, r4, #20
 800af84:	46a9      	mov	r9, r5
 800af86:	f04f 0c00 	mov.w	ip, #0
 800af8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af8e:	f8d9 1000 	ldr.w	r1, [r9]
 800af92:	fa1f fb82 	uxth.w	fp, r2
 800af96:	b289      	uxth	r1, r1
 800af98:	fb0a 110b 	mla	r1, sl, fp, r1
 800af9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800afa0:	f8d9 2000 	ldr.w	r2, [r9]
 800afa4:	4461      	add	r1, ip
 800afa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800afae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800afb2:	b289      	uxth	r1, r1
 800afb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afb8:	4577      	cmp	r7, lr
 800afba:	f849 1b04 	str.w	r1, [r9], #4
 800afbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afc2:	d8e2      	bhi.n	800af8a <__multiply+0xb2>
 800afc4:	9a01      	ldr	r2, [sp, #4]
 800afc6:	f845 c002 	str.w	ip, [r5, r2]
 800afca:	9a03      	ldr	r2, [sp, #12]
 800afcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afd0:	3304      	adds	r3, #4
 800afd2:	f1b9 0f00 	cmp.w	r9, #0
 800afd6:	d021      	beq.n	800b01c <__multiply+0x144>
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	f104 0c14 	add.w	ip, r4, #20
 800afde:	46ae      	mov	lr, r5
 800afe0:	f04f 0a00 	mov.w	sl, #0
 800afe4:	f8bc b000 	ldrh.w	fp, [ip]
 800afe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afec:	fb09 220b 	mla	r2, r9, fp, r2
 800aff0:	4452      	add	r2, sl
 800aff2:	b289      	uxth	r1, r1
 800aff4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aff8:	f84e 1b04 	str.w	r1, [lr], #4
 800affc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b004:	f8be 1000 	ldrh.w	r1, [lr]
 800b008:	fb09 110a 	mla	r1, r9, sl, r1
 800b00c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b010:	4567      	cmp	r7, ip
 800b012:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b016:	d8e5      	bhi.n	800afe4 <__multiply+0x10c>
 800b018:	9a01      	ldr	r2, [sp, #4]
 800b01a:	50a9      	str	r1, [r5, r2]
 800b01c:	3504      	adds	r5, #4
 800b01e:	e799      	b.n	800af54 <__multiply+0x7c>
 800b020:	3e01      	subs	r6, #1
 800b022:	e79b      	b.n	800af5c <__multiply+0x84>
 800b024:	0800dcbd 	.word	0x0800dcbd
 800b028:	0800dcce 	.word	0x0800dcce

0800b02c <__pow5mult>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	4615      	mov	r5, r2
 800b032:	f012 0203 	ands.w	r2, r2, #3
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	d007      	beq.n	800b04c <__pow5mult+0x20>
 800b03c:	4c25      	ldr	r4, [pc, #148]	; (800b0d4 <__pow5mult+0xa8>)
 800b03e:	3a01      	subs	r2, #1
 800b040:	2300      	movs	r3, #0
 800b042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b046:	f7ff fe53 	bl	800acf0 <__multadd>
 800b04a:	4607      	mov	r7, r0
 800b04c:	10ad      	asrs	r5, r5, #2
 800b04e:	d03d      	beq.n	800b0cc <__pow5mult+0xa0>
 800b050:	69f4      	ldr	r4, [r6, #28]
 800b052:	b97c      	cbnz	r4, 800b074 <__pow5mult+0x48>
 800b054:	2010      	movs	r0, #16
 800b056:	f7ff fd35 	bl	800aac4 <malloc>
 800b05a:	4602      	mov	r2, r0
 800b05c:	61f0      	str	r0, [r6, #28]
 800b05e:	b928      	cbnz	r0, 800b06c <__pow5mult+0x40>
 800b060:	4b1d      	ldr	r3, [pc, #116]	; (800b0d8 <__pow5mult+0xac>)
 800b062:	481e      	ldr	r0, [pc, #120]	; (800b0dc <__pow5mult+0xb0>)
 800b064:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b068:	f7fd fdfe 	bl	8008c68 <__assert_func>
 800b06c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b070:	6004      	str	r4, [r0, #0]
 800b072:	60c4      	str	r4, [r0, #12]
 800b074:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b07c:	b94c      	cbnz	r4, 800b092 <__pow5mult+0x66>
 800b07e:	f240 2171 	movw	r1, #625	; 0x271
 800b082:	4630      	mov	r0, r6
 800b084:	f7ff ff12 	bl	800aeac <__i2b>
 800b088:	2300      	movs	r3, #0
 800b08a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b08e:	4604      	mov	r4, r0
 800b090:	6003      	str	r3, [r0, #0]
 800b092:	f04f 0900 	mov.w	r9, #0
 800b096:	07eb      	lsls	r3, r5, #31
 800b098:	d50a      	bpl.n	800b0b0 <__pow5mult+0x84>
 800b09a:	4639      	mov	r1, r7
 800b09c:	4622      	mov	r2, r4
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7ff ff1a 	bl	800aed8 <__multiply>
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff fdff 	bl	800acac <_Bfree>
 800b0ae:	4647      	mov	r7, r8
 800b0b0:	106d      	asrs	r5, r5, #1
 800b0b2:	d00b      	beq.n	800b0cc <__pow5mult+0xa0>
 800b0b4:	6820      	ldr	r0, [r4, #0]
 800b0b6:	b938      	cbnz	r0, 800b0c8 <__pow5mult+0x9c>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff ff0b 	bl	800aed8 <__multiply>
 800b0c2:	6020      	str	r0, [r4, #0]
 800b0c4:	f8c0 9000 	str.w	r9, [r0]
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	e7e4      	b.n	800b096 <__pow5mult+0x6a>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	bf00      	nop
 800b0d4:	0800de18 	.word	0x0800de18
 800b0d8:	0800dc4e 	.word	0x0800dc4e
 800b0dc:	0800dcce 	.word	0x0800dcce

0800b0e0 <__lshift>:
 800b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	6849      	ldr	r1, [r1, #4]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	4691      	mov	r9, r2
 800b0f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0f8:	f108 0601 	add.w	r6, r8, #1
 800b0fc:	42b3      	cmp	r3, r6
 800b0fe:	db0b      	blt.n	800b118 <__lshift+0x38>
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff fd93 	bl	800ac2c <_Balloc>
 800b106:	4605      	mov	r5, r0
 800b108:	b948      	cbnz	r0, 800b11e <__lshift+0x3e>
 800b10a:	4602      	mov	r2, r0
 800b10c:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <__lshift+0xd0>)
 800b10e:	4829      	ldr	r0, [pc, #164]	; (800b1b4 <__lshift+0xd4>)
 800b110:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b114:	f7fd fda8 	bl	8008c68 <__assert_func>
 800b118:	3101      	adds	r1, #1
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	e7ee      	b.n	800b0fc <__lshift+0x1c>
 800b11e:	2300      	movs	r3, #0
 800b120:	f100 0114 	add.w	r1, r0, #20
 800b124:	f100 0210 	add.w	r2, r0, #16
 800b128:	4618      	mov	r0, r3
 800b12a:	4553      	cmp	r3, sl
 800b12c:	db33      	blt.n	800b196 <__lshift+0xb6>
 800b12e:	6920      	ldr	r0, [r4, #16]
 800b130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b134:	f104 0314 	add.w	r3, r4, #20
 800b138:	f019 091f 	ands.w	r9, r9, #31
 800b13c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b144:	d02b      	beq.n	800b19e <__lshift+0xbe>
 800b146:	f1c9 0e20 	rsb	lr, r9, #32
 800b14a:	468a      	mov	sl, r1
 800b14c:	2200      	movs	r2, #0
 800b14e:	6818      	ldr	r0, [r3, #0]
 800b150:	fa00 f009 	lsl.w	r0, r0, r9
 800b154:	4310      	orrs	r0, r2
 800b156:	f84a 0b04 	str.w	r0, [sl], #4
 800b15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15e:	459c      	cmp	ip, r3
 800b160:	fa22 f20e 	lsr.w	r2, r2, lr
 800b164:	d8f3      	bhi.n	800b14e <__lshift+0x6e>
 800b166:	ebac 0304 	sub.w	r3, ip, r4
 800b16a:	3b15      	subs	r3, #21
 800b16c:	f023 0303 	bic.w	r3, r3, #3
 800b170:	3304      	adds	r3, #4
 800b172:	f104 0015 	add.w	r0, r4, #21
 800b176:	4584      	cmp	ip, r0
 800b178:	bf38      	it	cc
 800b17a:	2304      	movcc	r3, #4
 800b17c:	50ca      	str	r2, [r1, r3]
 800b17e:	b10a      	cbz	r2, 800b184 <__lshift+0xa4>
 800b180:	f108 0602 	add.w	r6, r8, #2
 800b184:	3e01      	subs	r6, #1
 800b186:	4638      	mov	r0, r7
 800b188:	612e      	str	r6, [r5, #16]
 800b18a:	4621      	mov	r1, r4
 800b18c:	f7ff fd8e 	bl	800acac <_Bfree>
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b196:	f842 0f04 	str.w	r0, [r2, #4]!
 800b19a:	3301      	adds	r3, #1
 800b19c:	e7c5      	b.n	800b12a <__lshift+0x4a>
 800b19e:	3904      	subs	r1, #4
 800b1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1a8:	459c      	cmp	ip, r3
 800b1aa:	d8f9      	bhi.n	800b1a0 <__lshift+0xc0>
 800b1ac:	e7ea      	b.n	800b184 <__lshift+0xa4>
 800b1ae:	bf00      	nop
 800b1b0:	0800dcbd 	.word	0x0800dcbd
 800b1b4:	0800dcce 	.word	0x0800dcce

0800b1b8 <__mcmp>:
 800b1b8:	b530      	push	{r4, r5, lr}
 800b1ba:	6902      	ldr	r2, [r0, #16]
 800b1bc:	690c      	ldr	r4, [r1, #16]
 800b1be:	1b12      	subs	r2, r2, r4
 800b1c0:	d10e      	bne.n	800b1e0 <__mcmp+0x28>
 800b1c2:	f100 0314 	add.w	r3, r0, #20
 800b1c6:	3114      	adds	r1, #20
 800b1c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1d8:	42a5      	cmp	r5, r4
 800b1da:	d003      	beq.n	800b1e4 <__mcmp+0x2c>
 800b1dc:	d305      	bcc.n	800b1ea <__mcmp+0x32>
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	bd30      	pop	{r4, r5, pc}
 800b1e4:	4283      	cmp	r3, r0
 800b1e6:	d3f3      	bcc.n	800b1d0 <__mcmp+0x18>
 800b1e8:	e7fa      	b.n	800b1e0 <__mcmp+0x28>
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ee:	e7f7      	b.n	800b1e0 <__mcmp+0x28>

0800b1f0 <__mdiff>:
 800b1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4690      	mov	r8, r2
 800b1fe:	f7ff ffdb 	bl	800b1b8 <__mcmp>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	d110      	bne.n	800b228 <__mdiff+0x38>
 800b206:	4629      	mov	r1, r5
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff fd0f 	bl	800ac2c <_Balloc>
 800b20e:	b930      	cbnz	r0, 800b21e <__mdiff+0x2e>
 800b210:	4b3a      	ldr	r3, [pc, #232]	; (800b2fc <__mdiff+0x10c>)
 800b212:	4602      	mov	r2, r0
 800b214:	f240 2137 	movw	r1, #567	; 0x237
 800b218:	4839      	ldr	r0, [pc, #228]	; (800b300 <__mdiff+0x110>)
 800b21a:	f7fd fd25 	bl	8008c68 <__assert_func>
 800b21e:	2301      	movs	r3, #1
 800b220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b228:	bfa4      	itt	ge
 800b22a:	4643      	movge	r3, r8
 800b22c:	46a0      	movge	r8, r4
 800b22e:	4630      	mov	r0, r6
 800b230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b234:	bfa6      	itte	ge
 800b236:	461c      	movge	r4, r3
 800b238:	2500      	movge	r5, #0
 800b23a:	2501      	movlt	r5, #1
 800b23c:	f7ff fcf6 	bl	800ac2c <_Balloc>
 800b240:	b920      	cbnz	r0, 800b24c <__mdiff+0x5c>
 800b242:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <__mdiff+0x10c>)
 800b244:	4602      	mov	r2, r0
 800b246:	f240 2145 	movw	r1, #581	; 0x245
 800b24a:	e7e5      	b.n	800b218 <__mdiff+0x28>
 800b24c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b250:	6926      	ldr	r6, [r4, #16]
 800b252:	60c5      	str	r5, [r0, #12]
 800b254:	f104 0914 	add.w	r9, r4, #20
 800b258:	f108 0514 	add.w	r5, r8, #20
 800b25c:	f100 0e14 	add.w	lr, r0, #20
 800b260:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b264:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b268:	f108 0210 	add.w	r2, r8, #16
 800b26c:	46f2      	mov	sl, lr
 800b26e:	2100      	movs	r1, #0
 800b270:	f859 3b04 	ldr.w	r3, [r9], #4
 800b274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b278:	fa11 f88b 	uxtah	r8, r1, fp
 800b27c:	b299      	uxth	r1, r3
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	eba8 0801 	sub.w	r8, r8, r1
 800b284:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b288:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b28c:	fa1f f888 	uxth.w	r8, r8
 800b290:	1419      	asrs	r1, r3, #16
 800b292:	454e      	cmp	r6, r9
 800b294:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b298:	f84a 3b04 	str.w	r3, [sl], #4
 800b29c:	d8e8      	bhi.n	800b270 <__mdiff+0x80>
 800b29e:	1b33      	subs	r3, r6, r4
 800b2a0:	3b15      	subs	r3, #21
 800b2a2:	f023 0303 	bic.w	r3, r3, #3
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	3415      	adds	r4, #21
 800b2aa:	42a6      	cmp	r6, r4
 800b2ac:	bf38      	it	cc
 800b2ae:	2304      	movcc	r3, #4
 800b2b0:	441d      	add	r5, r3
 800b2b2:	4473      	add	r3, lr
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	462e      	mov	r6, r5
 800b2b8:	4566      	cmp	r6, ip
 800b2ba:	d30e      	bcc.n	800b2da <__mdiff+0xea>
 800b2bc:	f10c 0203 	add.w	r2, ip, #3
 800b2c0:	1b52      	subs	r2, r2, r5
 800b2c2:	f022 0203 	bic.w	r2, r2, #3
 800b2c6:	3d03      	subs	r5, #3
 800b2c8:	45ac      	cmp	ip, r5
 800b2ca:	bf38      	it	cc
 800b2cc:	2200      	movcc	r2, #0
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2d4:	b17a      	cbz	r2, 800b2f6 <__mdiff+0x106>
 800b2d6:	6107      	str	r7, [r0, #16]
 800b2d8:	e7a4      	b.n	800b224 <__mdiff+0x34>
 800b2da:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2de:	fa11 f288 	uxtah	r2, r1, r8
 800b2e2:	1414      	asrs	r4, r2, #16
 800b2e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2e8:	b292      	uxth	r2, r2
 800b2ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2ee:	f84e 2b04 	str.w	r2, [lr], #4
 800b2f2:	1421      	asrs	r1, r4, #16
 800b2f4:	e7e0      	b.n	800b2b8 <__mdiff+0xc8>
 800b2f6:	3f01      	subs	r7, #1
 800b2f8:	e7ea      	b.n	800b2d0 <__mdiff+0xe0>
 800b2fa:	bf00      	nop
 800b2fc:	0800dcbd 	.word	0x0800dcbd
 800b300:	0800dcce 	.word	0x0800dcce

0800b304 <__ulp>:
 800b304:	b082      	sub	sp, #8
 800b306:	ed8d 0b00 	vstr	d0, [sp]
 800b30a:	9a01      	ldr	r2, [sp, #4]
 800b30c:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <__ulp+0x48>)
 800b30e:	4013      	ands	r3, r2
 800b310:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b314:	2b00      	cmp	r3, #0
 800b316:	dc08      	bgt.n	800b32a <__ulp+0x26>
 800b318:	425b      	negs	r3, r3
 800b31a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b31e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b322:	da04      	bge.n	800b32e <__ulp+0x2a>
 800b324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b328:	4113      	asrs	r3, r2
 800b32a:	2200      	movs	r2, #0
 800b32c:	e008      	b.n	800b340 <__ulp+0x3c>
 800b32e:	f1a2 0314 	sub.w	r3, r2, #20
 800b332:	2b1e      	cmp	r3, #30
 800b334:	bfda      	itte	le
 800b336:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b33a:	40da      	lsrle	r2, r3
 800b33c:	2201      	movgt	r2, #1
 800b33e:	2300      	movs	r3, #0
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	ec41 0b10 	vmov	d0, r0, r1
 800b348:	b002      	add	sp, #8
 800b34a:	4770      	bx	lr
 800b34c:	7ff00000 	.word	0x7ff00000

0800b350 <__b2d>:
 800b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b354:	6906      	ldr	r6, [r0, #16]
 800b356:	f100 0814 	add.w	r8, r0, #20
 800b35a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b35e:	1f37      	subs	r7, r6, #4
 800b360:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b364:	4610      	mov	r0, r2
 800b366:	f7ff fd53 	bl	800ae10 <__hi0bits>
 800b36a:	f1c0 0320 	rsb	r3, r0, #32
 800b36e:	280a      	cmp	r0, #10
 800b370:	600b      	str	r3, [r1, #0]
 800b372:	491b      	ldr	r1, [pc, #108]	; (800b3e0 <__b2d+0x90>)
 800b374:	dc15      	bgt.n	800b3a2 <__b2d+0x52>
 800b376:	f1c0 0c0b 	rsb	ip, r0, #11
 800b37a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b37e:	45b8      	cmp	r8, r7
 800b380:	ea43 0501 	orr.w	r5, r3, r1
 800b384:	bf34      	ite	cc
 800b386:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b38a:	2300      	movcs	r3, #0
 800b38c:	3015      	adds	r0, #21
 800b38e:	fa02 f000 	lsl.w	r0, r2, r0
 800b392:	fa23 f30c 	lsr.w	r3, r3, ip
 800b396:	4303      	orrs	r3, r0
 800b398:	461c      	mov	r4, r3
 800b39a:	ec45 4b10 	vmov	d0, r4, r5
 800b39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a2:	45b8      	cmp	r8, r7
 800b3a4:	bf3a      	itte	cc
 800b3a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800b3ae:	2300      	movcs	r3, #0
 800b3b0:	380b      	subs	r0, #11
 800b3b2:	d012      	beq.n	800b3da <__b2d+0x8a>
 800b3b4:	f1c0 0120 	rsb	r1, r0, #32
 800b3b8:	fa23 f401 	lsr.w	r4, r3, r1
 800b3bc:	4082      	lsls	r2, r0
 800b3be:	4322      	orrs	r2, r4
 800b3c0:	4547      	cmp	r7, r8
 800b3c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b3c6:	bf8c      	ite	hi
 800b3c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b3cc:	2200      	movls	r2, #0
 800b3ce:	4083      	lsls	r3, r0
 800b3d0:	40ca      	lsrs	r2, r1
 800b3d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	e7de      	b.n	800b398 <__b2d+0x48>
 800b3da:	ea42 0501 	orr.w	r5, r2, r1
 800b3de:	e7db      	b.n	800b398 <__b2d+0x48>
 800b3e0:	3ff00000 	.word	0x3ff00000

0800b3e4 <__d2b>:
 800b3e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	ec59 8b10 	vmov	r8, r9, d0
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	f7ff fc1b 	bl	800ac2c <_Balloc>
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	b930      	cbnz	r0, 800b408 <__d2b+0x24>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b24      	ldr	r3, [pc, #144]	; (800b490 <__d2b+0xac>)
 800b3fe:	4825      	ldr	r0, [pc, #148]	; (800b494 <__d2b+0xb0>)
 800b400:	f240 310f 	movw	r1, #783	; 0x30f
 800b404:	f7fd fc30 	bl	8008c68 <__assert_func>
 800b408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b40c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b410:	bb2d      	cbnz	r5, 800b45e <__d2b+0x7a>
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	f1b8 0300 	subs.w	r3, r8, #0
 800b418:	d026      	beq.n	800b468 <__d2b+0x84>
 800b41a:	4668      	mov	r0, sp
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	f7ff fd17 	bl	800ae50 <__lo0bits>
 800b422:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b426:	b1e8      	cbz	r0, 800b464 <__d2b+0x80>
 800b428:	f1c0 0320 	rsb	r3, r0, #32
 800b42c:	fa02 f303 	lsl.w	r3, r2, r3
 800b430:	430b      	orrs	r3, r1
 800b432:	40c2      	lsrs	r2, r0
 800b434:	6163      	str	r3, [r4, #20]
 800b436:	9201      	str	r2, [sp, #4]
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	61a3      	str	r3, [r4, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	bf14      	ite	ne
 800b440:	2202      	movne	r2, #2
 800b442:	2201      	moveq	r2, #1
 800b444:	6122      	str	r2, [r4, #16]
 800b446:	b1bd      	cbz	r5, 800b478 <__d2b+0x94>
 800b448:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b44c:	4405      	add	r5, r0
 800b44e:	603d      	str	r5, [r7, #0]
 800b450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b454:	6030      	str	r0, [r6, #0]
 800b456:	4620      	mov	r0, r4
 800b458:	b003      	add	sp, #12
 800b45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b462:	e7d6      	b.n	800b412 <__d2b+0x2e>
 800b464:	6161      	str	r1, [r4, #20]
 800b466:	e7e7      	b.n	800b438 <__d2b+0x54>
 800b468:	a801      	add	r0, sp, #4
 800b46a:	f7ff fcf1 	bl	800ae50 <__lo0bits>
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	6163      	str	r3, [r4, #20]
 800b472:	3020      	adds	r0, #32
 800b474:	2201      	movs	r2, #1
 800b476:	e7e5      	b.n	800b444 <__d2b+0x60>
 800b478:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b47c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b480:	6038      	str	r0, [r7, #0]
 800b482:	6918      	ldr	r0, [r3, #16]
 800b484:	f7ff fcc4 	bl	800ae10 <__hi0bits>
 800b488:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b48c:	e7e2      	b.n	800b454 <__d2b+0x70>
 800b48e:	bf00      	nop
 800b490:	0800dcbd 	.word	0x0800dcbd
 800b494:	0800dcce 	.word	0x0800dcce

0800b498 <__ratio>:
 800b498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4688      	mov	r8, r1
 800b49e:	4669      	mov	r1, sp
 800b4a0:	4681      	mov	r9, r0
 800b4a2:	f7ff ff55 	bl	800b350 <__b2d>
 800b4a6:	a901      	add	r1, sp, #4
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	ec55 4b10 	vmov	r4, r5, d0
 800b4ae:	f7ff ff4f 	bl	800b350 <__b2d>
 800b4b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4ba:	eba3 0c02 	sub.w	ip, r3, r2
 800b4be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4c2:	1a9b      	subs	r3, r3, r2
 800b4c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4c8:	ec51 0b10 	vmov	r0, r1, d0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bfd6      	itet	le
 800b4d0:	460a      	movle	r2, r1
 800b4d2:	462a      	movgt	r2, r5
 800b4d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4d8:	468b      	mov	fp, r1
 800b4da:	462f      	mov	r7, r5
 800b4dc:	bfd4      	ite	le
 800b4de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b4e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	ee10 2a10 	vmov	r2, s0
 800b4ec:	465b      	mov	r3, fp
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	f7f5 f9ac 	bl	800084c <__aeabi_ddiv>
 800b4f4:	ec41 0b10 	vmov	d0, r0, r1
 800b4f8:	b003      	add	sp, #12
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4fe <__copybits>:
 800b4fe:	3901      	subs	r1, #1
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	1149      	asrs	r1, r1, #5
 800b504:	6914      	ldr	r4, [r2, #16]
 800b506:	3101      	adds	r1, #1
 800b508:	f102 0314 	add.w	r3, r2, #20
 800b50c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b510:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b514:	1f05      	subs	r5, r0, #4
 800b516:	42a3      	cmp	r3, r4
 800b518:	d30c      	bcc.n	800b534 <__copybits+0x36>
 800b51a:	1aa3      	subs	r3, r4, r2
 800b51c:	3b11      	subs	r3, #17
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	3211      	adds	r2, #17
 800b524:	42a2      	cmp	r2, r4
 800b526:	bf88      	it	hi
 800b528:	2300      	movhi	r3, #0
 800b52a:	4418      	add	r0, r3
 800b52c:	2300      	movs	r3, #0
 800b52e:	4288      	cmp	r0, r1
 800b530:	d305      	bcc.n	800b53e <__copybits+0x40>
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	f853 6b04 	ldr.w	r6, [r3], #4
 800b538:	f845 6f04 	str.w	r6, [r5, #4]!
 800b53c:	e7eb      	b.n	800b516 <__copybits+0x18>
 800b53e:	f840 3b04 	str.w	r3, [r0], #4
 800b542:	e7f4      	b.n	800b52e <__copybits+0x30>

0800b544 <__any_on>:
 800b544:	f100 0214 	add.w	r2, r0, #20
 800b548:	6900      	ldr	r0, [r0, #16]
 800b54a:	114b      	asrs	r3, r1, #5
 800b54c:	4298      	cmp	r0, r3
 800b54e:	b510      	push	{r4, lr}
 800b550:	db11      	blt.n	800b576 <__any_on+0x32>
 800b552:	dd0a      	ble.n	800b56a <__any_on+0x26>
 800b554:	f011 011f 	ands.w	r1, r1, #31
 800b558:	d007      	beq.n	800b56a <__any_on+0x26>
 800b55a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b55e:	fa24 f001 	lsr.w	r0, r4, r1
 800b562:	fa00 f101 	lsl.w	r1, r0, r1
 800b566:	428c      	cmp	r4, r1
 800b568:	d10b      	bne.n	800b582 <__any_on+0x3e>
 800b56a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b56e:	4293      	cmp	r3, r2
 800b570:	d803      	bhi.n	800b57a <__any_on+0x36>
 800b572:	2000      	movs	r0, #0
 800b574:	bd10      	pop	{r4, pc}
 800b576:	4603      	mov	r3, r0
 800b578:	e7f7      	b.n	800b56a <__any_on+0x26>
 800b57a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b57e:	2900      	cmp	r1, #0
 800b580:	d0f5      	beq.n	800b56e <__any_on+0x2a>
 800b582:	2001      	movs	r0, #1
 800b584:	e7f6      	b.n	800b574 <__any_on+0x30>

0800b586 <sulp>:
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	ec45 4b10 	vmov	d0, r4, r5
 800b590:	4616      	mov	r6, r2
 800b592:	f7ff feb7 	bl	800b304 <__ulp>
 800b596:	ec51 0b10 	vmov	r0, r1, d0
 800b59a:	b17e      	cbz	r6, 800b5bc <sulp+0x36>
 800b59c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dd09      	ble.n	800b5bc <sulp+0x36>
 800b5a8:	051b      	lsls	r3, r3, #20
 800b5aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5ae:	2400      	movs	r4, #0
 800b5b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	462b      	mov	r3, r5
 800b5b8:	f7f5 f81e 	bl	80005f8 <__aeabi_dmul>
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c0 <_strtod_l>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	ed2d 8b02 	vpush	{d8}
 800b5c8:	b09b      	sub	sp, #108	; 0x6c
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	9216      	str	r2, [sp, #88]	; 0x58
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	f04f 0800 	mov.w	r8, #0
 800b5d8:	f04f 0900 	mov.w	r9, #0
 800b5dc:	460a      	mov	r2, r1
 800b5de:	9215      	str	r2, [sp, #84]	; 0x54
 800b5e0:	7811      	ldrb	r1, [r2, #0]
 800b5e2:	292b      	cmp	r1, #43	; 0x2b
 800b5e4:	d04c      	beq.n	800b680 <_strtod_l+0xc0>
 800b5e6:	d83a      	bhi.n	800b65e <_strtod_l+0x9e>
 800b5e8:	290d      	cmp	r1, #13
 800b5ea:	d834      	bhi.n	800b656 <_strtod_l+0x96>
 800b5ec:	2908      	cmp	r1, #8
 800b5ee:	d834      	bhi.n	800b65a <_strtod_l+0x9a>
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d03d      	beq.n	800b670 <_strtod_l+0xb0>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	920a      	str	r2, [sp, #40]	; 0x28
 800b5f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b5fa:	7832      	ldrb	r2, [r6, #0]
 800b5fc:	2a30      	cmp	r2, #48	; 0x30
 800b5fe:	f040 80b4 	bne.w	800b76a <_strtod_l+0x1aa>
 800b602:	7872      	ldrb	r2, [r6, #1]
 800b604:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b608:	2a58      	cmp	r2, #88	; 0x58
 800b60a:	d170      	bne.n	800b6ee <_strtod_l+0x12e>
 800b60c:	9302      	str	r3, [sp, #8]
 800b60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	ab16      	add	r3, sp, #88	; 0x58
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	4a8e      	ldr	r2, [pc, #568]	; (800b850 <_strtod_l+0x290>)
 800b618:	ab17      	add	r3, sp, #92	; 0x5c
 800b61a:	a915      	add	r1, sp, #84	; 0x54
 800b61c:	4620      	mov	r0, r4
 800b61e:	f001 fb31 	bl	800cc84 <__gethex>
 800b622:	f010 070f 	ands.w	r7, r0, #15
 800b626:	4605      	mov	r5, r0
 800b628:	d005      	beq.n	800b636 <_strtod_l+0x76>
 800b62a:	2f06      	cmp	r7, #6
 800b62c:	d12a      	bne.n	800b684 <_strtod_l+0xc4>
 800b62e:	3601      	adds	r6, #1
 800b630:	2300      	movs	r3, #0
 800b632:	9615      	str	r6, [sp, #84]	; 0x54
 800b634:	930a      	str	r3, [sp, #40]	; 0x28
 800b636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f040 857f 	bne.w	800c13c <_strtod_l+0xb7c>
 800b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b640:	b1db      	cbz	r3, 800b67a <_strtod_l+0xba>
 800b642:	4642      	mov	r2, r8
 800b644:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b648:	ec43 2b10 	vmov	d0, r2, r3
 800b64c:	b01b      	add	sp, #108	; 0x6c
 800b64e:	ecbd 8b02 	vpop	{d8}
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	2920      	cmp	r1, #32
 800b658:	d1cc      	bne.n	800b5f4 <_strtod_l+0x34>
 800b65a:	3201      	adds	r2, #1
 800b65c:	e7bf      	b.n	800b5de <_strtod_l+0x1e>
 800b65e:	292d      	cmp	r1, #45	; 0x2d
 800b660:	d1c8      	bne.n	800b5f4 <_strtod_l+0x34>
 800b662:	2101      	movs	r1, #1
 800b664:	910a      	str	r1, [sp, #40]	; 0x28
 800b666:	1c51      	adds	r1, r2, #1
 800b668:	9115      	str	r1, [sp, #84]	; 0x54
 800b66a:	7852      	ldrb	r2, [r2, #1]
 800b66c:	2a00      	cmp	r2, #0
 800b66e:	d1c3      	bne.n	800b5f8 <_strtod_l+0x38>
 800b670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b672:	9515      	str	r5, [sp, #84]	; 0x54
 800b674:	2b00      	cmp	r3, #0
 800b676:	f040 855f 	bne.w	800c138 <_strtod_l+0xb78>
 800b67a:	4642      	mov	r2, r8
 800b67c:	464b      	mov	r3, r9
 800b67e:	e7e3      	b.n	800b648 <_strtod_l+0x88>
 800b680:	2100      	movs	r1, #0
 800b682:	e7ef      	b.n	800b664 <_strtod_l+0xa4>
 800b684:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b686:	b13a      	cbz	r2, 800b698 <_strtod_l+0xd8>
 800b688:	2135      	movs	r1, #53	; 0x35
 800b68a:	a818      	add	r0, sp, #96	; 0x60
 800b68c:	f7ff ff37 	bl	800b4fe <__copybits>
 800b690:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b692:	4620      	mov	r0, r4
 800b694:	f7ff fb0a 	bl	800acac <_Bfree>
 800b698:	3f01      	subs	r7, #1
 800b69a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b69c:	2f04      	cmp	r7, #4
 800b69e:	d806      	bhi.n	800b6ae <_strtod_l+0xee>
 800b6a0:	e8df f007 	tbb	[pc, r7]
 800b6a4:	201d0314 	.word	0x201d0314
 800b6a8:	14          	.byte	0x14
 800b6a9:	00          	.byte	0x00
 800b6aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b6ae:	05e9      	lsls	r1, r5, #23
 800b6b0:	bf48      	it	mi
 800b6b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b6b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6ba:	0d1b      	lsrs	r3, r3, #20
 800b6bc:	051b      	lsls	r3, r3, #20
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1b9      	bne.n	800b636 <_strtod_l+0x76>
 800b6c2:	f7fe faef 	bl	8009ca4 <__errno>
 800b6c6:	2322      	movs	r3, #34	; 0x22
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	e7b4      	b.n	800b636 <_strtod_l+0x76>
 800b6cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b6d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b6dc:	e7e7      	b.n	800b6ae <_strtod_l+0xee>
 800b6de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b858 <_strtod_l+0x298>
 800b6e2:	e7e4      	b.n	800b6ae <_strtod_l+0xee>
 800b6e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b6e8:	f04f 38ff 	mov.w	r8, #4294967295
 800b6ec:	e7df      	b.n	800b6ae <_strtod_l+0xee>
 800b6ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	9215      	str	r2, [sp, #84]	; 0x54
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	2b30      	cmp	r3, #48	; 0x30
 800b6f8:	d0f9      	beq.n	800b6ee <_strtod_l+0x12e>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d09b      	beq.n	800b636 <_strtod_l+0x76>
 800b6fe:	2301      	movs	r3, #1
 800b700:	f04f 0a00 	mov.w	sl, #0
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b708:	930b      	str	r3, [sp, #44]	; 0x2c
 800b70a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b70e:	46d3      	mov	fp, sl
 800b710:	220a      	movs	r2, #10
 800b712:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b714:	7806      	ldrb	r6, [r0, #0]
 800b716:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b71a:	b2d9      	uxtb	r1, r3
 800b71c:	2909      	cmp	r1, #9
 800b71e:	d926      	bls.n	800b76e <_strtod_l+0x1ae>
 800b720:	494c      	ldr	r1, [pc, #304]	; (800b854 <_strtod_l+0x294>)
 800b722:	2201      	movs	r2, #1
 800b724:	f001 f9c0 	bl	800caa8 <strncmp>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d030      	beq.n	800b78e <_strtod_l+0x1ce>
 800b72c:	2000      	movs	r0, #0
 800b72e:	4632      	mov	r2, r6
 800b730:	9005      	str	r0, [sp, #20]
 800b732:	465e      	mov	r6, fp
 800b734:	4603      	mov	r3, r0
 800b736:	2a65      	cmp	r2, #101	; 0x65
 800b738:	d001      	beq.n	800b73e <_strtod_l+0x17e>
 800b73a:	2a45      	cmp	r2, #69	; 0x45
 800b73c:	d113      	bne.n	800b766 <_strtod_l+0x1a6>
 800b73e:	b91e      	cbnz	r6, 800b748 <_strtod_l+0x188>
 800b740:	9a04      	ldr	r2, [sp, #16]
 800b742:	4302      	orrs	r2, r0
 800b744:	d094      	beq.n	800b670 <_strtod_l+0xb0>
 800b746:	2600      	movs	r6, #0
 800b748:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b74a:	1c6a      	adds	r2, r5, #1
 800b74c:	9215      	str	r2, [sp, #84]	; 0x54
 800b74e:	786a      	ldrb	r2, [r5, #1]
 800b750:	2a2b      	cmp	r2, #43	; 0x2b
 800b752:	d074      	beq.n	800b83e <_strtod_l+0x27e>
 800b754:	2a2d      	cmp	r2, #45	; 0x2d
 800b756:	d078      	beq.n	800b84a <_strtod_l+0x28a>
 800b758:	f04f 0c00 	mov.w	ip, #0
 800b75c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b760:	2909      	cmp	r1, #9
 800b762:	d97f      	bls.n	800b864 <_strtod_l+0x2a4>
 800b764:	9515      	str	r5, [sp, #84]	; 0x54
 800b766:	2700      	movs	r7, #0
 800b768:	e09e      	b.n	800b8a8 <_strtod_l+0x2e8>
 800b76a:	2300      	movs	r3, #0
 800b76c:	e7c8      	b.n	800b700 <_strtod_l+0x140>
 800b76e:	f1bb 0f08 	cmp.w	fp, #8
 800b772:	bfd8      	it	le
 800b774:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b776:	f100 0001 	add.w	r0, r0, #1
 800b77a:	bfda      	itte	le
 800b77c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b780:	9309      	strle	r3, [sp, #36]	; 0x24
 800b782:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b786:	f10b 0b01 	add.w	fp, fp, #1
 800b78a:	9015      	str	r0, [sp, #84]	; 0x54
 800b78c:	e7c1      	b.n	800b712 <_strtod_l+0x152>
 800b78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	9215      	str	r2, [sp, #84]	; 0x54
 800b794:	785a      	ldrb	r2, [r3, #1]
 800b796:	f1bb 0f00 	cmp.w	fp, #0
 800b79a:	d037      	beq.n	800b80c <_strtod_l+0x24c>
 800b79c:	9005      	str	r0, [sp, #20]
 800b79e:	465e      	mov	r6, fp
 800b7a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d912      	bls.n	800b7ce <_strtod_l+0x20e>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e7c4      	b.n	800b736 <_strtod_l+0x176>
 800b7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	9215      	str	r2, [sp, #84]	; 0x54
 800b7b2:	785a      	ldrb	r2, [r3, #1]
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	2a30      	cmp	r2, #48	; 0x30
 800b7b8:	d0f8      	beq.n	800b7ac <_strtod_l+0x1ec>
 800b7ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7be:	2b08      	cmp	r3, #8
 800b7c0:	f200 84c1 	bhi.w	800c146 <_strtod_l+0xb86>
 800b7c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7c6:	9005      	str	r0, [sp, #20]
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	3a30      	subs	r2, #48	; 0x30
 800b7d0:	f100 0301 	add.w	r3, r0, #1
 800b7d4:	d014      	beq.n	800b800 <_strtod_l+0x240>
 800b7d6:	9905      	ldr	r1, [sp, #20]
 800b7d8:	4419      	add	r1, r3
 800b7da:	9105      	str	r1, [sp, #20]
 800b7dc:	4633      	mov	r3, r6
 800b7de:	eb00 0c06 	add.w	ip, r0, r6
 800b7e2:	210a      	movs	r1, #10
 800b7e4:	4563      	cmp	r3, ip
 800b7e6:	d113      	bne.n	800b810 <_strtod_l+0x250>
 800b7e8:	1833      	adds	r3, r6, r0
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	f106 0601 	add.w	r6, r6, #1
 800b7f0:	4406      	add	r6, r0
 800b7f2:	dc1a      	bgt.n	800b82a <_strtod_l+0x26a>
 800b7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7f6:	230a      	movs	r3, #10
 800b7f8:	fb03 2301 	mla	r3, r3, r1, r2
 800b7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fe:	2300      	movs	r3, #0
 800b800:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b802:	1c51      	adds	r1, r2, #1
 800b804:	9115      	str	r1, [sp, #84]	; 0x54
 800b806:	7852      	ldrb	r2, [r2, #1]
 800b808:	4618      	mov	r0, r3
 800b80a:	e7c9      	b.n	800b7a0 <_strtod_l+0x1e0>
 800b80c:	4658      	mov	r0, fp
 800b80e:	e7d2      	b.n	800b7b6 <_strtod_l+0x1f6>
 800b810:	2b08      	cmp	r3, #8
 800b812:	f103 0301 	add.w	r3, r3, #1
 800b816:	dc03      	bgt.n	800b820 <_strtod_l+0x260>
 800b818:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b81a:	434f      	muls	r7, r1
 800b81c:	9709      	str	r7, [sp, #36]	; 0x24
 800b81e:	e7e1      	b.n	800b7e4 <_strtod_l+0x224>
 800b820:	2b10      	cmp	r3, #16
 800b822:	bfd8      	it	le
 800b824:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b828:	e7dc      	b.n	800b7e4 <_strtod_l+0x224>
 800b82a:	2e10      	cmp	r6, #16
 800b82c:	bfdc      	itt	le
 800b82e:	230a      	movle	r3, #10
 800b830:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b834:	e7e3      	b.n	800b7fe <_strtod_l+0x23e>
 800b836:	2300      	movs	r3, #0
 800b838:	9305      	str	r3, [sp, #20]
 800b83a:	2301      	movs	r3, #1
 800b83c:	e780      	b.n	800b740 <_strtod_l+0x180>
 800b83e:	f04f 0c00 	mov.w	ip, #0
 800b842:	1caa      	adds	r2, r5, #2
 800b844:	9215      	str	r2, [sp, #84]	; 0x54
 800b846:	78aa      	ldrb	r2, [r5, #2]
 800b848:	e788      	b.n	800b75c <_strtod_l+0x19c>
 800b84a:	f04f 0c01 	mov.w	ip, #1
 800b84e:	e7f8      	b.n	800b842 <_strtod_l+0x282>
 800b850:	0800de28 	.word	0x0800de28
 800b854:	0800de24 	.word	0x0800de24
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b85e:	1c51      	adds	r1, r2, #1
 800b860:	9115      	str	r1, [sp, #84]	; 0x54
 800b862:	7852      	ldrb	r2, [r2, #1]
 800b864:	2a30      	cmp	r2, #48	; 0x30
 800b866:	d0f9      	beq.n	800b85c <_strtod_l+0x29c>
 800b868:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b86c:	2908      	cmp	r1, #8
 800b86e:	f63f af7a 	bhi.w	800b766 <_strtod_l+0x1a6>
 800b872:	3a30      	subs	r2, #48	; 0x30
 800b874:	9208      	str	r2, [sp, #32]
 800b876:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b878:	920c      	str	r2, [sp, #48]	; 0x30
 800b87a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b87c:	1c57      	adds	r7, r2, #1
 800b87e:	9715      	str	r7, [sp, #84]	; 0x54
 800b880:	7852      	ldrb	r2, [r2, #1]
 800b882:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b886:	f1be 0f09 	cmp.w	lr, #9
 800b88a:	d938      	bls.n	800b8fe <_strtod_l+0x33e>
 800b88c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b88e:	1a7f      	subs	r7, r7, r1
 800b890:	2f08      	cmp	r7, #8
 800b892:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b896:	dc03      	bgt.n	800b8a0 <_strtod_l+0x2e0>
 800b898:	9908      	ldr	r1, [sp, #32]
 800b89a:	428f      	cmp	r7, r1
 800b89c:	bfa8      	it	ge
 800b89e:	460f      	movge	r7, r1
 800b8a0:	f1bc 0f00 	cmp.w	ip, #0
 800b8a4:	d000      	beq.n	800b8a8 <_strtod_l+0x2e8>
 800b8a6:	427f      	negs	r7, r7
 800b8a8:	2e00      	cmp	r6, #0
 800b8aa:	d14f      	bne.n	800b94c <_strtod_l+0x38c>
 800b8ac:	9904      	ldr	r1, [sp, #16]
 800b8ae:	4301      	orrs	r1, r0
 800b8b0:	f47f aec1 	bne.w	800b636 <_strtod_l+0x76>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f47f aedb 	bne.w	800b670 <_strtod_l+0xb0>
 800b8ba:	2a69      	cmp	r2, #105	; 0x69
 800b8bc:	d029      	beq.n	800b912 <_strtod_l+0x352>
 800b8be:	dc26      	bgt.n	800b90e <_strtod_l+0x34e>
 800b8c0:	2a49      	cmp	r2, #73	; 0x49
 800b8c2:	d026      	beq.n	800b912 <_strtod_l+0x352>
 800b8c4:	2a4e      	cmp	r2, #78	; 0x4e
 800b8c6:	f47f aed3 	bne.w	800b670 <_strtod_l+0xb0>
 800b8ca:	499b      	ldr	r1, [pc, #620]	; (800bb38 <_strtod_l+0x578>)
 800b8cc:	a815      	add	r0, sp, #84	; 0x54
 800b8ce:	f001 fc19 	bl	800d104 <__match>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	f43f aecc 	beq.w	800b670 <_strtod_l+0xb0>
 800b8d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b28      	cmp	r3, #40	; 0x28
 800b8de:	d12f      	bne.n	800b940 <_strtod_l+0x380>
 800b8e0:	4996      	ldr	r1, [pc, #600]	; (800bb3c <_strtod_l+0x57c>)
 800b8e2:	aa18      	add	r2, sp, #96	; 0x60
 800b8e4:	a815      	add	r0, sp, #84	; 0x54
 800b8e6:	f001 fc21 	bl	800d12c <__hexnan>
 800b8ea:	2805      	cmp	r0, #5
 800b8ec:	d128      	bne.n	800b940 <_strtod_l+0x380>
 800b8ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b8f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b8fc:	e69b      	b.n	800b636 <_strtod_l+0x76>
 800b8fe:	9f08      	ldr	r7, [sp, #32]
 800b900:	210a      	movs	r1, #10
 800b902:	fb01 2107 	mla	r1, r1, r7, r2
 800b906:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b90a:	9208      	str	r2, [sp, #32]
 800b90c:	e7b5      	b.n	800b87a <_strtod_l+0x2ba>
 800b90e:	2a6e      	cmp	r2, #110	; 0x6e
 800b910:	e7d9      	b.n	800b8c6 <_strtod_l+0x306>
 800b912:	498b      	ldr	r1, [pc, #556]	; (800bb40 <_strtod_l+0x580>)
 800b914:	a815      	add	r0, sp, #84	; 0x54
 800b916:	f001 fbf5 	bl	800d104 <__match>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	f43f aea8 	beq.w	800b670 <_strtod_l+0xb0>
 800b920:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b922:	4988      	ldr	r1, [pc, #544]	; (800bb44 <_strtod_l+0x584>)
 800b924:	3b01      	subs	r3, #1
 800b926:	a815      	add	r0, sp, #84	; 0x54
 800b928:	9315      	str	r3, [sp, #84]	; 0x54
 800b92a:	f001 fbeb 	bl	800d104 <__match>
 800b92e:	b910      	cbnz	r0, 800b936 <_strtod_l+0x376>
 800b930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b932:	3301      	adds	r3, #1
 800b934:	9315      	str	r3, [sp, #84]	; 0x54
 800b936:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bb54 <_strtod_l+0x594>
 800b93a:	f04f 0800 	mov.w	r8, #0
 800b93e:	e67a      	b.n	800b636 <_strtod_l+0x76>
 800b940:	4881      	ldr	r0, [pc, #516]	; (800bb48 <_strtod_l+0x588>)
 800b942:	f001 f919 	bl	800cb78 <nan>
 800b946:	ec59 8b10 	vmov	r8, r9, d0
 800b94a:	e674      	b.n	800b636 <_strtod_l+0x76>
 800b94c:	9b05      	ldr	r3, [sp, #20]
 800b94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b950:	1afb      	subs	r3, r7, r3
 800b952:	f1bb 0f00 	cmp.w	fp, #0
 800b956:	bf08      	it	eq
 800b958:	46b3      	moveq	fp, r6
 800b95a:	2e10      	cmp	r6, #16
 800b95c:	9308      	str	r3, [sp, #32]
 800b95e:	4635      	mov	r5, r6
 800b960:	bfa8      	it	ge
 800b962:	2510      	movge	r5, #16
 800b964:	f7f4 fdce 	bl	8000504 <__aeabi_ui2d>
 800b968:	2e09      	cmp	r6, #9
 800b96a:	4680      	mov	r8, r0
 800b96c:	4689      	mov	r9, r1
 800b96e:	dd13      	ble.n	800b998 <_strtod_l+0x3d8>
 800b970:	4b76      	ldr	r3, [pc, #472]	; (800bb4c <_strtod_l+0x58c>)
 800b972:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b976:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b97a:	f7f4 fe3d 	bl	80005f8 <__aeabi_dmul>
 800b97e:	4680      	mov	r8, r0
 800b980:	4650      	mov	r0, sl
 800b982:	4689      	mov	r9, r1
 800b984:	f7f4 fdbe 	bl	8000504 <__aeabi_ui2d>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4640      	mov	r0, r8
 800b98e:	4649      	mov	r1, r9
 800b990:	f7f4 fc7c 	bl	800028c <__adddf3>
 800b994:	4680      	mov	r8, r0
 800b996:	4689      	mov	r9, r1
 800b998:	2e0f      	cmp	r6, #15
 800b99a:	dc38      	bgt.n	800ba0e <_strtod_l+0x44e>
 800b99c:	9b08      	ldr	r3, [sp, #32]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f43f ae49 	beq.w	800b636 <_strtod_l+0x76>
 800b9a4:	dd24      	ble.n	800b9f0 <_strtod_l+0x430>
 800b9a6:	2b16      	cmp	r3, #22
 800b9a8:	dc0b      	bgt.n	800b9c2 <_strtod_l+0x402>
 800b9aa:	4968      	ldr	r1, [pc, #416]	; (800bb4c <_strtod_l+0x58c>)
 800b9ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	f7f4 fe1e 	bl	80005f8 <__aeabi_dmul>
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	e639      	b.n	800b636 <_strtod_l+0x76>
 800b9c2:	9a08      	ldr	r2, [sp, #32]
 800b9c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	db20      	blt.n	800ba0e <_strtod_l+0x44e>
 800b9cc:	4c5f      	ldr	r4, [pc, #380]	; (800bb4c <_strtod_l+0x58c>)
 800b9ce:	f1c6 060f 	rsb	r6, r6, #15
 800b9d2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9de:	f7f4 fe0b 	bl	80005f8 <__aeabi_dmul>
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	1b9e      	subs	r6, r3, r6
 800b9e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b9ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9ee:	e7e3      	b.n	800b9b8 <_strtod_l+0x3f8>
 800b9f0:	9b08      	ldr	r3, [sp, #32]
 800b9f2:	3316      	adds	r3, #22
 800b9f4:	db0b      	blt.n	800ba0e <_strtod_l+0x44e>
 800b9f6:	9b05      	ldr	r3, [sp, #20]
 800b9f8:	1bdf      	subs	r7, r3, r7
 800b9fa:	4b54      	ldr	r3, [pc, #336]	; (800bb4c <_strtod_l+0x58c>)
 800b9fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba04:	4640      	mov	r0, r8
 800ba06:	4649      	mov	r1, r9
 800ba08:	f7f4 ff20 	bl	800084c <__aeabi_ddiv>
 800ba0c:	e7d6      	b.n	800b9bc <_strtod_l+0x3fc>
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	1b75      	subs	r5, r6, r5
 800ba12:	441d      	add	r5, r3
 800ba14:	2d00      	cmp	r5, #0
 800ba16:	dd70      	ble.n	800bafa <_strtod_l+0x53a>
 800ba18:	f015 030f 	ands.w	r3, r5, #15
 800ba1c:	d00a      	beq.n	800ba34 <_strtod_l+0x474>
 800ba1e:	494b      	ldr	r1, [pc, #300]	; (800bb4c <_strtod_l+0x58c>)
 800ba20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba2c:	f7f4 fde4 	bl	80005f8 <__aeabi_dmul>
 800ba30:	4680      	mov	r8, r0
 800ba32:	4689      	mov	r9, r1
 800ba34:	f035 050f 	bics.w	r5, r5, #15
 800ba38:	d04d      	beq.n	800bad6 <_strtod_l+0x516>
 800ba3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ba3e:	dd22      	ble.n	800ba86 <_strtod_l+0x4c6>
 800ba40:	2500      	movs	r5, #0
 800ba42:	46ab      	mov	fp, r5
 800ba44:	9509      	str	r5, [sp, #36]	; 0x24
 800ba46:	9505      	str	r5, [sp, #20]
 800ba48:	2322      	movs	r3, #34	; 0x22
 800ba4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bb54 <_strtod_l+0x594>
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	f04f 0800 	mov.w	r8, #0
 800ba54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f43f aded 	beq.w	800b636 <_strtod_l+0x76>
 800ba5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7ff f924 	bl	800acac <_Bfree>
 800ba64:	9905      	ldr	r1, [sp, #20]
 800ba66:	4620      	mov	r0, r4
 800ba68:	f7ff f920 	bl	800acac <_Bfree>
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f7ff f91c 	bl	800acac <_Bfree>
 800ba74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7ff f918 	bl	800acac <_Bfree>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff f914 	bl	800acac <_Bfree>
 800ba84:	e5d7      	b.n	800b636 <_strtod_l+0x76>
 800ba86:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <_strtod_l+0x590>)
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	112d      	asrs	r5, r5, #4
 800ba8e:	4640      	mov	r0, r8
 800ba90:	4649      	mov	r1, r9
 800ba92:	469a      	mov	sl, r3
 800ba94:	2d01      	cmp	r5, #1
 800ba96:	dc21      	bgt.n	800badc <_strtod_l+0x51c>
 800ba98:	b10b      	cbz	r3, 800ba9e <_strtod_l+0x4de>
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	4689      	mov	r9, r1
 800ba9e:	492c      	ldr	r1, [pc, #176]	; (800bb50 <_strtod_l+0x590>)
 800baa0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800baa4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab0:	f7f4 fda2 	bl	80005f8 <__aeabi_dmul>
 800bab4:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <_strtod_l+0x594>)
 800bab6:	460a      	mov	r2, r1
 800bab8:	400b      	ands	r3, r1
 800baba:	4927      	ldr	r1, [pc, #156]	; (800bb58 <_strtod_l+0x598>)
 800babc:	428b      	cmp	r3, r1
 800babe:	4680      	mov	r8, r0
 800bac0:	d8be      	bhi.n	800ba40 <_strtod_l+0x480>
 800bac2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bac6:	428b      	cmp	r3, r1
 800bac8:	bf86      	itte	hi
 800baca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bb5c <_strtod_l+0x59c>
 800bace:	f04f 38ff 	movhi.w	r8, #4294967295
 800bad2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bad6:	2300      	movs	r3, #0
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	e07b      	b.n	800bbd4 <_strtod_l+0x614>
 800badc:	07ea      	lsls	r2, r5, #31
 800bade:	d505      	bpl.n	800baec <_strtod_l+0x52c>
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	2301      	movs	r3, #1
 800baec:	9a04      	ldr	r2, [sp, #16]
 800baee:	3208      	adds	r2, #8
 800baf0:	f10a 0a01 	add.w	sl, sl, #1
 800baf4:	106d      	asrs	r5, r5, #1
 800baf6:	9204      	str	r2, [sp, #16]
 800baf8:	e7cc      	b.n	800ba94 <_strtod_l+0x4d4>
 800bafa:	d0ec      	beq.n	800bad6 <_strtod_l+0x516>
 800bafc:	426d      	negs	r5, r5
 800bafe:	f015 020f 	ands.w	r2, r5, #15
 800bb02:	d00a      	beq.n	800bb1a <_strtod_l+0x55a>
 800bb04:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <_strtod_l+0x58c>)
 800bb06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	f7f4 fe9b 	bl	800084c <__aeabi_ddiv>
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	112d      	asrs	r5, r5, #4
 800bb1c:	d0db      	beq.n	800bad6 <_strtod_l+0x516>
 800bb1e:	2d1f      	cmp	r5, #31
 800bb20:	dd1e      	ble.n	800bb60 <_strtod_l+0x5a0>
 800bb22:	2500      	movs	r5, #0
 800bb24:	46ab      	mov	fp, r5
 800bb26:	9509      	str	r5, [sp, #36]	; 0x24
 800bb28:	9505      	str	r5, [sp, #20]
 800bb2a:	2322      	movs	r3, #34	; 0x22
 800bb2c:	f04f 0800 	mov.w	r8, #0
 800bb30:	f04f 0900 	mov.w	r9, #0
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	e78d      	b.n	800ba54 <_strtod_l+0x494>
 800bb38:	0800dc15 	.word	0x0800dc15
 800bb3c:	0800de3c 	.word	0x0800de3c
 800bb40:	0800dc0d 	.word	0x0800dc0d
 800bb44:	0800dc44 	.word	0x0800dc44
 800bb48:	0800dc07 	.word	0x0800dc07
 800bb4c:	0800dd50 	.word	0x0800dd50
 800bb50:	0800dd28 	.word	0x0800dd28
 800bb54:	7ff00000 	.word	0x7ff00000
 800bb58:	7ca00000 	.word	0x7ca00000
 800bb5c:	7fefffff 	.word	0x7fefffff
 800bb60:	f015 0310 	ands.w	r3, r5, #16
 800bb64:	bf18      	it	ne
 800bb66:	236a      	movne	r3, #106	; 0x6a
 800bb68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bf0c <_strtod_l+0x94c>
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	2300      	movs	r3, #0
 800bb74:	07ea      	lsls	r2, r5, #31
 800bb76:	d504      	bpl.n	800bb82 <_strtod_l+0x5c2>
 800bb78:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	2301      	movs	r3, #1
 800bb82:	106d      	asrs	r5, r5, #1
 800bb84:	f10a 0a08 	add.w	sl, sl, #8
 800bb88:	d1f4      	bne.n	800bb74 <_strtod_l+0x5b4>
 800bb8a:	b10b      	cbz	r3, 800bb90 <_strtod_l+0x5d0>
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	4689      	mov	r9, r1
 800bb90:	9b04      	ldr	r3, [sp, #16]
 800bb92:	b1bb      	cbz	r3, 800bbc4 <_strtod_l+0x604>
 800bb94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bb98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	4649      	mov	r1, r9
 800bba0:	dd10      	ble.n	800bbc4 <_strtod_l+0x604>
 800bba2:	2b1f      	cmp	r3, #31
 800bba4:	f340 811e 	ble.w	800bde4 <_strtod_l+0x824>
 800bba8:	2b34      	cmp	r3, #52	; 0x34
 800bbaa:	bfde      	ittt	le
 800bbac:	f04f 33ff 	movle.w	r3, #4294967295
 800bbb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbb4:	4093      	lslle	r3, r2
 800bbb6:	f04f 0800 	mov.w	r8, #0
 800bbba:	bfcc      	ite	gt
 800bbbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bbc0:	ea03 0901 	andle.w	r9, r3, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	f7f4 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d1a6      	bne.n	800bb22 <_strtod_l+0x562>
 800bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbda:	4633      	mov	r3, r6
 800bbdc:	465a      	mov	r2, fp
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff f8cc 	bl	800ad7c <__s2b>
 800bbe4:	9009      	str	r0, [sp, #36]	; 0x24
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f af2a 	beq.w	800ba40 <_strtod_l+0x480>
 800bbec:	9a08      	ldr	r2, [sp, #32]
 800bbee:	9b05      	ldr	r3, [sp, #20]
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	eba3 0307 	sub.w	r3, r3, r7
 800bbf6:	bfa8      	it	ge
 800bbf8:	2300      	movge	r3, #0
 800bbfa:	930c      	str	r3, [sp, #48]	; 0x30
 800bbfc:	2500      	movs	r5, #0
 800bbfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc02:	9312      	str	r3, [sp, #72]	; 0x48
 800bc04:	46ab      	mov	fp, r5
 800bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc08:	4620      	mov	r0, r4
 800bc0a:	6859      	ldr	r1, [r3, #4]
 800bc0c:	f7ff f80e 	bl	800ac2c <_Balloc>
 800bc10:	9005      	str	r0, [sp, #20]
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f43f af18 	beq.w	800ba48 <_strtod_l+0x488>
 800bc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	3202      	adds	r2, #2
 800bc1e:	f103 010c 	add.w	r1, r3, #12
 800bc22:	0092      	lsls	r2, r2, #2
 800bc24:	300c      	adds	r0, #12
 800bc26:	f7fe f86a 	bl	8009cfe <memcpy>
 800bc2a:	ec49 8b10 	vmov	d0, r8, r9
 800bc2e:	aa18      	add	r2, sp, #96	; 0x60
 800bc30:	a917      	add	r1, sp, #92	; 0x5c
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7ff fbd6 	bl	800b3e4 <__d2b>
 800bc38:	ec49 8b18 	vmov	d8, r8, r9
 800bc3c:	9016      	str	r0, [sp, #88]	; 0x58
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f43f af02 	beq.w	800ba48 <_strtod_l+0x488>
 800bc44:	2101      	movs	r1, #1
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff f930 	bl	800aeac <__i2b>
 800bc4c:	4683      	mov	fp, r0
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f aefa 	beq.w	800ba48 <_strtod_l+0x488>
 800bc54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bc56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	bfab      	itete	ge
 800bc5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bc5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bc60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bc66:	bfac      	ite	ge
 800bc68:	eb06 0a03 	addge.w	sl, r6, r3
 800bc6c:	1b9f      	sublt	r7, r3, r6
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	1af6      	subs	r6, r6, r3
 800bc72:	4416      	add	r6, r2
 800bc74:	4ba0      	ldr	r3, [pc, #640]	; (800bef8 <_strtod_l+0x938>)
 800bc76:	3e01      	subs	r6, #1
 800bc78:	429e      	cmp	r6, r3
 800bc7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc7e:	f280 80c4 	bge.w	800be0a <_strtod_l+0x84a>
 800bc82:	1b9b      	subs	r3, r3, r6
 800bc84:	2b1f      	cmp	r3, #31
 800bc86:	eba2 0203 	sub.w	r2, r2, r3
 800bc8a:	f04f 0101 	mov.w	r1, #1
 800bc8e:	f300 80b0 	bgt.w	800bdf2 <_strtod_l+0x832>
 800bc92:	fa01 f303 	lsl.w	r3, r1, r3
 800bc96:	930e      	str	r3, [sp, #56]	; 0x38
 800bc98:	2300      	movs	r3, #0
 800bc9a:	930d      	str	r3, [sp, #52]	; 0x34
 800bc9c:	eb0a 0602 	add.w	r6, sl, r2
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	45b2      	cmp	sl, r6
 800bca4:	4417      	add	r7, r2
 800bca6:	441f      	add	r7, r3
 800bca8:	4653      	mov	r3, sl
 800bcaa:	bfa8      	it	ge
 800bcac:	4633      	movge	r3, r6
 800bcae:	42bb      	cmp	r3, r7
 800bcb0:	bfa8      	it	ge
 800bcb2:	463b      	movge	r3, r7
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfc2      	ittt	gt
 800bcb8:	1af6      	subgt	r6, r6, r3
 800bcba:	1aff      	subgt	r7, r7, r3
 800bcbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bcc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dd17      	ble.n	800bcf6 <_strtod_l+0x736>
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4620      	mov	r0, r4
 800bccc:	f7ff f9ae 	bl	800b02c <__pow5mult>
 800bcd0:	4683      	mov	fp, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	f43f aeb8 	beq.w	800ba48 <_strtod_l+0x488>
 800bcd8:	4601      	mov	r1, r0
 800bcda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7ff f8fb 	bl	800aed8 <__multiply>
 800bce2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f43f aeaf 	beq.w	800ba48 <_strtod_l+0x488>
 800bcea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7fe ffdd 	bl	800acac <_Bfree>
 800bcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf4:	9316      	str	r3, [sp, #88]	; 0x58
 800bcf6:	2e00      	cmp	r6, #0
 800bcf8:	f300 808c 	bgt.w	800be14 <_strtod_l+0x854>
 800bcfc:	9b08      	ldr	r3, [sp, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dd08      	ble.n	800bd14 <_strtod_l+0x754>
 800bd02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd04:	9905      	ldr	r1, [sp, #20]
 800bd06:	4620      	mov	r0, r4
 800bd08:	f7ff f990 	bl	800b02c <__pow5mult>
 800bd0c:	9005      	str	r0, [sp, #20]
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f43f ae9a 	beq.w	800ba48 <_strtod_l+0x488>
 800bd14:	2f00      	cmp	r7, #0
 800bd16:	dd08      	ble.n	800bd2a <_strtod_l+0x76a>
 800bd18:	9905      	ldr	r1, [sp, #20]
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7ff f9df 	bl	800b0e0 <__lshift>
 800bd22:	9005      	str	r0, [sp, #20]
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f43f ae8f 	beq.w	800ba48 <_strtod_l+0x488>
 800bd2a:	f1ba 0f00 	cmp.w	sl, #0
 800bd2e:	dd08      	ble.n	800bd42 <_strtod_l+0x782>
 800bd30:	4659      	mov	r1, fp
 800bd32:	4652      	mov	r2, sl
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7ff f9d3 	bl	800b0e0 <__lshift>
 800bd3a:	4683      	mov	fp, r0
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f43f ae83 	beq.w	800ba48 <_strtod_l+0x488>
 800bd42:	9a05      	ldr	r2, [sp, #20]
 800bd44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7ff fa52 	bl	800b1f0 <__mdiff>
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f43f ae7a 	beq.w	800ba48 <_strtod_l+0x488>
 800bd54:	68c3      	ldr	r3, [r0, #12]
 800bd56:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60c3      	str	r3, [r0, #12]
 800bd5c:	4659      	mov	r1, fp
 800bd5e:	f7ff fa2b 	bl	800b1b8 <__mcmp>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	da60      	bge.n	800be28 <_strtod_l+0x868>
 800bd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd68:	ea53 0308 	orrs.w	r3, r3, r8
 800bd6c:	f040 8084 	bne.w	800be78 <_strtod_l+0x8b8>
 800bd70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d17f      	bne.n	800be78 <_strtod_l+0x8b8>
 800bd78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd7c:	0d1b      	lsrs	r3, r3, #20
 800bd7e:	051b      	lsls	r3, r3, #20
 800bd80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd84:	d978      	bls.n	800be78 <_strtod_l+0x8b8>
 800bd86:	696b      	ldr	r3, [r5, #20]
 800bd88:	b913      	cbnz	r3, 800bd90 <_strtod_l+0x7d0>
 800bd8a:	692b      	ldr	r3, [r5, #16]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	dd73      	ble.n	800be78 <_strtod_l+0x8b8>
 800bd90:	4629      	mov	r1, r5
 800bd92:	2201      	movs	r2, #1
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7ff f9a3 	bl	800b0e0 <__lshift>
 800bd9a:	4659      	mov	r1, fp
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	f7ff fa0b 	bl	800b1b8 <__mcmp>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	dd68      	ble.n	800be78 <_strtod_l+0x8b8>
 800bda6:	9904      	ldr	r1, [sp, #16]
 800bda8:	4a54      	ldr	r2, [pc, #336]	; (800befc <_strtod_l+0x93c>)
 800bdaa:	464b      	mov	r3, r9
 800bdac:	2900      	cmp	r1, #0
 800bdae:	f000 8084 	beq.w	800beba <_strtod_l+0x8fa>
 800bdb2:	ea02 0109 	and.w	r1, r2, r9
 800bdb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdba:	dc7e      	bgt.n	800beba <_strtod_l+0x8fa>
 800bdbc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bdc0:	f77f aeb3 	ble.w	800bb2a <_strtod_l+0x56a>
 800bdc4:	4b4e      	ldr	r3, [pc, #312]	; (800bf00 <_strtod_l+0x940>)
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f7f4 fc14 	bl	80005f8 <__aeabi_dmul>
 800bdd0:	4b4a      	ldr	r3, [pc, #296]	; (800befc <_strtod_l+0x93c>)
 800bdd2:	400b      	ands	r3, r1
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	4689      	mov	r9, r1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f47f ae3f 	bne.w	800ba5c <_strtod_l+0x49c>
 800bdde:	2322      	movs	r3, #34	; 0x22
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	e63b      	b.n	800ba5c <_strtod_l+0x49c>
 800bde4:	f04f 32ff 	mov.w	r2, #4294967295
 800bde8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdec:	ea03 0808 	and.w	r8, r3, r8
 800bdf0:	e6e8      	b.n	800bbc4 <_strtod_l+0x604>
 800bdf2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bdf6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bdfa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bdfe:	36e2      	adds	r6, #226	; 0xe2
 800be00:	fa01 f306 	lsl.w	r3, r1, r6
 800be04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800be08:	e748      	b.n	800bc9c <_strtod_l+0x6dc>
 800be0a:	2100      	movs	r1, #0
 800be0c:	2301      	movs	r3, #1
 800be0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800be12:	e743      	b.n	800bc9c <_strtod_l+0x6dc>
 800be14:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be16:	4632      	mov	r2, r6
 800be18:	4620      	mov	r0, r4
 800be1a:	f7ff f961 	bl	800b0e0 <__lshift>
 800be1e:	9016      	str	r0, [sp, #88]	; 0x58
 800be20:	2800      	cmp	r0, #0
 800be22:	f47f af6b 	bne.w	800bcfc <_strtod_l+0x73c>
 800be26:	e60f      	b.n	800ba48 <_strtod_l+0x488>
 800be28:	46ca      	mov	sl, r9
 800be2a:	d171      	bne.n	800bf10 <_strtod_l+0x950>
 800be2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be32:	b352      	cbz	r2, 800be8a <_strtod_l+0x8ca>
 800be34:	4a33      	ldr	r2, [pc, #204]	; (800bf04 <_strtod_l+0x944>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d12a      	bne.n	800be90 <_strtod_l+0x8d0>
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	4641      	mov	r1, r8
 800be3e:	b1fb      	cbz	r3, 800be80 <_strtod_l+0x8c0>
 800be40:	4b2e      	ldr	r3, [pc, #184]	; (800befc <_strtod_l+0x93c>)
 800be42:	ea09 0303 	and.w	r3, r9, r3
 800be46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	d81a      	bhi.n	800be86 <_strtod_l+0x8c6>
 800be50:	0d1b      	lsrs	r3, r3, #20
 800be52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be56:	fa02 f303 	lsl.w	r3, r2, r3
 800be5a:	4299      	cmp	r1, r3
 800be5c:	d118      	bne.n	800be90 <_strtod_l+0x8d0>
 800be5e:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <_strtod_l+0x948>)
 800be60:	459a      	cmp	sl, r3
 800be62:	d102      	bne.n	800be6a <_strtod_l+0x8aa>
 800be64:	3101      	adds	r1, #1
 800be66:	f43f adef 	beq.w	800ba48 <_strtod_l+0x488>
 800be6a:	4b24      	ldr	r3, [pc, #144]	; (800befc <_strtod_l+0x93c>)
 800be6c:	ea0a 0303 	and.w	r3, sl, r3
 800be70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800be74:	f04f 0800 	mov.w	r8, #0
 800be78:	9b04      	ldr	r3, [sp, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1a2      	bne.n	800bdc4 <_strtod_l+0x804>
 800be7e:	e5ed      	b.n	800ba5c <_strtod_l+0x49c>
 800be80:	f04f 33ff 	mov.w	r3, #4294967295
 800be84:	e7e9      	b.n	800be5a <_strtod_l+0x89a>
 800be86:	4613      	mov	r3, r2
 800be88:	e7e7      	b.n	800be5a <_strtod_l+0x89a>
 800be8a:	ea53 0308 	orrs.w	r3, r3, r8
 800be8e:	d08a      	beq.n	800bda6 <_strtod_l+0x7e6>
 800be90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be92:	b1e3      	cbz	r3, 800bece <_strtod_l+0x90e>
 800be94:	ea13 0f0a 	tst.w	r3, sl
 800be98:	d0ee      	beq.n	800be78 <_strtod_l+0x8b8>
 800be9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be9c:	9a04      	ldr	r2, [sp, #16]
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	b1c3      	cbz	r3, 800bed6 <_strtod_l+0x916>
 800bea4:	f7ff fb6f 	bl	800b586 <sulp>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	ec51 0b18 	vmov	r0, r1, d8
 800beb0:	f7f4 f9ec 	bl	800028c <__adddf3>
 800beb4:	4680      	mov	r8, r0
 800beb6:	4689      	mov	r9, r1
 800beb8:	e7de      	b.n	800be78 <_strtod_l+0x8b8>
 800beba:	4013      	ands	r3, r2
 800bebc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bec0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bec4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bec8:	f04f 38ff 	mov.w	r8, #4294967295
 800becc:	e7d4      	b.n	800be78 <_strtod_l+0x8b8>
 800bece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed0:	ea13 0f08 	tst.w	r3, r8
 800bed4:	e7e0      	b.n	800be98 <_strtod_l+0x8d8>
 800bed6:	f7ff fb56 	bl	800b586 <sulp>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	ec51 0b18 	vmov	r0, r1, d8
 800bee2:	f7f4 f9d1 	bl	8000288 <__aeabi_dsub>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	4680      	mov	r8, r0
 800beec:	4689      	mov	r9, r1
 800beee:	f7f4 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d0c0      	beq.n	800be78 <_strtod_l+0x8b8>
 800bef6:	e618      	b.n	800bb2a <_strtod_l+0x56a>
 800bef8:	fffffc02 	.word	0xfffffc02
 800befc:	7ff00000 	.word	0x7ff00000
 800bf00:	39500000 	.word	0x39500000
 800bf04:	000fffff 	.word	0x000fffff
 800bf08:	7fefffff 	.word	0x7fefffff
 800bf0c:	0800de50 	.word	0x0800de50
 800bf10:	4659      	mov	r1, fp
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7ff fac0 	bl	800b498 <__ratio>
 800bf18:	ec57 6b10 	vmov	r6, r7, d0
 800bf1c:	ee10 0a10 	vmov	r0, s0
 800bf20:	2200      	movs	r2, #0
 800bf22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 fde2 	bl	8000af0 <__aeabi_dcmple>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d071      	beq.n	800c014 <_strtod_l+0xa54>
 800bf30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d17c      	bne.n	800c030 <_strtod_l+0xa70>
 800bf36:	f1b8 0f00 	cmp.w	r8, #0
 800bf3a:	d15a      	bne.n	800bff2 <_strtod_l+0xa32>
 800bf3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d15d      	bne.n	800c000 <_strtod_l+0xa40>
 800bf44:	4b90      	ldr	r3, [pc, #576]	; (800c188 <_strtod_l+0xbc8>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 fdc6 	bl	8000adc <__aeabi_dcmplt>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d15c      	bne.n	800c00e <_strtod_l+0xa4e>
 800bf54:	4630      	mov	r0, r6
 800bf56:	4639      	mov	r1, r7
 800bf58:	4b8c      	ldr	r3, [pc, #560]	; (800c18c <_strtod_l+0xbcc>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f7f4 fb4c 	bl	80005f8 <__aeabi_dmul>
 800bf60:	4606      	mov	r6, r0
 800bf62:	460f      	mov	r7, r1
 800bf64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bf68:	9606      	str	r6, [sp, #24]
 800bf6a:	9307      	str	r3, [sp, #28]
 800bf6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bf74:	4b86      	ldr	r3, [pc, #536]	; (800c190 <_strtod_l+0xbd0>)
 800bf76:	ea0a 0303 	and.w	r3, sl, r3
 800bf7a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf7e:	4b85      	ldr	r3, [pc, #532]	; (800c194 <_strtod_l+0xbd4>)
 800bf80:	429a      	cmp	r2, r3
 800bf82:	f040 8090 	bne.w	800c0a6 <_strtod_l+0xae6>
 800bf86:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bf8a:	ec49 8b10 	vmov	d0, r8, r9
 800bf8e:	f7ff f9b9 	bl	800b304 <__ulp>
 800bf92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf96:	ec51 0b10 	vmov	r0, r1, d0
 800bf9a:	f7f4 fb2d 	bl	80005f8 <__aeabi_dmul>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	f7f4 f973 	bl	800028c <__adddf3>
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4979      	ldr	r1, [pc, #484]	; (800c190 <_strtod_l+0xbd0>)
 800bfaa:	4a7b      	ldr	r2, [pc, #492]	; (800c198 <_strtod_l+0xbd8>)
 800bfac:	4019      	ands	r1, r3
 800bfae:	4291      	cmp	r1, r2
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	d944      	bls.n	800c03e <_strtod_l+0xa7e>
 800bfb4:	ee18 2a90 	vmov	r2, s17
 800bfb8:	4b78      	ldr	r3, [pc, #480]	; (800c19c <_strtod_l+0xbdc>)
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d104      	bne.n	800bfc8 <_strtod_l+0xa08>
 800bfbe:	ee18 3a10 	vmov	r3, s16
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	f43f ad40 	beq.w	800ba48 <_strtod_l+0x488>
 800bfc8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c19c <_strtod_l+0xbdc>
 800bfcc:	f04f 38ff 	mov.w	r8, #4294967295
 800bfd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7fe fe6a 	bl	800acac <_Bfree>
 800bfd8:	9905      	ldr	r1, [sp, #20]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7fe fe66 	bl	800acac <_Bfree>
 800bfe0:	4659      	mov	r1, fp
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7fe fe62 	bl	800acac <_Bfree>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4620      	mov	r0, r4
 800bfec:	f7fe fe5e 	bl	800acac <_Bfree>
 800bff0:	e609      	b.n	800bc06 <_strtod_l+0x646>
 800bff2:	f1b8 0f01 	cmp.w	r8, #1
 800bff6:	d103      	bne.n	800c000 <_strtod_l+0xa40>
 800bff8:	f1b9 0f00 	cmp.w	r9, #0
 800bffc:	f43f ad95 	beq.w	800bb2a <_strtod_l+0x56a>
 800c000:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c158 <_strtod_l+0xb98>
 800c004:	4f60      	ldr	r7, [pc, #384]	; (800c188 <_strtod_l+0xbc8>)
 800c006:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c00a:	2600      	movs	r6, #0
 800c00c:	e7ae      	b.n	800bf6c <_strtod_l+0x9ac>
 800c00e:	4f5f      	ldr	r7, [pc, #380]	; (800c18c <_strtod_l+0xbcc>)
 800c010:	2600      	movs	r6, #0
 800c012:	e7a7      	b.n	800bf64 <_strtod_l+0x9a4>
 800c014:	4b5d      	ldr	r3, [pc, #372]	; (800c18c <_strtod_l+0xbcc>)
 800c016:	4630      	mov	r0, r6
 800c018:	4639      	mov	r1, r7
 800c01a:	2200      	movs	r2, #0
 800c01c:	f7f4 faec 	bl	80005f8 <__aeabi_dmul>
 800c020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c022:	4606      	mov	r6, r0
 800c024:	460f      	mov	r7, r1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d09c      	beq.n	800bf64 <_strtod_l+0x9a4>
 800c02a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c02e:	e79d      	b.n	800bf6c <_strtod_l+0x9ac>
 800c030:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c160 <_strtod_l+0xba0>
 800c034:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c038:	ec57 6b17 	vmov	r6, r7, d7
 800c03c:	e796      	b.n	800bf6c <_strtod_l+0x9ac>
 800c03e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	46ca      	mov	sl, r9
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1c2      	bne.n	800bfd0 <_strtod_l+0xa10>
 800c04a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c04e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c050:	0d1b      	lsrs	r3, r3, #20
 800c052:	051b      	lsls	r3, r3, #20
 800c054:	429a      	cmp	r2, r3
 800c056:	d1bb      	bne.n	800bfd0 <_strtod_l+0xa10>
 800c058:	4630      	mov	r0, r6
 800c05a:	4639      	mov	r1, r7
 800c05c:	f7f4 fe14 	bl	8000c88 <__aeabi_d2lz>
 800c060:	f7f4 fa9c 	bl	800059c <__aeabi_l2d>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4630      	mov	r0, r6
 800c06a:	4639      	mov	r1, r7
 800c06c:	f7f4 f90c 	bl	8000288 <__aeabi_dsub>
 800c070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c072:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c076:	ea43 0308 	orr.w	r3, r3, r8
 800c07a:	4313      	orrs	r3, r2
 800c07c:	4606      	mov	r6, r0
 800c07e:	460f      	mov	r7, r1
 800c080:	d054      	beq.n	800c12c <_strtod_l+0xb6c>
 800c082:	a339      	add	r3, pc, #228	; (adr r3, 800c168 <_strtod_l+0xba8>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 fd28 	bl	8000adc <__aeabi_dcmplt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f47f ace5 	bne.w	800ba5c <_strtod_l+0x49c>
 800c092:	a337      	add	r3, pc, #220	; (adr r3, 800c170 <_strtod_l+0xbb0>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d095      	beq.n	800bfd0 <_strtod_l+0xa10>
 800c0a4:	e4da      	b.n	800ba5c <_strtod_l+0x49c>
 800c0a6:	9b04      	ldr	r3, [sp, #16]
 800c0a8:	b333      	cbz	r3, 800c0f8 <_strtod_l+0xb38>
 800c0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0b0:	d822      	bhi.n	800c0f8 <_strtod_l+0xb38>
 800c0b2:	a331      	add	r3, pc, #196	; (adr r3, 800c178 <_strtod_l+0xbb8>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	f7f4 fd18 	bl	8000af0 <__aeabi_dcmple>
 800c0c0:	b1a0      	cbz	r0, 800c0ec <_strtod_l+0xb2c>
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7f4 fd6f 	bl	8000ba8 <__aeabi_d2uiz>
 800c0ca:	2801      	cmp	r0, #1
 800c0cc:	bf38      	it	cc
 800c0ce:	2001      	movcc	r0, #1
 800c0d0:	f7f4 fa18 	bl	8000504 <__aeabi_ui2d>
 800c0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	460f      	mov	r7, r1
 800c0da:	bb23      	cbnz	r3, 800c126 <_strtod_l+0xb66>
 800c0dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0e0:	9010      	str	r0, [sp, #64]	; 0x40
 800c0e2:	9311      	str	r3, [sp, #68]	; 0x44
 800c0e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c0f4:	1a9b      	subs	r3, r3, r2
 800c0f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c100:	eef0 0a68 	vmov.f32	s1, s17
 800c104:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c108:	f7ff f8fc 	bl	800b304 <__ulp>
 800c10c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c110:	ec53 2b10 	vmov	r2, r3, d0
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	ec53 2b18 	vmov	r2, r3, d8
 800c11c:	f7f4 f8b6 	bl	800028c <__adddf3>
 800c120:	4680      	mov	r8, r0
 800c122:	4689      	mov	r9, r1
 800c124:	e78d      	b.n	800c042 <_strtod_l+0xa82>
 800c126:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c12a:	e7db      	b.n	800c0e4 <_strtod_l+0xb24>
 800c12c:	a314      	add	r3, pc, #80	; (adr r3, 800c180 <_strtod_l+0xbc0>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	f7f4 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800c136:	e7b3      	b.n	800c0a0 <_strtod_l+0xae0>
 800c138:	2300      	movs	r3, #0
 800c13a:	930a      	str	r3, [sp, #40]	; 0x28
 800c13c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	f7ff ba7c 	b.w	800b63e <_strtod_l+0x7e>
 800c146:	2a65      	cmp	r2, #101	; 0x65
 800c148:	f43f ab75 	beq.w	800b836 <_strtod_l+0x276>
 800c14c:	2a45      	cmp	r2, #69	; 0x45
 800c14e:	f43f ab72 	beq.w	800b836 <_strtod_l+0x276>
 800c152:	2301      	movs	r3, #1
 800c154:	f7ff bbaa 	b.w	800b8ac <_strtod_l+0x2ec>
 800c158:	00000000 	.word	0x00000000
 800c15c:	bff00000 	.word	0xbff00000
 800c160:	00000000 	.word	0x00000000
 800c164:	3ff00000 	.word	0x3ff00000
 800c168:	94a03595 	.word	0x94a03595
 800c16c:	3fdfffff 	.word	0x3fdfffff
 800c170:	35afe535 	.word	0x35afe535
 800c174:	3fe00000 	.word	0x3fe00000
 800c178:	ffc00000 	.word	0xffc00000
 800c17c:	41dfffff 	.word	0x41dfffff
 800c180:	94a03595 	.word	0x94a03595
 800c184:	3fcfffff 	.word	0x3fcfffff
 800c188:	3ff00000 	.word	0x3ff00000
 800c18c:	3fe00000 	.word	0x3fe00000
 800c190:	7ff00000 	.word	0x7ff00000
 800c194:	7fe00000 	.word	0x7fe00000
 800c198:	7c9fffff 	.word	0x7c9fffff
 800c19c:	7fefffff 	.word	0x7fefffff

0800c1a0 <_strtod_r>:
 800c1a0:	4b01      	ldr	r3, [pc, #4]	; (800c1a8 <_strtod_r+0x8>)
 800c1a2:	f7ff ba0d 	b.w	800b5c0 <_strtod_l>
 800c1a6:	bf00      	nop
 800c1a8:	20000074 	.word	0x20000074

0800c1ac <_strtol_l.constprop.0>:
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b2:	d001      	beq.n	800c1b8 <_strtol_l.constprop.0+0xc>
 800c1b4:	2b24      	cmp	r3, #36	; 0x24
 800c1b6:	d906      	bls.n	800c1c6 <_strtol_l.constprop.0+0x1a>
 800c1b8:	f7fd fd74 	bl	8009ca4 <__errno>
 800c1bc:	2316      	movs	r3, #22
 800c1be:	6003      	str	r3, [r0, #0]
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2ac <_strtol_l.constprop.0+0x100>
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	462e      	mov	r6, r5
 800c1ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c1d6:	f017 0708 	ands.w	r7, r7, #8
 800c1da:	d1f7      	bne.n	800c1cc <_strtol_l.constprop.0+0x20>
 800c1dc:	2c2d      	cmp	r4, #45	; 0x2d
 800c1de:	d132      	bne.n	800c246 <_strtol_l.constprop.0+0x9a>
 800c1e0:	782c      	ldrb	r4, [r5, #0]
 800c1e2:	2701      	movs	r7, #1
 800c1e4:	1cb5      	adds	r5, r6, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d05b      	beq.n	800c2a2 <_strtol_l.constprop.0+0xf6>
 800c1ea:	2b10      	cmp	r3, #16
 800c1ec:	d109      	bne.n	800c202 <_strtol_l.constprop.0+0x56>
 800c1ee:	2c30      	cmp	r4, #48	; 0x30
 800c1f0:	d107      	bne.n	800c202 <_strtol_l.constprop.0+0x56>
 800c1f2:	782c      	ldrb	r4, [r5, #0]
 800c1f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c1f8:	2c58      	cmp	r4, #88	; 0x58
 800c1fa:	d14d      	bne.n	800c298 <_strtol_l.constprop.0+0xec>
 800c1fc:	786c      	ldrb	r4, [r5, #1]
 800c1fe:	2310      	movs	r3, #16
 800c200:	3502      	adds	r5, #2
 800c202:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c206:	f108 38ff 	add.w	r8, r8, #4294967295
 800c20a:	f04f 0e00 	mov.w	lr, #0
 800c20e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c212:	4676      	mov	r6, lr
 800c214:	fb03 8a19 	mls	sl, r3, r9, r8
 800c218:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c21c:	f1bc 0f09 	cmp.w	ip, #9
 800c220:	d816      	bhi.n	800c250 <_strtol_l.constprop.0+0xa4>
 800c222:	4664      	mov	r4, ip
 800c224:	42a3      	cmp	r3, r4
 800c226:	dd24      	ble.n	800c272 <_strtol_l.constprop.0+0xc6>
 800c228:	f1be 3fff 	cmp.w	lr, #4294967295
 800c22c:	d008      	beq.n	800c240 <_strtol_l.constprop.0+0x94>
 800c22e:	45b1      	cmp	r9, r6
 800c230:	d31c      	bcc.n	800c26c <_strtol_l.constprop.0+0xc0>
 800c232:	d101      	bne.n	800c238 <_strtol_l.constprop.0+0x8c>
 800c234:	45a2      	cmp	sl, r4
 800c236:	db19      	blt.n	800c26c <_strtol_l.constprop.0+0xc0>
 800c238:	fb06 4603 	mla	r6, r6, r3, r4
 800c23c:	f04f 0e01 	mov.w	lr, #1
 800c240:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c244:	e7e8      	b.n	800c218 <_strtol_l.constprop.0+0x6c>
 800c246:	2c2b      	cmp	r4, #43	; 0x2b
 800c248:	bf04      	itt	eq
 800c24a:	782c      	ldrbeq	r4, [r5, #0]
 800c24c:	1cb5      	addeq	r5, r6, #2
 800c24e:	e7ca      	b.n	800c1e6 <_strtol_l.constprop.0+0x3a>
 800c250:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c254:	f1bc 0f19 	cmp.w	ip, #25
 800c258:	d801      	bhi.n	800c25e <_strtol_l.constprop.0+0xb2>
 800c25a:	3c37      	subs	r4, #55	; 0x37
 800c25c:	e7e2      	b.n	800c224 <_strtol_l.constprop.0+0x78>
 800c25e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c262:	f1bc 0f19 	cmp.w	ip, #25
 800c266:	d804      	bhi.n	800c272 <_strtol_l.constprop.0+0xc6>
 800c268:	3c57      	subs	r4, #87	; 0x57
 800c26a:	e7db      	b.n	800c224 <_strtol_l.constprop.0+0x78>
 800c26c:	f04f 3eff 	mov.w	lr, #4294967295
 800c270:	e7e6      	b.n	800c240 <_strtol_l.constprop.0+0x94>
 800c272:	f1be 3fff 	cmp.w	lr, #4294967295
 800c276:	d105      	bne.n	800c284 <_strtol_l.constprop.0+0xd8>
 800c278:	2322      	movs	r3, #34	; 0x22
 800c27a:	6003      	str	r3, [r0, #0]
 800c27c:	4646      	mov	r6, r8
 800c27e:	b942      	cbnz	r2, 800c292 <_strtol_l.constprop.0+0xe6>
 800c280:	4630      	mov	r0, r6
 800c282:	e79e      	b.n	800c1c2 <_strtol_l.constprop.0+0x16>
 800c284:	b107      	cbz	r7, 800c288 <_strtol_l.constprop.0+0xdc>
 800c286:	4276      	negs	r6, r6
 800c288:	2a00      	cmp	r2, #0
 800c28a:	d0f9      	beq.n	800c280 <_strtol_l.constprop.0+0xd4>
 800c28c:	f1be 0f00 	cmp.w	lr, #0
 800c290:	d000      	beq.n	800c294 <_strtol_l.constprop.0+0xe8>
 800c292:	1e69      	subs	r1, r5, #1
 800c294:	6011      	str	r1, [r2, #0]
 800c296:	e7f3      	b.n	800c280 <_strtol_l.constprop.0+0xd4>
 800c298:	2430      	movs	r4, #48	; 0x30
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1b1      	bne.n	800c202 <_strtol_l.constprop.0+0x56>
 800c29e:	2308      	movs	r3, #8
 800c2a0:	e7af      	b.n	800c202 <_strtol_l.constprop.0+0x56>
 800c2a2:	2c30      	cmp	r4, #48	; 0x30
 800c2a4:	d0a5      	beq.n	800c1f2 <_strtol_l.constprop.0+0x46>
 800c2a6:	230a      	movs	r3, #10
 800c2a8:	e7ab      	b.n	800c202 <_strtol_l.constprop.0+0x56>
 800c2aa:	bf00      	nop
 800c2ac:	0800de79 	.word	0x0800de79

0800c2b0 <_strtol_r>:
 800c2b0:	f7ff bf7c 	b.w	800c1ac <_strtol_l.constprop.0>

0800c2b4 <__ssputs_r>:
 800c2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b8:	688e      	ldr	r6, [r1, #8]
 800c2ba:	461f      	mov	r7, r3
 800c2bc:	42be      	cmp	r6, r7
 800c2be:	680b      	ldr	r3, [r1, #0]
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	4690      	mov	r8, r2
 800c2c6:	d82c      	bhi.n	800c322 <__ssputs_r+0x6e>
 800c2c8:	898a      	ldrh	r2, [r1, #12]
 800c2ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2ce:	d026      	beq.n	800c31e <__ssputs_r+0x6a>
 800c2d0:	6965      	ldr	r5, [r4, #20]
 800c2d2:	6909      	ldr	r1, [r1, #16]
 800c2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2d8:	eba3 0901 	sub.w	r9, r3, r1
 800c2dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2e0:	1c7b      	adds	r3, r7, #1
 800c2e2:	444b      	add	r3, r9
 800c2e4:	106d      	asrs	r5, r5, #1
 800c2e6:	429d      	cmp	r5, r3
 800c2e8:	bf38      	it	cc
 800c2ea:	461d      	movcc	r5, r3
 800c2ec:	0553      	lsls	r3, r2, #21
 800c2ee:	d527      	bpl.n	800c340 <__ssputs_r+0x8c>
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7fe fc0f 	bl	800ab14 <_malloc_r>
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	b360      	cbz	r0, 800c354 <__ssputs_r+0xa0>
 800c2fa:	6921      	ldr	r1, [r4, #16]
 800c2fc:	464a      	mov	r2, r9
 800c2fe:	f7fd fcfe 	bl	8009cfe <memcpy>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	6126      	str	r6, [r4, #16]
 800c310:	6165      	str	r5, [r4, #20]
 800c312:	444e      	add	r6, r9
 800c314:	eba5 0509 	sub.w	r5, r5, r9
 800c318:	6026      	str	r6, [r4, #0]
 800c31a:	60a5      	str	r5, [r4, #8]
 800c31c:	463e      	mov	r6, r7
 800c31e:	42be      	cmp	r6, r7
 800c320:	d900      	bls.n	800c324 <__ssputs_r+0x70>
 800c322:	463e      	mov	r6, r7
 800c324:	6820      	ldr	r0, [r4, #0]
 800c326:	4632      	mov	r2, r6
 800c328:	4641      	mov	r1, r8
 800c32a:	f000 fba3 	bl	800ca74 <memmove>
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	1b9b      	subs	r3, r3, r6
 800c332:	60a3      	str	r3, [r4, #8]
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	4433      	add	r3, r6
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	2000      	movs	r0, #0
 800c33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c340:	462a      	mov	r2, r5
 800c342:	f000 ffa0 	bl	800d286 <_realloc_r>
 800c346:	4606      	mov	r6, r0
 800c348:	2800      	cmp	r0, #0
 800c34a:	d1e0      	bne.n	800c30e <__ssputs_r+0x5a>
 800c34c:	6921      	ldr	r1, [r4, #16]
 800c34e:	4650      	mov	r0, sl
 800c350:	f7fe fb6c 	bl	800aa2c <_free_r>
 800c354:	230c      	movs	r3, #12
 800c356:	f8ca 3000 	str.w	r3, [sl]
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	f04f 30ff 	mov.w	r0, #4294967295
 800c366:	e7e9      	b.n	800c33c <__ssputs_r+0x88>

0800c368 <_svfiprintf_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	4698      	mov	r8, r3
 800c36e:	898b      	ldrh	r3, [r1, #12]
 800c370:	061b      	lsls	r3, r3, #24
 800c372:	b09d      	sub	sp, #116	; 0x74
 800c374:	4607      	mov	r7, r0
 800c376:	460d      	mov	r5, r1
 800c378:	4614      	mov	r4, r2
 800c37a:	d50e      	bpl.n	800c39a <_svfiprintf_r+0x32>
 800c37c:	690b      	ldr	r3, [r1, #16]
 800c37e:	b963      	cbnz	r3, 800c39a <_svfiprintf_r+0x32>
 800c380:	2140      	movs	r1, #64	; 0x40
 800c382:	f7fe fbc7 	bl	800ab14 <_malloc_r>
 800c386:	6028      	str	r0, [r5, #0]
 800c388:	6128      	str	r0, [r5, #16]
 800c38a:	b920      	cbnz	r0, 800c396 <_svfiprintf_r+0x2e>
 800c38c:	230c      	movs	r3, #12
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	f04f 30ff 	mov.w	r0, #4294967295
 800c394:	e0d0      	b.n	800c538 <_svfiprintf_r+0x1d0>
 800c396:	2340      	movs	r3, #64	; 0x40
 800c398:	616b      	str	r3, [r5, #20]
 800c39a:	2300      	movs	r3, #0
 800c39c:	9309      	str	r3, [sp, #36]	; 0x24
 800c39e:	2320      	movs	r3, #32
 800c3a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3a8:	2330      	movs	r3, #48	; 0x30
 800c3aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c550 <_svfiprintf_r+0x1e8>
 800c3ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b2:	f04f 0901 	mov.w	r9, #1
 800c3b6:	4623      	mov	r3, r4
 800c3b8:	469a      	mov	sl, r3
 800c3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3be:	b10a      	cbz	r2, 800c3c4 <_svfiprintf_r+0x5c>
 800c3c0:	2a25      	cmp	r2, #37	; 0x25
 800c3c2:	d1f9      	bne.n	800c3b8 <_svfiprintf_r+0x50>
 800c3c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c8:	d00b      	beq.n	800c3e2 <_svfiprintf_r+0x7a>
 800c3ca:	465b      	mov	r3, fp
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ff6f 	bl	800c2b4 <__ssputs_r>
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f000 80a9 	beq.w	800c52e <_svfiprintf_r+0x1c6>
 800c3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3de:	445a      	add	r2, fp
 800c3e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 80a1 	beq.w	800c52e <_svfiprintf_r+0x1c6>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f6:	f10a 0a01 	add.w	sl, sl, #1
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	9307      	str	r3, [sp, #28]
 800c3fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c402:	931a      	str	r3, [sp, #104]	; 0x68
 800c404:	4654      	mov	r4, sl
 800c406:	2205      	movs	r2, #5
 800c408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40c:	4850      	ldr	r0, [pc, #320]	; (800c550 <_svfiprintf_r+0x1e8>)
 800c40e:	f7f3 fedf 	bl	80001d0 <memchr>
 800c412:	9a04      	ldr	r2, [sp, #16]
 800c414:	b9d8      	cbnz	r0, 800c44e <_svfiprintf_r+0xe6>
 800c416:	06d0      	lsls	r0, r2, #27
 800c418:	bf44      	itt	mi
 800c41a:	2320      	movmi	r3, #32
 800c41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c420:	0711      	lsls	r1, r2, #28
 800c422:	bf44      	itt	mi
 800c424:	232b      	movmi	r3, #43	; 0x2b
 800c426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c42a:	f89a 3000 	ldrb.w	r3, [sl]
 800c42e:	2b2a      	cmp	r3, #42	; 0x2a
 800c430:	d015      	beq.n	800c45e <_svfiprintf_r+0xf6>
 800c432:	9a07      	ldr	r2, [sp, #28]
 800c434:	4654      	mov	r4, sl
 800c436:	2000      	movs	r0, #0
 800c438:	f04f 0c0a 	mov.w	ip, #10
 800c43c:	4621      	mov	r1, r4
 800c43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c442:	3b30      	subs	r3, #48	; 0x30
 800c444:	2b09      	cmp	r3, #9
 800c446:	d94d      	bls.n	800c4e4 <_svfiprintf_r+0x17c>
 800c448:	b1b0      	cbz	r0, 800c478 <_svfiprintf_r+0x110>
 800c44a:	9207      	str	r2, [sp, #28]
 800c44c:	e014      	b.n	800c478 <_svfiprintf_r+0x110>
 800c44e:	eba0 0308 	sub.w	r3, r0, r8
 800c452:	fa09 f303 	lsl.w	r3, r9, r3
 800c456:	4313      	orrs	r3, r2
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	46a2      	mov	sl, r4
 800c45c:	e7d2      	b.n	800c404 <_svfiprintf_r+0x9c>
 800c45e:	9b03      	ldr	r3, [sp, #12]
 800c460:	1d19      	adds	r1, r3, #4
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	9103      	str	r1, [sp, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	bfbb      	ittet	lt
 800c46a:	425b      	neglt	r3, r3
 800c46c:	f042 0202 	orrlt.w	r2, r2, #2
 800c470:	9307      	strge	r3, [sp, #28]
 800c472:	9307      	strlt	r3, [sp, #28]
 800c474:	bfb8      	it	lt
 800c476:	9204      	strlt	r2, [sp, #16]
 800c478:	7823      	ldrb	r3, [r4, #0]
 800c47a:	2b2e      	cmp	r3, #46	; 0x2e
 800c47c:	d10c      	bne.n	800c498 <_svfiprintf_r+0x130>
 800c47e:	7863      	ldrb	r3, [r4, #1]
 800c480:	2b2a      	cmp	r3, #42	; 0x2a
 800c482:	d134      	bne.n	800c4ee <_svfiprintf_r+0x186>
 800c484:	9b03      	ldr	r3, [sp, #12]
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	9203      	str	r2, [sp, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bfb8      	it	lt
 800c490:	f04f 33ff 	movlt.w	r3, #4294967295
 800c494:	3402      	adds	r4, #2
 800c496:	9305      	str	r3, [sp, #20]
 800c498:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c560 <_svfiprintf_r+0x1f8>
 800c49c:	7821      	ldrb	r1, [r4, #0]
 800c49e:	2203      	movs	r2, #3
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	f7f3 fe95 	bl	80001d0 <memchr>
 800c4a6:	b138      	cbz	r0, 800c4b8 <_svfiprintf_r+0x150>
 800c4a8:	9b04      	ldr	r3, [sp, #16]
 800c4aa:	eba0 000a 	sub.w	r0, r0, sl
 800c4ae:	2240      	movs	r2, #64	; 0x40
 800c4b0:	4082      	lsls	r2, r0
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	3401      	adds	r4, #1
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	4825      	ldr	r0, [pc, #148]	; (800c554 <_svfiprintf_r+0x1ec>)
 800c4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4c2:	2206      	movs	r2, #6
 800c4c4:	f7f3 fe84 	bl	80001d0 <memchr>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d038      	beq.n	800c53e <_svfiprintf_r+0x1d6>
 800c4cc:	4b22      	ldr	r3, [pc, #136]	; (800c558 <_svfiprintf_r+0x1f0>)
 800c4ce:	bb1b      	cbnz	r3, 800c518 <_svfiprintf_r+0x1b0>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	3307      	adds	r3, #7
 800c4d4:	f023 0307 	bic.w	r3, r3, #7
 800c4d8:	3308      	adds	r3, #8
 800c4da:	9303      	str	r3, [sp, #12]
 800c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4de:	4433      	add	r3, r6
 800c4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e2:	e768      	b.n	800c3b6 <_svfiprintf_r+0x4e>
 800c4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	e7a6      	b.n	800c43c <_svfiprintf_r+0xd4>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	3401      	adds	r4, #1
 800c4f2:	9305      	str	r3, [sp, #20]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f04f 0c0a 	mov.w	ip, #10
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c500:	3a30      	subs	r2, #48	; 0x30
 800c502:	2a09      	cmp	r2, #9
 800c504:	d903      	bls.n	800c50e <_svfiprintf_r+0x1a6>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0c6      	beq.n	800c498 <_svfiprintf_r+0x130>
 800c50a:	9105      	str	r1, [sp, #20]
 800c50c:	e7c4      	b.n	800c498 <_svfiprintf_r+0x130>
 800c50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c512:	4604      	mov	r4, r0
 800c514:	2301      	movs	r3, #1
 800c516:	e7f0      	b.n	800c4fa <_svfiprintf_r+0x192>
 800c518:	ab03      	add	r3, sp, #12
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <_svfiprintf_r+0x1f4>)
 800c520:	a904      	add	r1, sp, #16
 800c522:	4638      	mov	r0, r7
 800c524:	f7fc fc5e 	bl	8008de4 <_printf_float>
 800c528:	1c42      	adds	r2, r0, #1
 800c52a:	4606      	mov	r6, r0
 800c52c:	d1d6      	bne.n	800c4dc <_svfiprintf_r+0x174>
 800c52e:	89ab      	ldrh	r3, [r5, #12]
 800c530:	065b      	lsls	r3, r3, #25
 800c532:	f53f af2d 	bmi.w	800c390 <_svfiprintf_r+0x28>
 800c536:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c538:	b01d      	add	sp, #116	; 0x74
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	ab03      	add	r3, sp, #12
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	462a      	mov	r2, r5
 800c544:	4b05      	ldr	r3, [pc, #20]	; (800c55c <_svfiprintf_r+0x1f4>)
 800c546:	a904      	add	r1, sp, #16
 800c548:	4638      	mov	r0, r7
 800c54a:	f7fc feef 	bl	800932c <_printf_i>
 800c54e:	e7eb      	b.n	800c528 <_svfiprintf_r+0x1c0>
 800c550:	0800df79 	.word	0x0800df79
 800c554:	0800df83 	.word	0x0800df83
 800c558:	08008de5 	.word	0x08008de5
 800c55c:	0800c2b5 	.word	0x0800c2b5
 800c560:	0800df7f 	.word	0x0800df7f

0800c564 <__sfputc_r>:
 800c564:	6893      	ldr	r3, [r2, #8]
 800c566:	3b01      	subs	r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	b410      	push	{r4}
 800c56c:	6093      	str	r3, [r2, #8]
 800c56e:	da08      	bge.n	800c582 <__sfputc_r+0x1e>
 800c570:	6994      	ldr	r4, [r2, #24]
 800c572:	42a3      	cmp	r3, r4
 800c574:	db01      	blt.n	800c57a <__sfputc_r+0x16>
 800c576:	290a      	cmp	r1, #10
 800c578:	d103      	bne.n	800c582 <__sfputc_r+0x1e>
 800c57a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c57e:	f000 b9e3 	b.w	800c948 <__swbuf_r>
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	1c58      	adds	r0, r3, #1
 800c586:	6010      	str	r0, [r2, #0]
 800c588:	7019      	strb	r1, [r3, #0]
 800c58a:	4608      	mov	r0, r1
 800c58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <__sfputs_r>:
 800c592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	4614      	mov	r4, r2
 800c59a:	18d5      	adds	r5, r2, r3
 800c59c:	42ac      	cmp	r4, r5
 800c59e:	d101      	bne.n	800c5a4 <__sfputs_r+0x12>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e007      	b.n	800c5b4 <__sfputs_r+0x22>
 800c5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a8:	463a      	mov	r2, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7ff ffda 	bl	800c564 <__sfputc_r>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d1f3      	bne.n	800c59c <__sfputs_r+0xa>
 800c5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5b8 <_vfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	b09d      	sub	sp, #116	; 0x74
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	4698      	mov	r8, r3
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	b118      	cbz	r0, 800c5d0 <_vfiprintf_r+0x18>
 800c5c8:	6a03      	ldr	r3, [r0, #32]
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <_vfiprintf_r+0x18>
 800c5cc:	f7fd fa6c 	bl	8009aa8 <__sinit>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5de:	f7fd fb8c 	bl	8009cfa <__retarget_lock_acquire_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	071b      	lsls	r3, r3, #28
 800c5e6:	d501      	bpl.n	800c5ec <_vfiprintf_r+0x34>
 800c5e8:	692b      	ldr	r3, [r5, #16]
 800c5ea:	b99b      	cbnz	r3, 800c614 <_vfiprintf_r+0x5c>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 f9e8 	bl	800c9c4 <__swsetup_r>
 800c5f4:	b170      	cbz	r0, 800c614 <_vfiprintf_r+0x5c>
 800c5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f8:	07dc      	lsls	r4, r3, #31
 800c5fa:	d504      	bpl.n	800c606 <_vfiprintf_r+0x4e>
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	b01d      	add	sp, #116	; 0x74
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	0598      	lsls	r0, r3, #22
 800c60a:	d4f7      	bmi.n	800c5fc <_vfiprintf_r+0x44>
 800c60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60e:	f7fd fb75 	bl	8009cfc <__retarget_lock_release_recursive>
 800c612:	e7f3      	b.n	800c5fc <_vfiprintf_r+0x44>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	2320      	movs	r3, #32
 800c61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c622:	2330      	movs	r3, #48	; 0x30
 800c624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7d8 <_vfiprintf_r+0x220>
 800c628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c62c:	f04f 0901 	mov.w	r9, #1
 800c630:	4623      	mov	r3, r4
 800c632:	469a      	mov	sl, r3
 800c634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c638:	b10a      	cbz	r2, 800c63e <_vfiprintf_r+0x86>
 800c63a:	2a25      	cmp	r2, #37	; 0x25
 800c63c:	d1f9      	bne.n	800c632 <_vfiprintf_r+0x7a>
 800c63e:	ebba 0b04 	subs.w	fp, sl, r4
 800c642:	d00b      	beq.n	800c65c <_vfiprintf_r+0xa4>
 800c644:	465b      	mov	r3, fp
 800c646:	4622      	mov	r2, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ffa1 	bl	800c592 <__sfputs_r>
 800c650:	3001      	adds	r0, #1
 800c652:	f000 80a9 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c658:	445a      	add	r2, fp
 800c65a:	9209      	str	r2, [sp, #36]	; 0x24
 800c65c:	f89a 3000 	ldrb.w	r3, [sl]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 80a1 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c666:	2300      	movs	r3, #0
 800c668:	f04f 32ff 	mov.w	r2, #4294967295
 800c66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c670:	f10a 0a01 	add.w	sl, sl, #1
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c67c:	931a      	str	r3, [sp, #104]	; 0x68
 800c67e:	4654      	mov	r4, sl
 800c680:	2205      	movs	r2, #5
 800c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c686:	4854      	ldr	r0, [pc, #336]	; (800c7d8 <_vfiprintf_r+0x220>)
 800c688:	f7f3 fda2 	bl	80001d0 <memchr>
 800c68c:	9a04      	ldr	r2, [sp, #16]
 800c68e:	b9d8      	cbnz	r0, 800c6c8 <_vfiprintf_r+0x110>
 800c690:	06d1      	lsls	r1, r2, #27
 800c692:	bf44      	itt	mi
 800c694:	2320      	movmi	r3, #32
 800c696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69a:	0713      	lsls	r3, r2, #28
 800c69c:	bf44      	itt	mi
 800c69e:	232b      	movmi	r3, #43	; 0x2b
 800c6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6aa:	d015      	beq.n	800c6d8 <_vfiprintf_r+0x120>
 800c6ac:	9a07      	ldr	r2, [sp, #28]
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f04f 0c0a 	mov.w	ip, #10
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6bc:	3b30      	subs	r3, #48	; 0x30
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	d94d      	bls.n	800c75e <_vfiprintf_r+0x1a6>
 800c6c2:	b1b0      	cbz	r0, 800c6f2 <_vfiprintf_r+0x13a>
 800c6c4:	9207      	str	r2, [sp, #28]
 800c6c6:	e014      	b.n	800c6f2 <_vfiprintf_r+0x13a>
 800c6c8:	eba0 0308 	sub.w	r3, r0, r8
 800c6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	46a2      	mov	sl, r4
 800c6d6:	e7d2      	b.n	800c67e <_vfiprintf_r+0xc6>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d19      	adds	r1, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9103      	str	r1, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfbb      	ittet	lt
 800c6e4:	425b      	neglt	r3, r3
 800c6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ea:	9307      	strge	r3, [sp, #28]
 800c6ec:	9307      	strlt	r3, [sp, #28]
 800c6ee:	bfb8      	it	lt
 800c6f0:	9204      	strlt	r2, [sp, #16]
 800c6f2:	7823      	ldrb	r3, [r4, #0]
 800c6f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6f6:	d10c      	bne.n	800c712 <_vfiprintf_r+0x15a>
 800c6f8:	7863      	ldrb	r3, [r4, #1]
 800c6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fc:	d134      	bne.n	800c768 <_vfiprintf_r+0x1b0>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	1d1a      	adds	r2, r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	9203      	str	r2, [sp, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfb8      	it	lt
 800c70a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c70e:	3402      	adds	r4, #2
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7e8 <_vfiprintf_r+0x230>
 800c716:	7821      	ldrb	r1, [r4, #0]
 800c718:	2203      	movs	r2, #3
 800c71a:	4650      	mov	r0, sl
 800c71c:	f7f3 fd58 	bl	80001d0 <memchr>
 800c720:	b138      	cbz	r0, 800c732 <_vfiprintf_r+0x17a>
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	eba0 000a 	sub.w	r0, r0, sl
 800c728:	2240      	movs	r2, #64	; 0x40
 800c72a:	4082      	lsls	r2, r0
 800c72c:	4313      	orrs	r3, r2
 800c72e:	3401      	adds	r4, #1
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c736:	4829      	ldr	r0, [pc, #164]	; (800c7dc <_vfiprintf_r+0x224>)
 800c738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c73c:	2206      	movs	r2, #6
 800c73e:	f7f3 fd47 	bl	80001d0 <memchr>
 800c742:	2800      	cmp	r0, #0
 800c744:	d03f      	beq.n	800c7c6 <_vfiprintf_r+0x20e>
 800c746:	4b26      	ldr	r3, [pc, #152]	; (800c7e0 <_vfiprintf_r+0x228>)
 800c748:	bb1b      	cbnz	r3, 800c792 <_vfiprintf_r+0x1da>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	3307      	adds	r3, #7
 800c74e:	f023 0307 	bic.w	r3, r3, #7
 800c752:	3308      	adds	r3, #8
 800c754:	9303      	str	r3, [sp, #12]
 800c756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c758:	443b      	add	r3, r7
 800c75a:	9309      	str	r3, [sp, #36]	; 0x24
 800c75c:	e768      	b.n	800c630 <_vfiprintf_r+0x78>
 800c75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c762:	460c      	mov	r4, r1
 800c764:	2001      	movs	r0, #1
 800c766:	e7a6      	b.n	800c6b6 <_vfiprintf_r+0xfe>
 800c768:	2300      	movs	r3, #0
 800c76a:	3401      	adds	r4, #1
 800c76c:	9305      	str	r3, [sp, #20]
 800c76e:	4619      	mov	r1, r3
 800c770:	f04f 0c0a 	mov.w	ip, #10
 800c774:	4620      	mov	r0, r4
 800c776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c77a:	3a30      	subs	r2, #48	; 0x30
 800c77c:	2a09      	cmp	r2, #9
 800c77e:	d903      	bls.n	800c788 <_vfiprintf_r+0x1d0>
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0c6      	beq.n	800c712 <_vfiprintf_r+0x15a>
 800c784:	9105      	str	r1, [sp, #20]
 800c786:	e7c4      	b.n	800c712 <_vfiprintf_r+0x15a>
 800c788:	fb0c 2101 	mla	r1, ip, r1, r2
 800c78c:	4604      	mov	r4, r0
 800c78e:	2301      	movs	r3, #1
 800c790:	e7f0      	b.n	800c774 <_vfiprintf_r+0x1bc>
 800c792:	ab03      	add	r3, sp, #12
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	462a      	mov	r2, r5
 800c798:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <_vfiprintf_r+0x22c>)
 800c79a:	a904      	add	r1, sp, #16
 800c79c:	4630      	mov	r0, r6
 800c79e:	f7fc fb21 	bl	8008de4 <_printf_float>
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	1c78      	adds	r0, r7, #1
 800c7a6:	d1d6      	bne.n	800c756 <_vfiprintf_r+0x19e>
 800c7a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7aa:	07d9      	lsls	r1, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b6:	f7fd faa1 	bl	8009cfc <__retarget_lock_release_recursive>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	065b      	lsls	r3, r3, #25
 800c7be:	f53f af1d 	bmi.w	800c5fc <_vfiprintf_r+0x44>
 800c7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7c4:	e71c      	b.n	800c600 <_vfiprintf_r+0x48>
 800c7c6:	ab03      	add	r3, sp, #12
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <_vfiprintf_r+0x22c>)
 800c7ce:	a904      	add	r1, sp, #16
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7fc fdab 	bl	800932c <_printf_i>
 800c7d6:	e7e4      	b.n	800c7a2 <_vfiprintf_r+0x1ea>
 800c7d8:	0800df79 	.word	0x0800df79
 800c7dc:	0800df83 	.word	0x0800df83
 800c7e0:	08008de5 	.word	0x08008de5
 800c7e4:	0800c593 	.word	0x0800c593
 800c7e8:	0800df7f 	.word	0x0800df7f

0800c7ec <__sflush_r>:
 800c7ec:	898a      	ldrh	r2, [r1, #12]
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	0710      	lsls	r0, r2, #28
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	d458      	bmi.n	800c8ac <__sflush_r+0xc0>
 800c7fa:	684b      	ldr	r3, [r1, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dc05      	bgt.n	800c80c <__sflush_r+0x20>
 800c800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	dc02      	bgt.n	800c80c <__sflush_r+0x20>
 800c806:	2000      	movs	r0, #0
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c80e:	2e00      	cmp	r6, #0
 800c810:	d0f9      	beq.n	800c806 <__sflush_r+0x1a>
 800c812:	2300      	movs	r3, #0
 800c814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c818:	682f      	ldr	r7, [r5, #0]
 800c81a:	6a21      	ldr	r1, [r4, #32]
 800c81c:	602b      	str	r3, [r5, #0]
 800c81e:	d032      	beq.n	800c886 <__sflush_r+0x9a>
 800c820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	075a      	lsls	r2, r3, #29
 800c826:	d505      	bpl.n	800c834 <__sflush_r+0x48>
 800c828:	6863      	ldr	r3, [r4, #4]
 800c82a:	1ac0      	subs	r0, r0, r3
 800c82c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c82e:	b10b      	cbz	r3, 800c834 <__sflush_r+0x48>
 800c830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c832:	1ac0      	subs	r0, r0, r3
 800c834:	2300      	movs	r3, #0
 800c836:	4602      	mov	r2, r0
 800c838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c83a:	6a21      	ldr	r1, [r4, #32]
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b0      	blx	r6
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	d106      	bne.n	800c854 <__sflush_r+0x68>
 800c846:	6829      	ldr	r1, [r5, #0]
 800c848:	291d      	cmp	r1, #29
 800c84a:	d82b      	bhi.n	800c8a4 <__sflush_r+0xb8>
 800c84c:	4a29      	ldr	r2, [pc, #164]	; (800c8f4 <__sflush_r+0x108>)
 800c84e:	410a      	asrs	r2, r1
 800c850:	07d6      	lsls	r6, r2, #31
 800c852:	d427      	bmi.n	800c8a4 <__sflush_r+0xb8>
 800c854:	2200      	movs	r2, #0
 800c856:	6062      	str	r2, [r4, #4]
 800c858:	04d9      	lsls	r1, r3, #19
 800c85a:	6922      	ldr	r2, [r4, #16]
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	d504      	bpl.n	800c86a <__sflush_r+0x7e>
 800c860:	1c42      	adds	r2, r0, #1
 800c862:	d101      	bne.n	800c868 <__sflush_r+0x7c>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b903      	cbnz	r3, 800c86a <__sflush_r+0x7e>
 800c868:	6560      	str	r0, [r4, #84]	; 0x54
 800c86a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c86c:	602f      	str	r7, [r5, #0]
 800c86e:	2900      	cmp	r1, #0
 800c870:	d0c9      	beq.n	800c806 <__sflush_r+0x1a>
 800c872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c876:	4299      	cmp	r1, r3
 800c878:	d002      	beq.n	800c880 <__sflush_r+0x94>
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7fe f8d6 	bl	800aa2c <_free_r>
 800c880:	2000      	movs	r0, #0
 800c882:	6360      	str	r0, [r4, #52]	; 0x34
 800c884:	e7c0      	b.n	800c808 <__sflush_r+0x1c>
 800c886:	2301      	movs	r3, #1
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	1c41      	adds	r1, r0, #1
 800c88e:	d1c8      	bne.n	800c822 <__sflush_r+0x36>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c5      	beq.n	800c822 <__sflush_r+0x36>
 800c896:	2b1d      	cmp	r3, #29
 800c898:	d001      	beq.n	800c89e <__sflush_r+0xb2>
 800c89a:	2b16      	cmp	r3, #22
 800c89c:	d101      	bne.n	800c8a2 <__sflush_r+0xb6>
 800c89e:	602f      	str	r7, [r5, #0]
 800c8a0:	e7b1      	b.n	800c806 <__sflush_r+0x1a>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	e7ad      	b.n	800c808 <__sflush_r+0x1c>
 800c8ac:	690f      	ldr	r7, [r1, #16]
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	d0a9      	beq.n	800c806 <__sflush_r+0x1a>
 800c8b2:	0793      	lsls	r3, r2, #30
 800c8b4:	680e      	ldr	r6, [r1, #0]
 800c8b6:	bf08      	it	eq
 800c8b8:	694b      	ldreq	r3, [r1, #20]
 800c8ba:	600f      	str	r7, [r1, #0]
 800c8bc:	bf18      	it	ne
 800c8be:	2300      	movne	r3, #0
 800c8c0:	eba6 0807 	sub.w	r8, r6, r7
 800c8c4:	608b      	str	r3, [r1, #8]
 800c8c6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ca:	dd9c      	ble.n	800c806 <__sflush_r+0x1a>
 800c8cc:	6a21      	ldr	r1, [r4, #32]
 800c8ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8d0:	4643      	mov	r3, r8
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b0      	blx	r6
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	dc06      	bgt.n	800c8ea <__sflush_r+0xfe>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e8:	e78e      	b.n	800c808 <__sflush_r+0x1c>
 800c8ea:	4407      	add	r7, r0
 800c8ec:	eba8 0800 	sub.w	r8, r8, r0
 800c8f0:	e7e9      	b.n	800c8c6 <__sflush_r+0xda>
 800c8f2:	bf00      	nop
 800c8f4:	dfbffffe 	.word	0xdfbffffe

0800c8f8 <_fflush_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	690b      	ldr	r3, [r1, #16]
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	b913      	cbnz	r3, 800c908 <_fflush_r+0x10>
 800c902:	2500      	movs	r5, #0
 800c904:	4628      	mov	r0, r5
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	b118      	cbz	r0, 800c912 <_fflush_r+0x1a>
 800c90a:	6a03      	ldr	r3, [r0, #32]
 800c90c:	b90b      	cbnz	r3, 800c912 <_fflush_r+0x1a>
 800c90e:	f7fd f8cb 	bl	8009aa8 <__sinit>
 800c912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0f3      	beq.n	800c902 <_fflush_r+0xa>
 800c91a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c91c:	07d0      	lsls	r0, r2, #31
 800c91e:	d404      	bmi.n	800c92a <_fflush_r+0x32>
 800c920:	0599      	lsls	r1, r3, #22
 800c922:	d402      	bmi.n	800c92a <_fflush_r+0x32>
 800c924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c926:	f7fd f9e8 	bl	8009cfa <__retarget_lock_acquire_recursive>
 800c92a:	4628      	mov	r0, r5
 800c92c:	4621      	mov	r1, r4
 800c92e:	f7ff ff5d 	bl	800c7ec <__sflush_r>
 800c932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c934:	07da      	lsls	r2, r3, #31
 800c936:	4605      	mov	r5, r0
 800c938:	d4e4      	bmi.n	800c904 <_fflush_r+0xc>
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	059b      	lsls	r3, r3, #22
 800c93e:	d4e1      	bmi.n	800c904 <_fflush_r+0xc>
 800c940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c942:	f7fd f9db 	bl	8009cfc <__retarget_lock_release_recursive>
 800c946:	e7dd      	b.n	800c904 <_fflush_r+0xc>

0800c948 <__swbuf_r>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	4605      	mov	r5, r0
 800c950:	b118      	cbz	r0, 800c95a <__swbuf_r+0x12>
 800c952:	6a03      	ldr	r3, [r0, #32]
 800c954:	b90b      	cbnz	r3, 800c95a <__swbuf_r+0x12>
 800c956:	f7fd f8a7 	bl	8009aa8 <__sinit>
 800c95a:	69a3      	ldr	r3, [r4, #24]
 800c95c:	60a3      	str	r3, [r4, #8]
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	071a      	lsls	r2, r3, #28
 800c962:	d525      	bpl.n	800c9b0 <__swbuf_r+0x68>
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	b31b      	cbz	r3, 800c9b0 <__swbuf_r+0x68>
 800c968:	6823      	ldr	r3, [r4, #0]
 800c96a:	6922      	ldr	r2, [r4, #16]
 800c96c:	1a98      	subs	r0, r3, r2
 800c96e:	6963      	ldr	r3, [r4, #20]
 800c970:	b2f6      	uxtb	r6, r6
 800c972:	4283      	cmp	r3, r0
 800c974:	4637      	mov	r7, r6
 800c976:	dc04      	bgt.n	800c982 <__swbuf_r+0x3a>
 800c978:	4621      	mov	r1, r4
 800c97a:	4628      	mov	r0, r5
 800c97c:	f7ff ffbc 	bl	800c8f8 <_fflush_r>
 800c980:	b9e0      	cbnz	r0, 800c9bc <__swbuf_r+0x74>
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	3b01      	subs	r3, #1
 800c986:	60a3      	str	r3, [r4, #8]
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	6022      	str	r2, [r4, #0]
 800c98e:	701e      	strb	r6, [r3, #0]
 800c990:	6962      	ldr	r2, [r4, #20]
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	429a      	cmp	r2, r3
 800c996:	d004      	beq.n	800c9a2 <__swbuf_r+0x5a>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	07db      	lsls	r3, r3, #31
 800c99c:	d506      	bpl.n	800c9ac <__swbuf_r+0x64>
 800c99e:	2e0a      	cmp	r6, #10
 800c9a0:	d104      	bne.n	800c9ac <__swbuf_r+0x64>
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f7ff ffa7 	bl	800c8f8 <_fflush_r>
 800c9aa:	b938      	cbnz	r0, 800c9bc <__swbuf_r+0x74>
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f806 	bl	800c9c4 <__swsetup_r>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d0d5      	beq.n	800c968 <__swbuf_r+0x20>
 800c9bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c0:	e7f4      	b.n	800c9ac <__swbuf_r+0x64>
	...

0800c9c4 <__swsetup_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4b2a      	ldr	r3, [pc, #168]	; (800ca70 <__swsetup_r+0xac>)
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	b118      	cbz	r0, 800c9d8 <__swsetup_r+0x14>
 800c9d0:	6a03      	ldr	r3, [r0, #32]
 800c9d2:	b90b      	cbnz	r3, 800c9d8 <__swsetup_r+0x14>
 800c9d4:	f7fd f868 	bl	8009aa8 <__sinit>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9de:	0718      	lsls	r0, r3, #28
 800c9e0:	d422      	bmi.n	800ca28 <__swsetup_r+0x64>
 800c9e2:	06d9      	lsls	r1, r3, #27
 800c9e4:	d407      	bmi.n	800c9f6 <__swsetup_r+0x32>
 800c9e6:	2309      	movs	r3, #9
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9ee:	81a3      	strh	r3, [r4, #12]
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f4:	e034      	b.n	800ca60 <__swsetup_r+0x9c>
 800c9f6:	0758      	lsls	r0, r3, #29
 800c9f8:	d512      	bpl.n	800ca20 <__swsetup_r+0x5c>
 800c9fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9fc:	b141      	cbz	r1, 800ca10 <__swsetup_r+0x4c>
 800c9fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca02:	4299      	cmp	r1, r3
 800ca04:	d002      	beq.n	800ca0c <__swsetup_r+0x48>
 800ca06:	4628      	mov	r0, r5
 800ca08:	f7fe f810 	bl	800aa2c <_free_r>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6363      	str	r3, [r4, #52]	; 0x34
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	6063      	str	r3, [r4, #4]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	6023      	str	r3, [r4, #0]
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	f043 0308 	orr.w	r3, r3, #8
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	b94b      	cbnz	r3, 800ca40 <__swsetup_r+0x7c>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca36:	d003      	beq.n	800ca40 <__swsetup_r+0x7c>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 fc85 	bl	800d34a <__smakebuf_r>
 800ca40:	89a0      	ldrh	r0, [r4, #12]
 800ca42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca46:	f010 0301 	ands.w	r3, r0, #1
 800ca4a:	d00a      	beq.n	800ca62 <__swsetup_r+0x9e>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	60a3      	str	r3, [r4, #8]
 800ca50:	6963      	ldr	r3, [r4, #20]
 800ca52:	425b      	negs	r3, r3
 800ca54:	61a3      	str	r3, [r4, #24]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	b943      	cbnz	r3, 800ca6c <__swsetup_r+0xa8>
 800ca5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca5e:	d1c4      	bne.n	800c9ea <__swsetup_r+0x26>
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	0781      	lsls	r1, r0, #30
 800ca64:	bf58      	it	pl
 800ca66:	6963      	ldrpl	r3, [r4, #20]
 800ca68:	60a3      	str	r3, [r4, #8]
 800ca6a:	e7f4      	b.n	800ca56 <__swsetup_r+0x92>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7f7      	b.n	800ca60 <__swsetup_r+0x9c>
 800ca70:	20000070 	.word	0x20000070

0800ca74 <memmove>:
 800ca74:	4288      	cmp	r0, r1
 800ca76:	b510      	push	{r4, lr}
 800ca78:	eb01 0402 	add.w	r4, r1, r2
 800ca7c:	d902      	bls.n	800ca84 <memmove+0x10>
 800ca7e:	4284      	cmp	r4, r0
 800ca80:	4623      	mov	r3, r4
 800ca82:	d807      	bhi.n	800ca94 <memmove+0x20>
 800ca84:	1e43      	subs	r3, r0, #1
 800ca86:	42a1      	cmp	r1, r4
 800ca88:	d008      	beq.n	800ca9c <memmove+0x28>
 800ca8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca92:	e7f8      	b.n	800ca86 <memmove+0x12>
 800ca94:	4402      	add	r2, r0
 800ca96:	4601      	mov	r1, r0
 800ca98:	428a      	cmp	r2, r1
 800ca9a:	d100      	bne.n	800ca9e <memmove+0x2a>
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caa6:	e7f7      	b.n	800ca98 <memmove+0x24>

0800caa8 <strncmp>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	b16a      	cbz	r2, 800cac8 <strncmp+0x20>
 800caac:	3901      	subs	r1, #1
 800caae:	1884      	adds	r4, r0, r2
 800cab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cab8:	429a      	cmp	r2, r3
 800caba:	d103      	bne.n	800cac4 <strncmp+0x1c>
 800cabc:	42a0      	cmp	r0, r4
 800cabe:	d001      	beq.n	800cac4 <strncmp+0x1c>
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	d1f5      	bne.n	800cab0 <strncmp+0x8>
 800cac4:	1ad0      	subs	r0, r2, r3
 800cac6:	bd10      	pop	{r4, pc}
 800cac8:	4610      	mov	r0, r2
 800caca:	e7fc      	b.n	800cac6 <strncmp+0x1e>

0800cacc <_raise_r>:
 800cacc:	291f      	cmp	r1, #31
 800cace:	b538      	push	{r3, r4, r5, lr}
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	d904      	bls.n	800cae0 <_raise_r+0x14>
 800cad6:	2316      	movs	r3, #22
 800cad8:	6003      	str	r3, [r0, #0]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cae2:	b112      	cbz	r2, 800caea <_raise_r+0x1e>
 800cae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae8:	b94b      	cbnz	r3, 800cafe <_raise_r+0x32>
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f830 	bl	800cb50 <_getpid_r>
 800caf0:	462a      	mov	r2, r5
 800caf2:	4601      	mov	r1, r0
 800caf4:	4620      	mov	r0, r4
 800caf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cafa:	f000 b817 	b.w	800cb2c <_kill_r>
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d00a      	beq.n	800cb18 <_raise_r+0x4c>
 800cb02:	1c59      	adds	r1, r3, #1
 800cb04:	d103      	bne.n	800cb0e <_raise_r+0x42>
 800cb06:	2316      	movs	r3, #22
 800cb08:	6003      	str	r3, [r0, #0]
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	e7e7      	b.n	800cade <_raise_r+0x12>
 800cb0e:	2400      	movs	r4, #0
 800cb10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb14:	4628      	mov	r0, r5
 800cb16:	4798      	blx	r3
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e7e0      	b.n	800cade <_raise_r+0x12>

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	; (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd3 	b.w	800cacc <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000070 	.word	0x20000070

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	; (800cb4c <_kill_r+0x20>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f6 fe9b 	bl	8003874 <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000c2c 	.word	0x20000c2c

0800cb50 <_getpid_r>:
 800cb50:	f7f6 be88 	b.w	8003864 <_getpid>

0800cb54 <_sbrk_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	; (800cb70 <_sbrk_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f6 ff10 	bl	8003984 <_sbrk>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_sbrk_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_sbrk_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20000c2c 	.word	0x20000c2c
 800cb74:	00000000 	.word	0x00000000

0800cb78 <nan>:
 800cb78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb80 <nan+0x8>
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	00000000 	.word	0x00000000
 800cb84:	7ff80000 	.word	0x7ff80000

0800cb88 <_calloc_r>:
 800cb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb8a:	fba1 2402 	umull	r2, r4, r1, r2
 800cb8e:	b94c      	cbnz	r4, 800cba4 <_calloc_r+0x1c>
 800cb90:	4611      	mov	r1, r2
 800cb92:	9201      	str	r2, [sp, #4]
 800cb94:	f7fd ffbe 	bl	800ab14 <_malloc_r>
 800cb98:	9a01      	ldr	r2, [sp, #4]
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b930      	cbnz	r0, 800cbac <_calloc_r+0x24>
 800cb9e:	4628      	mov	r0, r5
 800cba0:	b003      	add	sp, #12
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	220c      	movs	r2, #12
 800cba6:	6002      	str	r2, [r0, #0]
 800cba8:	2500      	movs	r5, #0
 800cbaa:	e7f8      	b.n	800cb9e <_calloc_r+0x16>
 800cbac:	4621      	mov	r1, r4
 800cbae:	f7fd f826 	bl	8009bfe <memset>
 800cbb2:	e7f4      	b.n	800cb9e <_calloc_r+0x16>

0800cbb4 <rshift>:
 800cbb4:	6903      	ldr	r3, [r0, #16]
 800cbb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cbba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cbc2:	f100 0414 	add.w	r4, r0, #20
 800cbc6:	dd45      	ble.n	800cc54 <rshift+0xa0>
 800cbc8:	f011 011f 	ands.w	r1, r1, #31
 800cbcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cbd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cbd4:	d10c      	bne.n	800cbf0 <rshift+0x3c>
 800cbd6:	f100 0710 	add.w	r7, r0, #16
 800cbda:	4629      	mov	r1, r5
 800cbdc:	42b1      	cmp	r1, r6
 800cbde:	d334      	bcc.n	800cc4a <rshift+0x96>
 800cbe0:	1a9b      	subs	r3, r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	1eea      	subs	r2, r5, #3
 800cbe6:	4296      	cmp	r6, r2
 800cbe8:	bf38      	it	cc
 800cbea:	2300      	movcc	r3, #0
 800cbec:	4423      	add	r3, r4
 800cbee:	e015      	b.n	800cc1c <rshift+0x68>
 800cbf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cbf4:	f1c1 0820 	rsb	r8, r1, #32
 800cbf8:	40cf      	lsrs	r7, r1
 800cbfa:	f105 0e04 	add.w	lr, r5, #4
 800cbfe:	46a1      	mov	r9, r4
 800cc00:	4576      	cmp	r6, lr
 800cc02:	46f4      	mov	ip, lr
 800cc04:	d815      	bhi.n	800cc32 <rshift+0x7e>
 800cc06:	1a9a      	subs	r2, r3, r2
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	3a04      	subs	r2, #4
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	42ae      	cmp	r6, r5
 800cc10:	bf38      	it	cc
 800cc12:	2200      	movcc	r2, #0
 800cc14:	18a3      	adds	r3, r4, r2
 800cc16:	50a7      	str	r7, [r4, r2]
 800cc18:	b107      	cbz	r7, 800cc1c <rshift+0x68>
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	1b1a      	subs	r2, r3, r4
 800cc1e:	42a3      	cmp	r3, r4
 800cc20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc24:	bf08      	it	eq
 800cc26:	2300      	moveq	r3, #0
 800cc28:	6102      	str	r2, [r0, #16]
 800cc2a:	bf08      	it	eq
 800cc2c:	6143      	streq	r3, [r0, #20]
 800cc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc32:	f8dc c000 	ldr.w	ip, [ip]
 800cc36:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc3a:	ea4c 0707 	orr.w	r7, ip, r7
 800cc3e:	f849 7b04 	str.w	r7, [r9], #4
 800cc42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc46:	40cf      	lsrs	r7, r1
 800cc48:	e7da      	b.n	800cc00 <rshift+0x4c>
 800cc4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc52:	e7c3      	b.n	800cbdc <rshift+0x28>
 800cc54:	4623      	mov	r3, r4
 800cc56:	e7e1      	b.n	800cc1c <rshift+0x68>

0800cc58 <__hexdig_fun>:
 800cc58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cc5c:	2b09      	cmp	r3, #9
 800cc5e:	d802      	bhi.n	800cc66 <__hexdig_fun+0xe>
 800cc60:	3820      	subs	r0, #32
 800cc62:	b2c0      	uxtb	r0, r0
 800cc64:	4770      	bx	lr
 800cc66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	d801      	bhi.n	800cc72 <__hexdig_fun+0x1a>
 800cc6e:	3847      	subs	r0, #71	; 0x47
 800cc70:	e7f7      	b.n	800cc62 <__hexdig_fun+0xa>
 800cc72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc76:	2b05      	cmp	r3, #5
 800cc78:	d801      	bhi.n	800cc7e <__hexdig_fun+0x26>
 800cc7a:	3827      	subs	r0, #39	; 0x27
 800cc7c:	e7f1      	b.n	800cc62 <__hexdig_fun+0xa>
 800cc7e:	2000      	movs	r0, #0
 800cc80:	4770      	bx	lr
	...

0800cc84 <__gethex>:
 800cc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	4617      	mov	r7, r2
 800cc8a:	680a      	ldr	r2, [r1, #0]
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	f102 0b02 	add.w	fp, r2, #2
 800cc92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc9a:	4681      	mov	r9, r0
 800cc9c:	468a      	mov	sl, r1
 800cc9e:	9302      	str	r3, [sp, #8]
 800cca0:	32fe      	adds	r2, #254	; 0xfe
 800cca2:	eb02 030b 	add.w	r3, r2, fp
 800cca6:	46d8      	mov	r8, fp
 800cca8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	2830      	cmp	r0, #48	; 0x30
 800ccb0:	d0f7      	beq.n	800cca2 <__gethex+0x1e>
 800ccb2:	f7ff ffd1 	bl	800cc58 <__hexdig_fun>
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d138      	bne.n	800cd2e <__gethex+0xaa>
 800ccbc:	49a7      	ldr	r1, [pc, #668]	; (800cf5c <__gethex+0x2d8>)
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	f7ff fef1 	bl	800caa8 <strncmp>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d169      	bne.n	800cda0 <__gethex+0x11c>
 800cccc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ccd0:	465d      	mov	r5, fp
 800ccd2:	f7ff ffc1 	bl	800cc58 <__hexdig_fun>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d064      	beq.n	800cda4 <__gethex+0x120>
 800ccda:	465a      	mov	r2, fp
 800ccdc:	7810      	ldrb	r0, [r2, #0]
 800ccde:	2830      	cmp	r0, #48	; 0x30
 800cce0:	4690      	mov	r8, r2
 800cce2:	f102 0201 	add.w	r2, r2, #1
 800cce6:	d0f9      	beq.n	800ccdc <__gethex+0x58>
 800cce8:	f7ff ffb6 	bl	800cc58 <__hexdig_fun>
 800ccec:	2301      	movs	r3, #1
 800ccee:	fab0 f480 	clz	r4, r0
 800ccf2:	0964      	lsrs	r4, r4, #5
 800ccf4:	465e      	mov	r6, fp
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	4642      	mov	r2, r8
 800ccfa:	4615      	mov	r5, r2
 800ccfc:	3201      	adds	r2, #1
 800ccfe:	7828      	ldrb	r0, [r5, #0]
 800cd00:	f7ff ffaa 	bl	800cc58 <__hexdig_fun>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1f8      	bne.n	800ccfa <__gethex+0x76>
 800cd08:	4994      	ldr	r1, [pc, #592]	; (800cf5c <__gethex+0x2d8>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	f7ff fecb 	bl	800caa8 <strncmp>
 800cd12:	b978      	cbnz	r0, 800cd34 <__gethex+0xb0>
 800cd14:	b946      	cbnz	r6, 800cd28 <__gethex+0xa4>
 800cd16:	1c6e      	adds	r6, r5, #1
 800cd18:	4632      	mov	r2, r6
 800cd1a:	4615      	mov	r5, r2
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	7828      	ldrb	r0, [r5, #0]
 800cd20:	f7ff ff9a 	bl	800cc58 <__hexdig_fun>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d1f8      	bne.n	800cd1a <__gethex+0x96>
 800cd28:	1b73      	subs	r3, r6, r5
 800cd2a:	009e      	lsls	r6, r3, #2
 800cd2c:	e004      	b.n	800cd38 <__gethex+0xb4>
 800cd2e:	2400      	movs	r4, #0
 800cd30:	4626      	mov	r6, r4
 800cd32:	e7e1      	b.n	800ccf8 <__gethex+0x74>
 800cd34:	2e00      	cmp	r6, #0
 800cd36:	d1f7      	bne.n	800cd28 <__gethex+0xa4>
 800cd38:	782b      	ldrb	r3, [r5, #0]
 800cd3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd3e:	2b50      	cmp	r3, #80	; 0x50
 800cd40:	d13d      	bne.n	800cdbe <__gethex+0x13a>
 800cd42:	786b      	ldrb	r3, [r5, #1]
 800cd44:	2b2b      	cmp	r3, #43	; 0x2b
 800cd46:	d02f      	beq.n	800cda8 <__gethex+0x124>
 800cd48:	2b2d      	cmp	r3, #45	; 0x2d
 800cd4a:	d031      	beq.n	800cdb0 <__gethex+0x12c>
 800cd4c:	1c69      	adds	r1, r5, #1
 800cd4e:	f04f 0b00 	mov.w	fp, #0
 800cd52:	7808      	ldrb	r0, [r1, #0]
 800cd54:	f7ff ff80 	bl	800cc58 <__hexdig_fun>
 800cd58:	1e42      	subs	r2, r0, #1
 800cd5a:	b2d2      	uxtb	r2, r2
 800cd5c:	2a18      	cmp	r2, #24
 800cd5e:	d82e      	bhi.n	800cdbe <__gethex+0x13a>
 800cd60:	f1a0 0210 	sub.w	r2, r0, #16
 800cd64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd68:	f7ff ff76 	bl	800cc58 <__hexdig_fun>
 800cd6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cd70:	fa5f fc8c 	uxtb.w	ip, ip
 800cd74:	f1bc 0f18 	cmp.w	ip, #24
 800cd78:	d91d      	bls.n	800cdb6 <__gethex+0x132>
 800cd7a:	f1bb 0f00 	cmp.w	fp, #0
 800cd7e:	d000      	beq.n	800cd82 <__gethex+0xfe>
 800cd80:	4252      	negs	r2, r2
 800cd82:	4416      	add	r6, r2
 800cd84:	f8ca 1000 	str.w	r1, [sl]
 800cd88:	b1dc      	cbz	r4, 800cdc2 <__gethex+0x13e>
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	bf14      	ite	ne
 800cd90:	f04f 0800 	movne.w	r8, #0
 800cd94:	f04f 0806 	moveq.w	r8, #6
 800cd98:	4640      	mov	r0, r8
 800cd9a:	b005      	add	sp, #20
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	4645      	mov	r5, r8
 800cda2:	4626      	mov	r6, r4
 800cda4:	2401      	movs	r4, #1
 800cda6:	e7c7      	b.n	800cd38 <__gethex+0xb4>
 800cda8:	f04f 0b00 	mov.w	fp, #0
 800cdac:	1ca9      	adds	r1, r5, #2
 800cdae:	e7d0      	b.n	800cd52 <__gethex+0xce>
 800cdb0:	f04f 0b01 	mov.w	fp, #1
 800cdb4:	e7fa      	b.n	800cdac <__gethex+0x128>
 800cdb6:	230a      	movs	r3, #10
 800cdb8:	fb03 0002 	mla	r0, r3, r2, r0
 800cdbc:	e7d0      	b.n	800cd60 <__gethex+0xdc>
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	e7e0      	b.n	800cd84 <__gethex+0x100>
 800cdc2:	eba5 0308 	sub.w	r3, r5, r8
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	4621      	mov	r1, r4
 800cdca:	2b07      	cmp	r3, #7
 800cdcc:	dc0a      	bgt.n	800cde4 <__gethex+0x160>
 800cdce:	4648      	mov	r0, r9
 800cdd0:	f7fd ff2c 	bl	800ac2c <_Balloc>
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	b940      	cbnz	r0, 800cdea <__gethex+0x166>
 800cdd8:	4b61      	ldr	r3, [pc, #388]	; (800cf60 <__gethex+0x2dc>)
 800cdda:	4602      	mov	r2, r0
 800cddc:	21e4      	movs	r1, #228	; 0xe4
 800cdde:	4861      	ldr	r0, [pc, #388]	; (800cf64 <__gethex+0x2e0>)
 800cde0:	f7fb ff42 	bl	8008c68 <__assert_func>
 800cde4:	3101      	adds	r1, #1
 800cde6:	105b      	asrs	r3, r3, #1
 800cde8:	e7ef      	b.n	800cdca <__gethex+0x146>
 800cdea:	f100 0a14 	add.w	sl, r0, #20
 800cdee:	2300      	movs	r3, #0
 800cdf0:	495a      	ldr	r1, [pc, #360]	; (800cf5c <__gethex+0x2d8>)
 800cdf2:	f8cd a004 	str.w	sl, [sp, #4]
 800cdf6:	469b      	mov	fp, r3
 800cdf8:	45a8      	cmp	r8, r5
 800cdfa:	d342      	bcc.n	800ce82 <__gethex+0x1fe>
 800cdfc:	9801      	ldr	r0, [sp, #4]
 800cdfe:	f840 bb04 	str.w	fp, [r0], #4
 800ce02:	eba0 000a 	sub.w	r0, r0, sl
 800ce06:	1080      	asrs	r0, r0, #2
 800ce08:	6120      	str	r0, [r4, #16]
 800ce0a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ce0e:	4658      	mov	r0, fp
 800ce10:	f7fd fffe 	bl	800ae10 <__hi0bits>
 800ce14:	683d      	ldr	r5, [r7, #0]
 800ce16:	eba8 0000 	sub.w	r0, r8, r0
 800ce1a:	42a8      	cmp	r0, r5
 800ce1c:	dd59      	ble.n	800ced2 <__gethex+0x24e>
 800ce1e:	eba0 0805 	sub.w	r8, r0, r5
 800ce22:	4641      	mov	r1, r8
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7fe fb8d 	bl	800b544 <__any_on>
 800ce2a:	4683      	mov	fp, r0
 800ce2c:	b1b8      	cbz	r0, 800ce5e <__gethex+0x1da>
 800ce2e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce32:	1159      	asrs	r1, r3, #5
 800ce34:	f003 021f 	and.w	r2, r3, #31
 800ce38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ce3c:	f04f 0b01 	mov.w	fp, #1
 800ce40:	fa0b f202 	lsl.w	r2, fp, r2
 800ce44:	420a      	tst	r2, r1
 800ce46:	d00a      	beq.n	800ce5e <__gethex+0x1da>
 800ce48:	455b      	cmp	r3, fp
 800ce4a:	dd06      	ble.n	800ce5a <__gethex+0x1d6>
 800ce4c:	f1a8 0102 	sub.w	r1, r8, #2
 800ce50:	4620      	mov	r0, r4
 800ce52:	f7fe fb77 	bl	800b544 <__any_on>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d138      	bne.n	800cecc <__gethex+0x248>
 800ce5a:	f04f 0b02 	mov.w	fp, #2
 800ce5e:	4641      	mov	r1, r8
 800ce60:	4620      	mov	r0, r4
 800ce62:	f7ff fea7 	bl	800cbb4 <rshift>
 800ce66:	4446      	add	r6, r8
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	42b3      	cmp	r3, r6
 800ce6c:	da41      	bge.n	800cef2 <__gethex+0x26e>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4648      	mov	r0, r9
 800ce72:	f7fd ff1b 	bl	800acac <_Bfree>
 800ce76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce78:	2300      	movs	r3, #0
 800ce7a:	6013      	str	r3, [r2, #0]
 800ce7c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ce80:	e78a      	b.n	800cd98 <__gethex+0x114>
 800ce82:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ce86:	2a2e      	cmp	r2, #46	; 0x2e
 800ce88:	d014      	beq.n	800ceb4 <__gethex+0x230>
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d106      	bne.n	800ce9c <__gethex+0x218>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	f843 bb04 	str.w	fp, [r3], #4
 800ce94:	f04f 0b00 	mov.w	fp, #0
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	465b      	mov	r3, fp
 800ce9c:	7828      	ldrb	r0, [r5, #0]
 800ce9e:	9303      	str	r3, [sp, #12]
 800cea0:	f7ff feda 	bl	800cc58 <__hexdig_fun>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	f000 000f 	and.w	r0, r0, #15
 800ceaa:	4098      	lsls	r0, r3
 800ceac:	ea4b 0b00 	orr.w	fp, fp, r0
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	e7a1      	b.n	800cdf8 <__gethex+0x174>
 800ceb4:	45a8      	cmp	r8, r5
 800ceb6:	d8e8      	bhi.n	800ce8a <__gethex+0x206>
 800ceb8:	2201      	movs	r2, #1
 800ceba:	4628      	mov	r0, r5
 800cebc:	9303      	str	r3, [sp, #12]
 800cebe:	f7ff fdf3 	bl	800caa8 <strncmp>
 800cec2:	4926      	ldr	r1, [pc, #152]	; (800cf5c <__gethex+0x2d8>)
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1df      	bne.n	800ce8a <__gethex+0x206>
 800ceca:	e795      	b.n	800cdf8 <__gethex+0x174>
 800cecc:	f04f 0b03 	mov.w	fp, #3
 800ced0:	e7c5      	b.n	800ce5e <__gethex+0x1da>
 800ced2:	da0b      	bge.n	800ceec <__gethex+0x268>
 800ced4:	eba5 0800 	sub.w	r8, r5, r0
 800ced8:	4621      	mov	r1, r4
 800ceda:	4642      	mov	r2, r8
 800cedc:	4648      	mov	r0, r9
 800cede:	f7fe f8ff 	bl	800b0e0 <__lshift>
 800cee2:	eba6 0608 	sub.w	r6, r6, r8
 800cee6:	4604      	mov	r4, r0
 800cee8:	f100 0a14 	add.w	sl, r0, #20
 800ceec:	f04f 0b00 	mov.w	fp, #0
 800cef0:	e7ba      	b.n	800ce68 <__gethex+0x1e4>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	42b3      	cmp	r3, r6
 800cef6:	dd73      	ble.n	800cfe0 <__gethex+0x35c>
 800cef8:	1b9e      	subs	r6, r3, r6
 800cefa:	42b5      	cmp	r5, r6
 800cefc:	dc34      	bgt.n	800cf68 <__gethex+0x2e4>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d023      	beq.n	800cf4c <__gethex+0x2c8>
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d025      	beq.n	800cf54 <__gethex+0x2d0>
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d115      	bne.n	800cf38 <__gethex+0x2b4>
 800cf0c:	42b5      	cmp	r5, r6
 800cf0e:	d113      	bne.n	800cf38 <__gethex+0x2b4>
 800cf10:	2d01      	cmp	r5, #1
 800cf12:	d10b      	bne.n	800cf2c <__gethex+0x2a8>
 800cf14:	9a02      	ldr	r2, [sp, #8]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	f8ca 3000 	str.w	r3, [sl]
 800cf22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf24:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cf28:	601c      	str	r4, [r3, #0]
 800cf2a:	e735      	b.n	800cd98 <__gethex+0x114>
 800cf2c:	1e69      	subs	r1, r5, #1
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7fe fb08 	bl	800b544 <__any_on>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d1ed      	bne.n	800cf14 <__gethex+0x290>
 800cf38:	4621      	mov	r1, r4
 800cf3a:	4648      	mov	r0, r9
 800cf3c:	f7fd feb6 	bl	800acac <_Bfree>
 800cf40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf42:	2300      	movs	r3, #0
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cf4a:	e725      	b.n	800cd98 <__gethex+0x114>
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1f2      	bne.n	800cf38 <__gethex+0x2b4>
 800cf52:	e7df      	b.n	800cf14 <__gethex+0x290>
 800cf54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1dc      	bne.n	800cf14 <__gethex+0x290>
 800cf5a:	e7ed      	b.n	800cf38 <__gethex+0x2b4>
 800cf5c:	0800de24 	.word	0x0800de24
 800cf60:	0800dcbd 	.word	0x0800dcbd
 800cf64:	0800df92 	.word	0x0800df92
 800cf68:	f106 38ff 	add.w	r8, r6, #4294967295
 800cf6c:	f1bb 0f00 	cmp.w	fp, #0
 800cf70:	d133      	bne.n	800cfda <__gethex+0x356>
 800cf72:	f1b8 0f00 	cmp.w	r8, #0
 800cf76:	d004      	beq.n	800cf82 <__gethex+0x2fe>
 800cf78:	4641      	mov	r1, r8
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7fe fae2 	bl	800b544 <__any_on>
 800cf80:	4683      	mov	fp, r0
 800cf82:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cf86:	2301      	movs	r3, #1
 800cf88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cf8c:	f008 081f 	and.w	r8, r8, #31
 800cf90:	fa03 f308 	lsl.w	r3, r3, r8
 800cf94:	4213      	tst	r3, r2
 800cf96:	4631      	mov	r1, r6
 800cf98:	4620      	mov	r0, r4
 800cf9a:	bf18      	it	ne
 800cf9c:	f04b 0b02 	orrne.w	fp, fp, #2
 800cfa0:	1bad      	subs	r5, r5, r6
 800cfa2:	f7ff fe07 	bl	800cbb4 <rshift>
 800cfa6:	687e      	ldr	r6, [r7, #4]
 800cfa8:	f04f 0802 	mov.w	r8, #2
 800cfac:	f1bb 0f00 	cmp.w	fp, #0
 800cfb0:	d04a      	beq.n	800d048 <__gethex+0x3c4>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d016      	beq.n	800cfe6 <__gethex+0x362>
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d018      	beq.n	800cfee <__gethex+0x36a>
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d109      	bne.n	800cfd4 <__gethex+0x350>
 800cfc0:	f01b 0f02 	tst.w	fp, #2
 800cfc4:	d006      	beq.n	800cfd4 <__gethex+0x350>
 800cfc6:	f8da 3000 	ldr.w	r3, [sl]
 800cfca:	ea4b 0b03 	orr.w	fp, fp, r3
 800cfce:	f01b 0f01 	tst.w	fp, #1
 800cfd2:	d10f      	bne.n	800cff4 <__gethex+0x370>
 800cfd4:	f048 0810 	orr.w	r8, r8, #16
 800cfd8:	e036      	b.n	800d048 <__gethex+0x3c4>
 800cfda:	f04f 0b01 	mov.w	fp, #1
 800cfde:	e7d0      	b.n	800cf82 <__gethex+0x2fe>
 800cfe0:	f04f 0801 	mov.w	r8, #1
 800cfe4:	e7e2      	b.n	800cfac <__gethex+0x328>
 800cfe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfe8:	f1c3 0301 	rsb	r3, r3, #1
 800cfec:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d0ef      	beq.n	800cfd4 <__gethex+0x350>
 800cff4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cff8:	f104 0214 	add.w	r2, r4, #20
 800cffc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d006:	2300      	movs	r3, #0
 800d008:	4694      	mov	ip, r2
 800d00a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d00e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d012:	d01e      	beq.n	800d052 <__gethex+0x3ce>
 800d014:	3101      	adds	r1, #1
 800d016:	f8cc 1000 	str.w	r1, [ip]
 800d01a:	f1b8 0f02 	cmp.w	r8, #2
 800d01e:	f104 0214 	add.w	r2, r4, #20
 800d022:	d13d      	bne.n	800d0a0 <__gethex+0x41c>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	3b01      	subs	r3, #1
 800d028:	42ab      	cmp	r3, r5
 800d02a:	d10b      	bne.n	800d044 <__gethex+0x3c0>
 800d02c:	1169      	asrs	r1, r5, #5
 800d02e:	2301      	movs	r3, #1
 800d030:	f005 051f 	and.w	r5, r5, #31
 800d034:	fa03 f505 	lsl.w	r5, r3, r5
 800d038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d03c:	421d      	tst	r5, r3
 800d03e:	bf18      	it	ne
 800d040:	f04f 0801 	movne.w	r8, #1
 800d044:	f048 0820 	orr.w	r8, r8, #32
 800d048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d04a:	601c      	str	r4, [r3, #0]
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	601e      	str	r6, [r3, #0]
 800d050:	e6a2      	b.n	800cd98 <__gethex+0x114>
 800d052:	4290      	cmp	r0, r2
 800d054:	f842 3c04 	str.w	r3, [r2, #-4]
 800d058:	d8d6      	bhi.n	800d008 <__gethex+0x384>
 800d05a:	68a2      	ldr	r2, [r4, #8]
 800d05c:	4593      	cmp	fp, r2
 800d05e:	db17      	blt.n	800d090 <__gethex+0x40c>
 800d060:	6861      	ldr	r1, [r4, #4]
 800d062:	4648      	mov	r0, r9
 800d064:	3101      	adds	r1, #1
 800d066:	f7fd fde1 	bl	800ac2c <_Balloc>
 800d06a:	4682      	mov	sl, r0
 800d06c:	b918      	cbnz	r0, 800d076 <__gethex+0x3f2>
 800d06e:	4b1b      	ldr	r3, [pc, #108]	; (800d0dc <__gethex+0x458>)
 800d070:	4602      	mov	r2, r0
 800d072:	2184      	movs	r1, #132	; 0x84
 800d074:	e6b3      	b.n	800cdde <__gethex+0x15a>
 800d076:	6922      	ldr	r2, [r4, #16]
 800d078:	3202      	adds	r2, #2
 800d07a:	f104 010c 	add.w	r1, r4, #12
 800d07e:	0092      	lsls	r2, r2, #2
 800d080:	300c      	adds	r0, #12
 800d082:	f7fc fe3c 	bl	8009cfe <memcpy>
 800d086:	4621      	mov	r1, r4
 800d088:	4648      	mov	r0, r9
 800d08a:	f7fd fe0f 	bl	800acac <_Bfree>
 800d08e:	4654      	mov	r4, sl
 800d090:	6922      	ldr	r2, [r4, #16]
 800d092:	1c51      	adds	r1, r2, #1
 800d094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d098:	6121      	str	r1, [r4, #16]
 800d09a:	2101      	movs	r1, #1
 800d09c:	6151      	str	r1, [r2, #20]
 800d09e:	e7bc      	b.n	800d01a <__gethex+0x396>
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	4559      	cmp	r1, fp
 800d0a4:	dd0b      	ble.n	800d0be <__gethex+0x43a>
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f7ff fd83 	bl	800cbb4 <rshift>
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	42b3      	cmp	r3, r6
 800d0b4:	f6ff aedb 	blt.w	800ce6e <__gethex+0x1ea>
 800d0b8:	f04f 0801 	mov.w	r8, #1
 800d0bc:	e7c2      	b.n	800d044 <__gethex+0x3c0>
 800d0be:	f015 051f 	ands.w	r5, r5, #31
 800d0c2:	d0f9      	beq.n	800d0b8 <__gethex+0x434>
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	441a      	add	r2, r3
 800d0c8:	f1c5 0520 	rsb	r5, r5, #32
 800d0cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d0d0:	f7fd fe9e 	bl	800ae10 <__hi0bits>
 800d0d4:	42a8      	cmp	r0, r5
 800d0d6:	dbe6      	blt.n	800d0a6 <__gethex+0x422>
 800d0d8:	e7ee      	b.n	800d0b8 <__gethex+0x434>
 800d0da:	bf00      	nop
 800d0dc:	0800dcbd 	.word	0x0800dcbd

0800d0e0 <L_shift>:
 800d0e0:	f1c2 0208 	rsb	r2, r2, #8
 800d0e4:	0092      	lsls	r2, r2, #2
 800d0e6:	b570      	push	{r4, r5, r6, lr}
 800d0e8:	f1c2 0620 	rsb	r6, r2, #32
 800d0ec:	6843      	ldr	r3, [r0, #4]
 800d0ee:	6804      	ldr	r4, [r0, #0]
 800d0f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d0f4:	432c      	orrs	r4, r5
 800d0f6:	40d3      	lsrs	r3, r2
 800d0f8:	6004      	str	r4, [r0, #0]
 800d0fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d0fe:	4288      	cmp	r0, r1
 800d100:	d3f4      	bcc.n	800d0ec <L_shift+0xc>
 800d102:	bd70      	pop	{r4, r5, r6, pc}

0800d104 <__match>:
 800d104:	b530      	push	{r4, r5, lr}
 800d106:	6803      	ldr	r3, [r0, #0]
 800d108:	3301      	adds	r3, #1
 800d10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d10e:	b914      	cbnz	r4, 800d116 <__match+0x12>
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	2001      	movs	r0, #1
 800d114:	bd30      	pop	{r4, r5, pc}
 800d116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d11e:	2d19      	cmp	r5, #25
 800d120:	bf98      	it	ls
 800d122:	3220      	addls	r2, #32
 800d124:	42a2      	cmp	r2, r4
 800d126:	d0f0      	beq.n	800d10a <__match+0x6>
 800d128:	2000      	movs	r0, #0
 800d12a:	e7f3      	b.n	800d114 <__match+0x10>

0800d12c <__hexnan>:
 800d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	680b      	ldr	r3, [r1, #0]
 800d132:	6801      	ldr	r1, [r0, #0]
 800d134:	115e      	asrs	r6, r3, #5
 800d136:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d13a:	f013 031f 	ands.w	r3, r3, #31
 800d13e:	b087      	sub	sp, #28
 800d140:	bf18      	it	ne
 800d142:	3604      	addne	r6, #4
 800d144:	2500      	movs	r5, #0
 800d146:	1f37      	subs	r7, r6, #4
 800d148:	4682      	mov	sl, r0
 800d14a:	4690      	mov	r8, r2
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d152:	46b9      	mov	r9, r7
 800d154:	463c      	mov	r4, r7
 800d156:	9502      	str	r5, [sp, #8]
 800d158:	46ab      	mov	fp, r5
 800d15a:	784a      	ldrb	r2, [r1, #1]
 800d15c:	1c4b      	adds	r3, r1, #1
 800d15e:	9303      	str	r3, [sp, #12]
 800d160:	b342      	cbz	r2, 800d1b4 <__hexnan+0x88>
 800d162:	4610      	mov	r0, r2
 800d164:	9105      	str	r1, [sp, #20]
 800d166:	9204      	str	r2, [sp, #16]
 800d168:	f7ff fd76 	bl	800cc58 <__hexdig_fun>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d14f      	bne.n	800d210 <__hexnan+0xe4>
 800d170:	9a04      	ldr	r2, [sp, #16]
 800d172:	9905      	ldr	r1, [sp, #20]
 800d174:	2a20      	cmp	r2, #32
 800d176:	d818      	bhi.n	800d1aa <__hexnan+0x7e>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	459b      	cmp	fp, r3
 800d17c:	dd13      	ble.n	800d1a6 <__hexnan+0x7a>
 800d17e:	454c      	cmp	r4, r9
 800d180:	d206      	bcs.n	800d190 <__hexnan+0x64>
 800d182:	2d07      	cmp	r5, #7
 800d184:	dc04      	bgt.n	800d190 <__hexnan+0x64>
 800d186:	462a      	mov	r2, r5
 800d188:	4649      	mov	r1, r9
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7ff ffa8 	bl	800d0e0 <L_shift>
 800d190:	4544      	cmp	r4, r8
 800d192:	d950      	bls.n	800d236 <__hexnan+0x10a>
 800d194:	2300      	movs	r3, #0
 800d196:	f1a4 0904 	sub.w	r9, r4, #4
 800d19a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d19e:	f8cd b008 	str.w	fp, [sp, #8]
 800d1a2:	464c      	mov	r4, r9
 800d1a4:	461d      	mov	r5, r3
 800d1a6:	9903      	ldr	r1, [sp, #12]
 800d1a8:	e7d7      	b.n	800d15a <__hexnan+0x2e>
 800d1aa:	2a29      	cmp	r2, #41	; 0x29
 800d1ac:	d155      	bne.n	800d25a <__hexnan+0x12e>
 800d1ae:	3102      	adds	r1, #2
 800d1b0:	f8ca 1000 	str.w	r1, [sl]
 800d1b4:	f1bb 0f00 	cmp.w	fp, #0
 800d1b8:	d04f      	beq.n	800d25a <__hexnan+0x12e>
 800d1ba:	454c      	cmp	r4, r9
 800d1bc:	d206      	bcs.n	800d1cc <__hexnan+0xa0>
 800d1be:	2d07      	cmp	r5, #7
 800d1c0:	dc04      	bgt.n	800d1cc <__hexnan+0xa0>
 800d1c2:	462a      	mov	r2, r5
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f7ff ff8a 	bl	800d0e0 <L_shift>
 800d1cc:	4544      	cmp	r4, r8
 800d1ce:	d934      	bls.n	800d23a <__hexnan+0x10e>
 800d1d0:	f1a8 0204 	sub.w	r2, r8, #4
 800d1d4:	4623      	mov	r3, r4
 800d1d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d1da:	f842 1f04 	str.w	r1, [r2, #4]!
 800d1de:	429f      	cmp	r7, r3
 800d1e0:	d2f9      	bcs.n	800d1d6 <__hexnan+0xaa>
 800d1e2:	1b3b      	subs	r3, r7, r4
 800d1e4:	f023 0303 	bic.w	r3, r3, #3
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	3e03      	subs	r6, #3
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	42a6      	cmp	r6, r4
 800d1f0:	bf38      	it	cc
 800d1f2:	2304      	movcc	r3, #4
 800d1f4:	4443      	add	r3, r8
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f843 2b04 	str.w	r2, [r3], #4
 800d1fc:	429f      	cmp	r7, r3
 800d1fe:	d2fb      	bcs.n	800d1f8 <__hexnan+0xcc>
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	b91b      	cbnz	r3, 800d20c <__hexnan+0xe0>
 800d204:	4547      	cmp	r7, r8
 800d206:	d126      	bne.n	800d256 <__hexnan+0x12a>
 800d208:	2301      	movs	r3, #1
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	2005      	movs	r0, #5
 800d20e:	e025      	b.n	800d25c <__hexnan+0x130>
 800d210:	3501      	adds	r5, #1
 800d212:	2d08      	cmp	r5, #8
 800d214:	f10b 0b01 	add.w	fp, fp, #1
 800d218:	dd06      	ble.n	800d228 <__hexnan+0xfc>
 800d21a:	4544      	cmp	r4, r8
 800d21c:	d9c3      	bls.n	800d1a6 <__hexnan+0x7a>
 800d21e:	2300      	movs	r3, #0
 800d220:	f844 3c04 	str.w	r3, [r4, #-4]
 800d224:	2501      	movs	r5, #1
 800d226:	3c04      	subs	r4, #4
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	f000 000f 	and.w	r0, r0, #15
 800d22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d232:	6020      	str	r0, [r4, #0]
 800d234:	e7b7      	b.n	800d1a6 <__hexnan+0x7a>
 800d236:	2508      	movs	r5, #8
 800d238:	e7b5      	b.n	800d1a6 <__hexnan+0x7a>
 800d23a:	9b01      	ldr	r3, [sp, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0df      	beq.n	800d200 <__hexnan+0xd4>
 800d240:	f1c3 0320 	rsb	r3, r3, #32
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	40da      	lsrs	r2, r3
 800d24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d24e:	4013      	ands	r3, r2
 800d250:	f846 3c04 	str.w	r3, [r6, #-4]
 800d254:	e7d4      	b.n	800d200 <__hexnan+0xd4>
 800d256:	3f04      	subs	r7, #4
 800d258:	e7d2      	b.n	800d200 <__hexnan+0xd4>
 800d25a:	2004      	movs	r0, #4
 800d25c:	b007      	add	sp, #28
 800d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d262 <__ascii_mbtowc>:
 800d262:	b082      	sub	sp, #8
 800d264:	b901      	cbnz	r1, 800d268 <__ascii_mbtowc+0x6>
 800d266:	a901      	add	r1, sp, #4
 800d268:	b142      	cbz	r2, 800d27c <__ascii_mbtowc+0x1a>
 800d26a:	b14b      	cbz	r3, 800d280 <__ascii_mbtowc+0x1e>
 800d26c:	7813      	ldrb	r3, [r2, #0]
 800d26e:	600b      	str	r3, [r1, #0]
 800d270:	7812      	ldrb	r2, [r2, #0]
 800d272:	1e10      	subs	r0, r2, #0
 800d274:	bf18      	it	ne
 800d276:	2001      	movne	r0, #1
 800d278:	b002      	add	sp, #8
 800d27a:	4770      	bx	lr
 800d27c:	4610      	mov	r0, r2
 800d27e:	e7fb      	b.n	800d278 <__ascii_mbtowc+0x16>
 800d280:	f06f 0001 	mvn.w	r0, #1
 800d284:	e7f8      	b.n	800d278 <__ascii_mbtowc+0x16>

0800d286 <_realloc_r>:
 800d286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28a:	4680      	mov	r8, r0
 800d28c:	4614      	mov	r4, r2
 800d28e:	460e      	mov	r6, r1
 800d290:	b921      	cbnz	r1, 800d29c <_realloc_r+0x16>
 800d292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	4611      	mov	r1, r2
 800d298:	f7fd bc3c 	b.w	800ab14 <_malloc_r>
 800d29c:	b92a      	cbnz	r2, 800d2aa <_realloc_r+0x24>
 800d29e:	f7fd fbc5 	bl	800aa2c <_free_r>
 800d2a2:	4625      	mov	r5, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	f000 f8ad 	bl	800d408 <_malloc_usable_size_r>
 800d2ae:	4284      	cmp	r4, r0
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	d802      	bhi.n	800d2ba <_realloc_r+0x34>
 800d2b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2b8:	d812      	bhi.n	800d2e0 <_realloc_r+0x5a>
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	4640      	mov	r0, r8
 800d2be:	f7fd fc29 	bl	800ab14 <_malloc_r>
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d0ed      	beq.n	800d2a4 <_realloc_r+0x1e>
 800d2c8:	42bc      	cmp	r4, r7
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	bf28      	it	cs
 800d2d0:	463a      	movcs	r2, r7
 800d2d2:	f7fc fd14 	bl	8009cfe <memcpy>
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	4640      	mov	r0, r8
 800d2da:	f7fd fba7 	bl	800aa2c <_free_r>
 800d2de:	e7e1      	b.n	800d2a4 <_realloc_r+0x1e>
 800d2e0:	4635      	mov	r5, r6
 800d2e2:	e7df      	b.n	800d2a4 <_realloc_r+0x1e>

0800d2e4 <__ascii_wctomb>:
 800d2e4:	b149      	cbz	r1, 800d2fa <__ascii_wctomb+0x16>
 800d2e6:	2aff      	cmp	r2, #255	; 0xff
 800d2e8:	bf85      	ittet	hi
 800d2ea:	238a      	movhi	r3, #138	; 0x8a
 800d2ec:	6003      	strhi	r3, [r0, #0]
 800d2ee:	700a      	strbls	r2, [r1, #0]
 800d2f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2f4:	bf98      	it	ls
 800d2f6:	2001      	movls	r0, #1
 800d2f8:	4770      	bx	lr
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4770      	bx	lr

0800d2fe <__swhatbuf_r>:
 800d2fe:	b570      	push	{r4, r5, r6, lr}
 800d300:	460c      	mov	r4, r1
 800d302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d306:	2900      	cmp	r1, #0
 800d308:	b096      	sub	sp, #88	; 0x58
 800d30a:	4615      	mov	r5, r2
 800d30c:	461e      	mov	r6, r3
 800d30e:	da0d      	bge.n	800d32c <__swhatbuf_r+0x2e>
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d316:	f04f 0100 	mov.w	r1, #0
 800d31a:	bf0c      	ite	eq
 800d31c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d320:	2340      	movne	r3, #64	; 0x40
 800d322:	2000      	movs	r0, #0
 800d324:	6031      	str	r1, [r6, #0]
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	b016      	add	sp, #88	; 0x58
 800d32a:	bd70      	pop	{r4, r5, r6, pc}
 800d32c:	466a      	mov	r2, sp
 800d32e:	f000 f849 	bl	800d3c4 <_fstat_r>
 800d332:	2800      	cmp	r0, #0
 800d334:	dbec      	blt.n	800d310 <__swhatbuf_r+0x12>
 800d336:	9901      	ldr	r1, [sp, #4]
 800d338:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d33c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d340:	4259      	negs	r1, r3
 800d342:	4159      	adcs	r1, r3
 800d344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d348:	e7eb      	b.n	800d322 <__swhatbuf_r+0x24>

0800d34a <__smakebuf_r>:
 800d34a:	898b      	ldrh	r3, [r1, #12]
 800d34c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d34e:	079d      	lsls	r5, r3, #30
 800d350:	4606      	mov	r6, r0
 800d352:	460c      	mov	r4, r1
 800d354:	d507      	bpl.n	800d366 <__smakebuf_r+0x1c>
 800d356:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d35a:	6023      	str	r3, [r4, #0]
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	2301      	movs	r3, #1
 800d360:	6163      	str	r3, [r4, #20]
 800d362:	b002      	add	sp, #8
 800d364:	bd70      	pop	{r4, r5, r6, pc}
 800d366:	ab01      	add	r3, sp, #4
 800d368:	466a      	mov	r2, sp
 800d36a:	f7ff ffc8 	bl	800d2fe <__swhatbuf_r>
 800d36e:	9900      	ldr	r1, [sp, #0]
 800d370:	4605      	mov	r5, r0
 800d372:	4630      	mov	r0, r6
 800d374:	f7fd fbce 	bl	800ab14 <_malloc_r>
 800d378:	b948      	cbnz	r0, 800d38e <__smakebuf_r+0x44>
 800d37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37e:	059a      	lsls	r2, r3, #22
 800d380:	d4ef      	bmi.n	800d362 <__smakebuf_r+0x18>
 800d382:	f023 0303 	bic.w	r3, r3, #3
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	e7e3      	b.n	800d356 <__smakebuf_r+0xc>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	6020      	str	r0, [r4, #0]
 800d392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d396:	81a3      	strh	r3, [r4, #12]
 800d398:	9b00      	ldr	r3, [sp, #0]
 800d39a:	6163      	str	r3, [r4, #20]
 800d39c:	9b01      	ldr	r3, [sp, #4]
 800d39e:	6120      	str	r0, [r4, #16]
 800d3a0:	b15b      	cbz	r3, 800d3ba <__smakebuf_r+0x70>
 800d3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f000 f81e 	bl	800d3e8 <_isatty_r>
 800d3ac:	b128      	cbz	r0, 800d3ba <__smakebuf_r+0x70>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f023 0303 	bic.w	r3, r3, #3
 800d3b4:	f043 0301 	orr.w	r3, r3, #1
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	431d      	orrs	r5, r3
 800d3be:	81a5      	strh	r5, [r4, #12]
 800d3c0:	e7cf      	b.n	800d362 <__smakebuf_r+0x18>
	...

0800d3c4 <_fstat_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d07      	ldr	r5, [pc, #28]	; (800d3e4 <_fstat_r+0x20>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	f7f6 faae 	bl	8003932 <_fstat>
 800d3d6:	1c43      	adds	r3, r0, #1
 800d3d8:	d102      	bne.n	800d3e0 <_fstat_r+0x1c>
 800d3da:	682b      	ldr	r3, [r5, #0]
 800d3dc:	b103      	cbz	r3, 800d3e0 <_fstat_r+0x1c>
 800d3de:	6023      	str	r3, [r4, #0]
 800d3e0:	bd38      	pop	{r3, r4, r5, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000c2c 	.word	0x20000c2c

0800d3e8 <_isatty_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d06      	ldr	r5, [pc, #24]	; (800d404 <_isatty_r+0x1c>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	602b      	str	r3, [r5, #0]
 800d3f4:	f7f6 faad 	bl	8003952 <_isatty>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_isatty_r+0x1a>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_isatty_r+0x1a>
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	20000c2c 	.word	0x20000c2c

0800d408 <_malloc_usable_size_r>:
 800d408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d40c:	1f18      	subs	r0, r3, #4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bfbc      	itt	lt
 800d412:	580b      	ldrlt	r3, [r1, r0]
 800d414:	18c0      	addlt	r0, r0, r3
 800d416:	4770      	bx	lr

0800d418 <round>:
 800d418:	ec53 2b10 	vmov	r2, r3, d0
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d422:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800d426:	2813      	cmp	r0, #19
 800d428:	ee10 5a10 	vmov	r5, s0
 800d42c:	4619      	mov	r1, r3
 800d42e:	dc18      	bgt.n	800d462 <round+0x4a>
 800d430:	2800      	cmp	r0, #0
 800d432:	da09      	bge.n	800d448 <round+0x30>
 800d434:	3001      	adds	r0, #1
 800d436:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800d43a:	d103      	bne.n	800d444 <round+0x2c>
 800d43c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d440:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d444:	2300      	movs	r3, #0
 800d446:	e02a      	b.n	800d49e <round+0x86>
 800d448:	4c16      	ldr	r4, [pc, #88]	; (800d4a4 <round+0x8c>)
 800d44a:	4104      	asrs	r4, r0
 800d44c:	ea03 0604 	and.w	r6, r3, r4
 800d450:	4316      	orrs	r6, r2
 800d452:	d011      	beq.n	800d478 <round+0x60>
 800d454:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d458:	4103      	asrs	r3, r0
 800d45a:	440b      	add	r3, r1
 800d45c:	ea23 0104 	bic.w	r1, r3, r4
 800d460:	e7f0      	b.n	800d444 <round+0x2c>
 800d462:	2833      	cmp	r0, #51	; 0x33
 800d464:	dd0b      	ble.n	800d47e <round+0x66>
 800d466:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d46a:	d105      	bne.n	800d478 <round+0x60>
 800d46c:	ee10 0a10 	vmov	r0, s0
 800d470:	f7f2 ff0c 	bl	800028c <__adddf3>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	ec43 2b10 	vmov	d0, r2, r3
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
 800d47e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800d482:	f04f 34ff 	mov.w	r4, #4294967295
 800d486:	40f4      	lsrs	r4, r6
 800d488:	4214      	tst	r4, r2
 800d48a:	d0f5      	beq.n	800d478 <round+0x60>
 800d48c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800d490:	2301      	movs	r3, #1
 800d492:	4083      	lsls	r3, r0
 800d494:	195b      	adds	r3, r3, r5
 800d496:	bf28      	it	cs
 800d498:	3101      	addcs	r1, #1
 800d49a:	ea23 0304 	bic.w	r3, r3, r4
 800d49e:	461a      	mov	r2, r3
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	e7e9      	b.n	800d478 <round+0x60>
 800d4a4:	000fffff 	.word	0x000fffff

0800d4a8 <roundf>:
 800d4a8:	ee10 0a10 	vmov	r0, s0
 800d4ac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d4b0:	3a7f      	subs	r2, #127	; 0x7f
 800d4b2:	2a16      	cmp	r2, #22
 800d4b4:	dc15      	bgt.n	800d4e2 <roundf+0x3a>
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	da08      	bge.n	800d4cc <roundf+0x24>
 800d4ba:	3201      	adds	r2, #1
 800d4bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d4c0:	d101      	bne.n	800d4c6 <roundf+0x1e>
 800d4c2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d4c6:	ee00 3a10 	vmov	s0, r3
 800d4ca:	4770      	bx	lr
 800d4cc:	4907      	ldr	r1, [pc, #28]	; (800d4ec <roundf+0x44>)
 800d4ce:	4111      	asrs	r1, r2
 800d4d0:	4208      	tst	r0, r1
 800d4d2:	d0fa      	beq.n	800d4ca <roundf+0x22>
 800d4d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d4d8:	4113      	asrs	r3, r2
 800d4da:	4403      	add	r3, r0
 800d4dc:	ea23 0301 	bic.w	r3, r3, r1
 800d4e0:	e7f1      	b.n	800d4c6 <roundf+0x1e>
 800d4e2:	2a80      	cmp	r2, #128	; 0x80
 800d4e4:	d1f1      	bne.n	800d4ca <roundf+0x22>
 800d4e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4ea:	4770      	bx	lr
 800d4ec:	007fffff 	.word	0x007fffff

0800d4f0 <_init>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr

0800d4fc <_fini>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr
